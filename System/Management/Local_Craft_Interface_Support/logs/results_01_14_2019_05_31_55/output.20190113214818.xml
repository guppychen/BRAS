<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20190113 21:32:01.286" generator="Robot 3.0.4 (Python 2.7.14 on linux2)">
<suite source="/home/guchen/workspace/AXOS" id="s1" name="AXOS">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation" id="s1-s1" name="AXOS-automation">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan" id="s1-s1-s1" name="Milan">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases" id="s1-s1-s1-s1" name="ST Test Cases">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/System" id="s1-s1-s1-s1-s1" name="System">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/System/Management" id="s1-s1-s1-s1-s1-s1" name="Management">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/System/Management/Local_Craft_Interface_Support" id="s1-s1-s1-s1-s1-s1-s1" name="Local Craft Interface Support">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/System/Management/Local_Craft_Interface_Support/test_cases" id="s1-s1-s1-s1-s1-s1-s1-s1" name="Test Cases">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/System/Management/Local_Craft_Interface_Support/test_cases/tc_Verify_craft_connection_after_reboot_the_standby_card.robot" id="s1-s1-s1-s1-s1-s1-s1-s1-s1" name="tc Verify craft connection after reboot the standby card">
<test id="s1-s1-s1-s1-s1-s1-s1-s1-s1-t1" name="tc_Verify_craft_connection_after_reboot_the_standby_card">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>set eut version and release</arg>
</arguments>
<msg timestamp="20190113 21:32:02.526" level="INFO">set eut version and release</msg>
<status status="PASS" endtime="20190113 21:32:02.526" starttime="20190113 21:32:02.524"></status>
</kw>
<kw name="set_eut_version" library="release_adapter">
<doc>set EUT build and release attribution</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>If device is not specified, get it from topo.yaml ${DEVICES} list</arg>
</arguments>
<msg timestamp="20190113 21:32:02.557" level="INFO">If device is not specified, get it from topo.yaml &lt;cafe.core.utils.Param object at 0x7f69a6895d50&gt; list</msg>
<status status="PASS" endtime="20190113 21:32:02.557" starttime="20190113 21:32:02.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${device}'</arg>
<arg>Create List</arg>
<arg>${device}</arg>
<arg>ELSE</arg>
<arg>get dictionary keys</arg>
<arg>${DEVICES}</arg>
</arguments>
<assign>
<var>${keys}</var>
</assign>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${DEVICES}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:02.560" starttime="20190113 21:32:02.559"></status>
</kw>
<msg timestamp="20190113 21:32:02.560" level="INFO">${keys} = ['eutA']</msg>
<status status="PASS" endtime="20190113 21:32:02.560" starttime="20190113 21:32:02.557"></status>
</kw>
<kw type="for" name="${eut} IN [ @{keys} ]">
<kw type="foritem" name="${eut} = eutA">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current eut is ${eut}, type is ${DEVICES.${eut}.type}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:02.564" starttime="20190113 21:32:02.562"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${DEVICES.${eut}.type}'!='AXOS'</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:02.565" starttime="20190113 21:32:02.564"></status>
</kw>
<kw name="get_eut_version" library="release_adapter">
<tags>
<tag>@author=llin</tag>
</tags>
<doc>this is the keyword used to get single device's build information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>cli</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:32:06.671" level="INFO">Created ShellDevice(eutA)</msg>
<msg timestamp="20190113 21:32:06.673" level="INFO">send session_command, cmd=cli, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:32:07.358" level="INFO">session_command result=cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG state persistence control commands
  clear                 - Clear object data
  clock                 - Modify clock
  configure             - Manipulate software configuration information
  copy                  - Copy files
  cpe-upgrade:cpe       - CPE operation
  debug                 - 
  delete                - Delete files
  devtools              - Enable/disable development tools
  download              - Download files
  enable                - Enable EXEC commands
  exit                  - Exit the management session
  folder                - 
  generate              - Generate files
  idle-timeout          - Configure idle timeout
  install               - 
  lock                  - lock a datastore
  logout                - Logout a user
  manual                - Manual operation with alarms
  no                    - Negate a command or set its defaults
  ofa-connect           - Open Flow Connect
  ofa-listener          - Open Flow Listener
  ofa-port              - Open Flow port
  ont-eth               - ONT-ETH efm-loopback-status mode
  ont-firmware-upgrade  - Start software download
  ont-simulation        - ONT simulation commands
  ont-upgrade           - ONT upgrade commands
  paginate              - Paginate output from CLI commands
  perform               - Perform an operation
  ping                  - Ping IP address
  ping6                 - Ping IPv6 address
  quit                  - Exit the management session
  redundancy            - redundancy switchover commands
  reload                - Reboot the current card
  remove-dynamic-policy - 
  replay                - Replay card-config
  restart               - Restart Diameter daemon
  run                   - 
  send                  - Send message to terminal of one or all users
  session               - 
  show                  - Show information about the system
  ssh                   - ssh command
  start                 - Start an operation
  stop                  - Stop an operation
  switch                - Switch network clock
  tcpdump               - tcpdump command
  telnet                - telnet command
  templatize            - Find patterns in subtree.
  terminal              - Set terminal type
  timestamp             - Enable/disable the display of timestamp
  traceroute            - Traceroute IP address
  uninstall             - 
  unlock                - unlock a datastore
  upgrade               - Upgrade commands
  upload                - Upload files
  verify                - 
NGPON2X4</msg>
<msg timestamp="20190113 21:32:07.359" level="INFO">${res} = cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG s...</msg>
<status status="PASS" endtime="20190113 21:32:07.359" starttime="20190113 21:32:02.567"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:32:07.363" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:32:07.902" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 21:32:07.903" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 21:32:07.903" starttime="20190113 21:32:07.361"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>(description|details)\\s*(.*)\r</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 21:32:07.906" level="INFO">${matches} = ['IBAXOS191-CI-330', 'IBAXOS191-CI-330']</msg>
<status status="PASS" endtime="20190113 21:32:07.906" starttime="20190113 21:32:07.905"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:07.908" starttime="20190113 21:32:07.907"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 21:32:07.909" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 21:32:07.909" starttime="20190113 21:32:07.908"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${build}</arg>
</arguments>
<msg timestamp="20190113 21:32:07.911" level="INFO">we've got the build informations : IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 21:32:07.911" starttime="20190113 21:32:07.910"></status>
</kw>
<msg timestamp="20190113 21:32:07.912" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 21:32:07.912" starttime="20190113 21:32:02.566"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>build</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:07.916" starttime="20190113 21:32:07.915"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s build is ${DEVICES.${eut}.build}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:07.918" starttime="20190113 21:32:07.917"></status>
</kw>
<kw name="get_eut_distro" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to get single device's distro information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:32:07.921" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:32:08.435" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 21:32:08.435" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 21:32:08.435" starttime="20190113 21:32:07.920"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>distro\\s*"(.*)"\r</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 21:32:08.439" level="INFO">${matches} = ['IB-AXOS-19.1 2019.01.12 02:16:30', 'IB-AXOS-19.1 2019.01.12 02:16:30']</msg>
<status status="PASS" endtime="20190113 21:32:08.439" starttime="20190113 21:32:08.437"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.440" starttime="20190113 21:32:08.439"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<msg timestamp="20190113 21:32:08.441" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 21:32:08.442" starttime="20190113 21:32:08.441"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${distro}</arg>
</arguments>
<msg timestamp="20190113 21:32:08.443" level="INFO">we've got the build informations : IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 21:32:08.443" starttime="20190113 21:32:08.442"></status>
</kw>
<msg timestamp="20190113 21:32:08.444" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 21:32:08.444" starttime="20190113 21:32:07.918"></status>
</kw>
<kw name="mapping_distro_to_release" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to mapping build id to release name</doc>
<arguments>
<arg>${distro}</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${distro}</arg>
<arg>\\s+.*$</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 21:32:08.448" level="INFO">${build} = IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 21:32:08.448" starttime="20190113 21:32:08.447"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the branch of the build is : ${build}</arg>
</arguments>
<msg timestamp="20190113 21:32:08.449" level="INFO">the branch of the build is : IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 21:32:08.450" starttime="20190113 21:32:08.448"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>open('${map}').readlines()</arg>
</arguments>
<assign>
<var>${fileHandler}</var>
</assign>
<msg timestamp="20190113 21:32:08.452" level="INFO">${fileHandler} = ['Release, Branch\n', 'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2\n', 'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-...</msg>
<status status="PASS" endtime="20190113 21:32:08.452" starttime="20190113 21:32:08.450"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the mapping file content : ${fileHandler}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.454" starttime="20190113 21:32:08.453"></status>
</kw>
<kw name="Convert To List" library="Collections">
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.455" starttime="20190113 21:32:08.454"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:32:08.457" level="INFO">${rowIndex} = 0</msg>
<status status="PASS" endtime="20190113 21:32:08.457" starttime="20190113 21:32:08.456"></status>
</kw>
<kw type="for" name="${rowitem} IN [ @{fileHandler} ]">
<kw type="foritem" name="${rowitem} = Release, Branch&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.460" starttime="20190113 21:32:08.459"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:32:08.465" level="FAIL">'Release, Branch
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:32:08.466" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:32:08.466" starttime="20190113 21:32:08.462"></status>
</kw>
<msg timestamp="20190113 21:32:08.466" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:32:08.466" starttime="20190113 21:32:08.461"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:32:08.468" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:32:08.468" starttime="20190113 21:32:08.467"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.470" starttime="20190113 21:32:08.469"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:32:08.486" level="INFO">${rowIndex} = 1</msg>
<status status="PASS" endtime="20190113 21:32:08.487" starttime="20190113 21:32:08.470"></status>
</kw>
<status status="PASS" endtime="20190113 21:32:08.488" starttime="20190113 21:32:08.458"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.490" starttime="20190113 21:32:08.489"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:32:08.493" level="FAIL">'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:32:08.493" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:32:08.493" starttime="20190113 21:32:08.492"></status>
</kw>
<msg timestamp="20190113 21:32:08.494" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:32:08.494" starttime="20190113 21:32:08.491"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:32:08.501" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:32:08.501" starttime="20190113 21:32:08.495"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.503" starttime="20190113 21:32:08.502"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:32:08.504" level="INFO">${rowIndex} = 2</msg>
<status status="PASS" endtime="20190113 21:32:08.504" starttime="20190113 21:32:08.503"></status>
</kw>
<status status="PASS" endtime="20190113 21:32:08.505" starttime="20190113 21:32:08.488"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.514" starttime="20190113 21:32:08.513"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:32:08.516" level="FAIL">'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:32:08.517" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:32:08.517" starttime="20190113 21:32:08.515"></status>
</kw>
<msg timestamp="20190113 21:32:08.517" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:32:08.517" starttime="20190113 21:32:08.514"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:32:08.519" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:32:08.519" starttime="20190113 21:32:08.518"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.520" starttime="20190113 21:32:08.520"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:32:08.522" level="INFO">${rowIndex} = 3</msg>
<status status="PASS" endtime="20190113 21:32:08.522" starttime="20190113 21:32:08.521"></status>
</kw>
<status status="PASS" endtime="20190113 21:32:08.522" starttime="20190113 21:32:08.505"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.524" starttime="20190113 21:32:08.524"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:32:08.527" level="FAIL">'AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:32:08.527" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:32:08.527" starttime="20190113 21:32:08.526"></status>
</kw>
<msg timestamp="20190113 21:32:08.528" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:32:08.528" starttime="20190113 21:32:08.525"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:32:08.529" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:32:08.530" starttime="20190113 21:32:08.529"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.531" starttime="20190113 21:32:08.530"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:32:08.533" level="INFO">${rowIndex} = 4</msg>
<status status="PASS" endtime="20190113 21:32:08.533" starttime="20190113 21:32:08.532"></status>
</kw>
<status status="PASS" endtime="20190113 21:32:08.533" starttime="20190113 21:32:08.523"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.535" starttime="20190113 21:32:08.534"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:32:08.538" level="FAIL">'AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:32:08.538" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:32:08.538" starttime="20190113 21:32:08.537"></status>
</kw>
<msg timestamp="20190113 21:32:08.539" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:32:08.539" starttime="20190113 21:32:08.536"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:32:08.540" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:32:08.540" starttime="20190113 21:32:08.539"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.542" starttime="20190113 21:32:08.541"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:32:08.544" level="INFO">${rowIndex} = 5</msg>
<status status="PASS" endtime="20190113 21:32:08.544" starttime="20190113 21:32:08.542"></status>
</kw>
<status status="PASS" endtime="20190113 21:32:08.544" starttime="20190113 21:32:08.533"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_19_1, IB-AXOS-19.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.546" starttime="20190113 21:32:08.545"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.549" starttime="20190113 21:32:08.548"></status>
</kw>
<msg timestamp="20190113 21:32:08.549" level="INFO">${contain_build} = True</msg>
<status status="PASS" endtime="20190113 21:32:08.549" starttime="20190113 21:32:08.547"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:32:08.551" level="INFO">build IB-AXOS-19.1 search result is True</msg>
<status status="PASS" endtime="20190113 21:32:08.551" starttime="20190113 21:32:08.550"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:32:08.553" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20190113 21:32:08.553" starttime="20190113 21:32:08.552"></status>
</kw>
<status status="PASS" endtime="20190113 21:32:08.553" starttime="20190113 21:32:08.544"></status>
</kw>
<status status="PASS" endtime="20190113 21:32:08.553" starttime="20190113 21:32:08.457"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${contain_build}'!='True'</arg>
<arg>NONE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.555" starttime="20190113 21:32:08.554"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we find the release info in ${rowIndex} row</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.556" starttime="20190113 21:32:08.555"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<assign>
<var>${len}</var>
</assign>
<msg timestamp="20190113 21:32:08.558" level="INFO">Length is 6</msg>
<msg timestamp="20190113 21:32:08.558" level="INFO">${len} = 6</msg>
<status status="PASS" endtime="20190113 21:32:08.558" starttime="20190113 21:32:08.557"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>@{fileHandler}[${rowIndex}]</arg>
</arguments>
<assign>
<var>${releaseStr}</var>
</assign>
<msg timestamp="20190113 21:32:08.559" level="DEBUG">Argument types are:
&lt;type 'str'&gt;</msg>
<msg timestamp="20190113 21:32:08.560" level="INFO">${releaseStr} = AXOS_19_1, IB-AXOS-19.1
</msg>
<status status="PASS" endtime="20190113 21:32:08.560" starttime="20190113 21:32:08.559"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>release=${releaseStr}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.561" starttime="20190113 21:32:08.560"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${releaseStr}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>@{matches}</var>
</assign>
<msg timestamp="20190113 21:32:08.563" level="INFO">@{matches} = [ AXOS_19_1 |  IB-AXOS-19.1
 ]</msg>
<status status="PASS" endtime="20190113 21:32:08.563" starttime="20190113 21:32:08.562"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.565" starttime="20190113 21:32:08.564"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 21:32:08.566" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 21:32:08.566" starttime="20190113 21:32:08.565"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the release information: ${release}.</arg>
</arguments>
<msg timestamp="20190113 21:32:08.567" level="INFO">we've got the release information: AXOS_19_1.</msg>
<status status="PASS" endtime="20190113 21:32:08.568" starttime="20190113 21:32:08.567"></status>
</kw>
<msg timestamp="20190113 21:32:08.568" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 21:32:08.568" starttime="20190113 21:32:08.445"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'NONE'=='${release}'</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.570" starttime="20190113 21:32:08.569"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>release</arg>
<arg>${release}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.572" starttime="20190113 21:32:08.571"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s release is ${DEVICES.${eut}.release}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:08.573" starttime="20190113 21:32:08.572"></status>
</kw>
<status status="PASS" endtime="20190113 21:32:08.574" starttime="20190113 21:32:02.561"></status>
</kw>
<status status="PASS" endtime="20190113 21:32:08.588" starttime="20190113 21:32:02.561"></status>
</kw>
<status status="PASS" endtime="20190113 21:32:08.611" starttime="20190113 21:32:02.554"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:1 Provision ip address for craft 1 and login the device</arg>
</arguments>
<msg timestamp="20190113 21:32:08.627" level="INFO">STEP:1 Provision ip address for craft 1 and login the device</msg>
<status status="PASS" endtime="20190113 21:32:08.628" starttime="20190113 21:32:08.626"></status>
</kw>
<kw name="get_system_equipment_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get "show system-equipment" command information,</doc>
<arguments>
<arg>eutA</arg>
</arguments>
<assign>
<var>&amp;{dict_card_info}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show system-equipment</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:32:08.673" level="INFO">send session_command, cmd=show system-equipment, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:32:09.158" level="INFO">session_command result=show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<msg timestamp="20190113 21:32:09.159" level="INFO">${res} = show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<status status="PASS" endtime="20190113 21:32:09.159" starttime="20190113 21:32:08.671"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>active-controller\\s+"card\\s+(\\d/\\d)\\s+.*"</arg>
</arguments>
<assign>
<var>${match}</var>
<var>${active_card}</var>
</assign>
<msg timestamp="20190113 21:32:09.163" level="INFO">${match} = active-controller  "card 1/2 (this card)"</msg>
<msg timestamp="20190113 21:32:09.163" level="INFO">${active_card} = 1/2</msg>
<status status="PASS" endtime="20190113 21:32:09.163" starttime="20190113 21:32:09.161"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>standby-controller\\s+"card\\s+(\\d/\\d)\\s+.*"</arg>
</arguments>
<assign>
<var>${match}</var>
<var>${standby_card}</var>
</assign>
<msg timestamp="20190113 21:32:09.165" level="INFO">${match} = standby-controller "card 1/1 (mate card)"</msg>
<msg timestamp="20190113 21:32:09.165" level="INFO">${standby_card} = 1/1</msg>
<status status="PASS" endtime="20190113 21:32:09.166" starttime="20190113 21:32:09.164"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] get system-equipment active-controller ${active_card}, standby-controller ${standby_card}******</arg>
</arguments>
<msg timestamp="20190113 21:32:09.167" level="INFO">******[eutA] get system-equipment active-controller 1/2, standby-controller 1/1******</msg>
<status status="PASS" endtime="20190113 21:32:09.168" starttime="20190113 21:32:09.167"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>active=${active_card}</arg>
<arg>standby=${standby_card}</arg>
</arguments>
<assign>
<var>&amp;{dict_info}</var>
</assign>
<msg timestamp="20190113 21:32:09.170" level="INFO">&amp;{dict_info} = { active=1/2 | standby=1/1 }</msg>
<status status="PASS" endtime="20190113 21:32:09.170" starttime="20190113 21:32:09.168"></status>
</kw>
<msg timestamp="20190113 21:32:09.171" level="INFO">&amp;{dict_card_info} = { active=1/2 | standby=1/1 }</msg>
<status status="PASS" endtime="20190113 21:32:09.171" starttime="20190113 21:32:08.670"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${old_active_Card}</arg>
<arg>&amp;{dict_card_info}[active]</arg>
</arguments>
<msg timestamp="20190113 21:32:09.188" level="INFO">${old_active_Card} = 1/2</msg>
<status status="PASS" endtime="20190113 21:32:09.188" starttime="20190113 21:32:09.186"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${old_standby_Card}</arg>
<arg>&amp;{dict_card_info}[standby]</arg>
</arguments>
<msg timestamp="20190113 21:32:09.226" level="INFO">${old_standby_Card} = 1/1</msg>
<status status="PASS" endtime="20190113 21:32:09.226" starttime="20190113 21:32:09.224"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:2 reboot the standby card connection works and has no interrupt.</arg>
</arguments>
<msg timestamp="20190113 21:32:09.261" level="INFO">STEP:2 reboot the standby card connection works and has no interrupt.</msg>
<status status="PASS" endtime="20190113 21:32:09.262" starttime="20190113 21:32:09.260"></status>
</kw>
<kw name="reload_card" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: reload operation</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>reload ${card}</arg>
<arg>prompt=Proceed with reload\\? \\[y/N\\]</arg>
</arguments>
<msg timestamp="20190113 21:32:09.320" level="INFO">send session_command, cmd=reload 1/1, prompt={u'Proceed with reload\\? \\[y/N\\]': None}, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:32:09.793" level="INFO">session_command result=reload 1/1
Warning! Reloading the device will impact services.
Running configuration has been changed
Use 'copy running-config startup-config' to save modified configuration
</msg>
<status status="PASS" endtime="20190113 21:32:09.793" starttime="20190113 21:32:09.307"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>y</arg>
<arg>timeout=120</arg>
</arguments>
<msg timestamp="20190113 21:32:09.801" level="INFO">send session_command, cmd=y, prompt=None, timeout=120, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:32:12.127" level="INFO">session_command result=y
NGPON2X4</msg>
<status status="PASS" endtime="20190113 21:32:12.127" starttime="20190113 21:32:09.797"></status>
</kw>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:12.223" starttime="20190113 21:32:12.129"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
<arg>Wait for card ${card} reload</arg>
</arguments>
<msg timestamp="20190113 21:32:22.227" level="INFO">Slept 10 seconds</msg>
<msg timestamp="20190113 21:32:22.227" level="INFO">Wait for card 1/1 reload</msg>
<status status="PASS" endtime="20190113 21:32:22.227" starttime="20190113 21:32:12.224"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>120s</arg>
<arg>5s</arg>
<arg>check_card_info</arg>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>Unequipped</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>Unequipped</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:32:22.233" level="INFO">******[eutA] check card 1/1 Unequipped, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:32:22.234" starttime="20190113 21:32:22.232"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:32:22.247" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:32:27.025" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:32:27.026" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:32:27.026" starttime="20190113 21:32:22.234"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:32:27.030" level="INFO">${pattern} = (?i)1/1\s+.*Unequipped\s+.*</msg>
<status status="PASS" endtime="20190113 21:32:27.030" starttime="20190113 21:32:27.028"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:32:27.034" level="FAIL">'show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*Unequipped\s+.*'</msg>
<msg timestamp="20190113 21:32:27.035" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:32:27.035" starttime="20190113 21:32:27.033"></status>
</kw>
<status status="FAIL" endtime="20190113 21:32:27.035" starttime="20190113 21:32:27.031"></status>
</kw>
<status status="FAIL" endtime="20190113 21:32:27.036" starttime="20190113 21:32:22.231"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>Unequipped</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:32:32.058" level="INFO">******[eutA] check card 1/1 Unequipped, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:32:32.059" starttime="20190113 21:32:32.057"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:32:32.061" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:32:36.387" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:32:36.387" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:32:36.388" starttime="20190113 21:32:32.059"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:32:36.392" level="INFO">${pattern} = (?i)1/1\s+.*Unequipped\s+.*</msg>
<status status="PASS" endtime="20190113 21:32:36.393" starttime="20190113 21:32:36.390"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:32:36.396" level="FAIL">'show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*Unequipped\s+.*'</msg>
<msg timestamp="20190113 21:32:36.396" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:32:36.396" starttime="20190113 21:32:36.395"></status>
</kw>
<status status="FAIL" endtime="20190113 21:32:36.396" starttime="20190113 21:32:36.393"></status>
</kw>
<status status="FAIL" endtime="20190113 21:32:36.397" starttime="20190113 21:32:32.054"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>Unequipped</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:32:41.405" level="INFO">******[eutA] check card 1/1 Unequipped, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:32:41.405" starttime="20190113 21:32:41.404"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:32:41.407" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:32:42.051" level="INFO">session_command result=show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:32:42.052" level="INFO">${res} = show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
---------------------------...</msg>
<status status="PASS" endtime="20190113 21:32:42.052" starttime="20190113 21:32:41.406"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:32:42.056" level="INFO">${pattern} = (?i)1/1\s+.*Unequipped\s+.*</msg>
<status status="PASS" endtime="20190113 21:32:42.057" starttime="20190113 21:32:42.055"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:32:42.060" level="FAIL">'show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*Unequipped\s+.*'</msg>
<msg timestamp="20190113 21:32:42.060" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:32:42.060" starttime="20190113 21:32:42.059"></status>
</kw>
<status status="FAIL" endtime="20190113 21:32:42.060" starttime="20190113 21:32:42.057"></status>
</kw>
<status status="FAIL" endtime="20190113 21:32:42.061" starttime="20190113 21:32:41.402"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>Unequipped</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:32:47.080" level="INFO">******[eutA] check card 1/1 Unequipped, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:32:47.081" starttime="20190113 21:32:47.079"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:32:47.091" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:32:47.619" level="INFO">session_command result=show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:32:47.620" level="INFO">${res} = show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
---------------------------...</msg>
<status status="PASS" endtime="20190113 21:32:47.620" starttime="20190113 21:32:47.081"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:32:47.622" level="INFO">${pattern} = (?i)1/1\s+.*Unequipped\s+.*</msg>
<status status="PASS" endtime="20190113 21:32:47.623" starttime="20190113 21:32:47.621"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:32:47.626" level="FAIL">'show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*Unequipped\s+.*'</msg>
<msg timestamp="20190113 21:32:47.626" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:32:47.626" starttime="20190113 21:32:47.624"></status>
</kw>
<status status="FAIL" endtime="20190113 21:32:47.626" starttime="20190113 21:32:47.623"></status>
</kw>
<status status="FAIL" endtime="20190113 21:32:47.627" starttime="20190113 21:32:47.070"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>Unequipped</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:32:52.632" level="INFO">******[eutA] check card 1/1 Unequipped, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:32:52.633" starttime="20190113 21:32:52.631"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:32:52.635" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:32:53.174" level="INFO">session_command result=show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:32:53.175" level="INFO">${res} = show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
---------------------------...</msg>
<status status="PASS" endtime="20190113 21:32:53.175" starttime="20190113 21:32:52.633"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:32:53.178" level="INFO">${pattern} = (?i)1/1\s+.*Unequipped\s+.*</msg>
<status status="PASS" endtime="20190113 21:32:53.179" starttime="20190113 21:32:53.177"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:32:53.182" level="FAIL">'show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*Unequipped\s+.*'</msg>
<msg timestamp="20190113 21:32:53.182" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:32:53.182" starttime="20190113 21:32:53.180"></status>
</kw>
<status status="FAIL" endtime="20190113 21:32:53.183" starttime="20190113 21:32:53.179"></status>
</kw>
<status status="FAIL" endtime="20190113 21:32:53.183" starttime="20190113 21:32:52.629"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>Unequipped</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:32:58.189" level="INFO">******[eutA] check card 1/1 Unequipped, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:32:58.189" starttime="20190113 21:32:58.188"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:32:58.193" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:32:58.708" level="INFO">session_command result=show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   Unequipped  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:32:58.709" level="INFO">${res} = show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
---------------------------...</msg>
<status status="PASS" endtime="20190113 21:32:58.709" starttime="20190113 21:32:58.191"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:32:58.712" level="INFO">${pattern} = (?i)1/1\s+.*Unequipped\s+.*</msg>
<status status="PASS" endtime="20190113 21:32:58.712" starttime="20190113 21:32:58.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:32:58.715" starttime="20190113 21:32:58.714"></status>
</kw>
<status status="PASS" endtime="20190113 21:32:58.715" starttime="20190113 21:32:58.713"></status>
</kw>
<status status="PASS" endtime="20190113 21:32:58.716" starttime="20190113 21:32:58.186"></status>
</kw>
<status status="PASS" endtime="20190113 21:32:58.724" starttime="20190113 21:32:22.228"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
<arg>Wait for reload ${card} finish</arg>
</arguments>
<msg timestamp="20190113 21:33:28.727" level="INFO">Slept 30 seconds</msg>
<msg timestamp="20190113 21:33:28.728" level="INFO">Wait for reload 1/1 finish</msg>
<status status="PASS" endtime="20190113 21:33:28.728" starttime="20190113 21:32:58.725"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>${retry_interval}</arg>
<arg>check_card_info</arg>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:33:28.737" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:33:28.737" starttime="20190113 21:33:28.736"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:33:28.740" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:33:29.363" level="INFO">session_command result=show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   Unequipped  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:33:29.364" level="INFO">${res} = show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
---------------------------...</msg>
<status status="PASS" endtime="20190113 21:33:29.364" starttime="20190113 21:33:28.738"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:33:29.367" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:33:29.367" starttime="20190113 21:33:29.366"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:33:29.370" level="FAIL">'show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   Unequipped  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*In Service\s+.*'</msg>
<msg timestamp="20190113 21:33:29.371" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:33:29.371" starttime="20190113 21:33:29.369"></status>
</kw>
<status status="FAIL" endtime="20190113 21:33:29.371" starttime="20190113 21:33:29.368"></status>
</kw>
<status status="FAIL" endtime="20190113 21:33:29.372" starttime="20190113 21:33:28.732"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:33:59.378" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:33:59.379" starttime="20190113 21:33:59.377"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:33:59.384" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:33:59.936" level="INFO">session_command result=show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   Unequipped  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:33:59.936" level="INFO">${res} = show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
---------------------------...</msg>
<status status="PASS" endtime="20190113 21:33:59.936" starttime="20190113 21:33:59.380"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:33:59.939" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:33:59.940" starttime="20190113 21:33:59.938"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:33:59.943" level="FAIL">'show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   Unequipped  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*In Service\s+.*'</msg>
<msg timestamp="20190113 21:33:59.943" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:33:59.943" starttime="20190113 21:33:59.942"></status>
</kw>
<status status="FAIL" endtime="20190113 21:33:59.944" starttime="20190113 21:33:59.940"></status>
</kw>
<status status="FAIL" endtime="20190113 21:33:59.944" starttime="20190113 21:33:59.374"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:34:29.956" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:34:29.956" starttime="20190113 21:34:29.955"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:34:29.959" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:34:30.707" level="INFO">session_command result=show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
------------------------------------------------------------------------------
1/1   NGPON2-4   Connected  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:34:30.707" level="INFO">${res} = show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
-----------------------------...</msg>
<status status="PASS" endtime="20190113 21:34:30.708" starttime="20190113 21:34:29.957"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:34:30.712" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:34:30.713" starttime="20190113 21:34:30.710"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:34:30.716" level="FAIL">'show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
------------------------------------------------------------------------------
1/1   NGPON2-4   Connected  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*In Service\s+.*'</msg>
<msg timestamp="20190113 21:34:30.716" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:34:30.716" starttime="20190113 21:34:30.715"></status>
</kw>
<status status="FAIL" endtime="20190113 21:34:30.716" starttime="20190113 21:34:30.713"></status>
</kw>
<status status="FAIL" endtime="20190113 21:34:30.717" starttime="20190113 21:34:29.946"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:35:00.733" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:35:00.733" starttime="20190113 21:35:00.732"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:35:00.739" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:35:01.352" level="INFO">session_command result=show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
------------------------------------------------------------------------------
1/1   NGPON2-4   Connected  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:35:01.353" level="INFO">${res} = show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
-----------------------------...</msg>
<status status="PASS" endtime="20190113 21:35:01.353" starttime="20190113 21:35:00.734"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:35:01.356" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:35:01.356" starttime="20190113 21:35:01.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:35:01.359" level="FAIL">'show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
------------------------------------------------------------------------------
1/1   NGPON2-4   Connected  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*In Service\s+.*'</msg>
<msg timestamp="20190113 21:35:01.359" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:35:01.359" starttime="20190113 21:35:01.358"></status>
</kw>
<status status="FAIL" endtime="20190113 21:35:01.360" starttime="20190113 21:35:01.356"></status>
</kw>
<status status="FAIL" endtime="20190113 21:35:01.360" starttime="20190113 21:35:00.730"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:35:31.368" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:35:31.368" starttime="20190113 21:35:31.366"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:35:31.370" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:35:32.080" level="INFO">session_command result=show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
------------------------------------------------------------------------------
1/1   NGPON2-4   Connected  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:35:32.080" level="INFO">${res} = show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
-----------------------------...</msg>
<status status="PASS" endtime="20190113 21:35:32.081" starttime="20190113 21:35:31.369"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:35:32.091" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:35:32.091" starttime="20190113 21:35:32.089"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:35:32.094" level="FAIL">'show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
------------------------------------------------------------------------------
1/1   NGPON2-4   Connected  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*In Service\s+.*'</msg>
<msg timestamp="20190113 21:35:32.095" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:35:32.095" starttime="20190113 21:35:32.093"></status>
</kw>
<status status="FAIL" endtime="20190113 21:35:32.095" starttime="20190113 21:35:32.092"></status>
</kw>
<status status="FAIL" endtime="20190113 21:35:32.096" starttime="20190113 21:35:31.364"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:36:02.101" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:36:02.102" starttime="20190113 21:36:02.100"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:36:02.104" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:36:02.731" level="INFO">session_command result=show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
------------------------------------------------------------------------------
1/1   NGPON2-4   Connected  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:36:02.732" level="INFO">${res} = show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
-----------------------------...</msg>
<status status="PASS" endtime="20190113 21:36:02.732" starttime="20190113 21:36:02.102"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:36:02.735" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:36:02.735" starttime="20190113 21:36:02.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:36:02.738" level="FAIL">'show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
------------------------------------------------------------------------------
1/1   NGPON2-4   Connected  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*In Service\s+.*'</msg>
<msg timestamp="20190113 21:36:02.738" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:36:02.739" starttime="20190113 21:36:02.737"></status>
</kw>
<status status="FAIL" endtime="20190113 21:36:02.739" starttime="20190113 21:36:02.736"></status>
</kw>
<status status="FAIL" endtime="20190113 21:36:02.739" starttime="20190113 21:36:02.098"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:36:32.745" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:36:32.746" starttime="20190113 21:36:32.744"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:36:32.748" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:36:33.323" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:36:33.324" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:36:33.324" starttime="20190113 21:36:32.746"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:36:33.329" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:36:33.329" starttime="20190113 21:36:33.328"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:33.332" starttime="20190113 21:36:33.331"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:33.332" starttime="20190113 21:36:33.330"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:33.333" starttime="20190113 21:36:32.742"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:33.334" starttime="20190113 21:33:28.729"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:33.335" starttime="20190113 21:32:09.305"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:3 wait for the standby card ready connection works and has no interrupt.</arg>
</arguments>
<msg timestamp="20190113 21:36:33.386" level="INFO">STEP:3 wait for the standby card ready connection works and has no interrupt.</msg>
<status status="PASS" endtime="20190113 21:36:33.387" starttime="20190113 21:36:33.385"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>10s</arg>
<arg>check_card_info</arg>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:36:33.449" level="INFO">******[eutA] check card 1/2 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:36:33.450" starttime="20190113 21:36:33.448"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:36:33.455" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:36:33.977" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:36:33.977" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:36:33.978" starttime="20190113 21:36:33.450"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:36:33.980" level="INFO">${pattern} = (?i)1/2\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:36:33.981" starttime="20190113 21:36:33.979"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:33.984" starttime="20190113 21:36:33.983"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:33.984" starttime="20190113 21:36:33.981"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:33.985" starttime="20190113 21:36:33.447"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:33.986" starttime="20190113 21:36:33.445"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>10s</arg>
<arg>check_card_info</arg>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:36:34.040" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:36:34.041" starttime="20190113 21:36:34.039"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:36:34.044" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:36:34.539" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:36:34.540" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:36:34.540" starttime="20190113 21:36:34.042"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:36:34.543" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:36:34.543" starttime="20190113 21:36:34.542"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:34.546" starttime="20190113 21:36:34.545"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:34.547" starttime="20190113 21:36:34.544"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:34.547" starttime="20190113 21:36:34.038"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:34.549" starttime="20190113 21:36:34.036"></status>
</kw>
<kw name="check_system_equipment_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show system-equipment" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>active-controller=${old_active_Card}</arg>
<arg>standby-controller=${old_standby_Card}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show system-equipment</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:36:34.577" level="INFO">send session_command, cmd=show system-equipment, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:36:35.062" level="INFO">session_command result=show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<msg timestamp="20190113 21:36:35.062" level="INFO">${res} = show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<status status="PASS" endtime="20190113 21:36:35.063" starttime="20190113 21:36:34.571"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{dict_check_item.keys()} ]">
<kw type="foritem" name="${check_item} = active-controller">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:36:35.070" level="INFO">${pattern} = (?i)active-controller\s+.*1/2</msg>
<status status="PASS" endtime="20190113 21:36:35.070" starttime="20190113 21:36:35.067"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check system-equipment:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:36:35.073" level="INFO">******[eutA] check system-equipment:(?i)active-controller\s+.*1/2, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:36:35.074" starttime="20190113 21:36:35.072"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:35.080" starttime="20190113 21:36:35.078"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:35.081" starttime="20190113 21:36:35.075"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:35.081" starttime="20190113 21:36:35.066"></status>
</kw>
<kw type="foritem" name="${check_item} = standby-controller">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:36:35.086" level="INFO">${pattern} = (?i)standby-controller\s+.*1/1</msg>
<status status="PASS" endtime="20190113 21:36:35.086" starttime="20190113 21:36:35.084"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check system-equipment:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:36:35.089" level="INFO">******[eutA] check system-equipment:(?i)standby-controller\s+.*1/1, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:36:35.089" starttime="20190113 21:36:35.087"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:35.096" starttime="20190113 21:36:35.094"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:35.097" starttime="20190113 21:36:35.091"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:35.098" starttime="20190113 21:36:35.082"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:35.098" starttime="20190113 21:36:35.064"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:35.099" starttime="20190113 21:36:34.569"></status>
</kw>
<kw name="check_system_equipment_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show system-equipment" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>active-controller=${old_standby_Card}</arg>
<arg>standby-controller=${old_active_Card}</arg>
<arg>contain=no</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show system-equipment</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:36:35.151" level="INFO">send session_command, cmd=show system-equipment, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:36:35.607" level="INFO">session_command result=show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<msg timestamp="20190113 21:36:35.607" level="INFO">${res} = show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<status status="PASS" endtime="20190113 21:36:35.608" starttime="20190113 21:36:35.147"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{dict_check_item.keys()} ]">
<kw type="foritem" name="${check_item} = active-controller">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:36:35.613" level="INFO">${pattern} = (?i)active-controller\s+.*1/1</msg>
<status status="PASS" endtime="20190113 21:36:35.613" starttime="20190113 21:36:35.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check system-equipment:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:36:35.614" level="INFO">******[eutA] check system-equipment:(?i)active-controller\s+.*1/1, contain=no******</msg>
<status status="PASS" endtime="20190113 21:36:35.614" starttime="20190113 21:36:35.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Not Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` matches ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:35.617" starttime="20190113 21:36:35.616"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:35.618" starttime="20190113 21:36:35.615"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:35.618" starttime="20190113 21:36:35.610"></status>
</kw>
<kw type="foritem" name="${check_item} = standby-controller">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:36:35.621" level="INFO">${pattern} = (?i)standby-controller\s+.*1/2</msg>
<status status="PASS" endtime="20190113 21:36:35.621" starttime="20190113 21:36:35.619"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check system-equipment:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:36:35.622" level="INFO">******[eutA] check system-equipment:(?i)standby-controller\s+.*1/2, contain=no******</msg>
<status status="PASS" endtime="20190113 21:36:35.623" starttime="20190113 21:36:35.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Not Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` matches ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:35.626" starttime="20190113 21:36:35.625"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:35.626" starttime="20190113 21:36:35.623"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:35.627" starttime="20190113 21:36:35.618"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:35.627" starttime="20190113 21:36:35.609"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:35.628" starttime="20190113 21:36:35.145"></status>
</kw>
<kw type="teardown" name="case teardown">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait until eutA in service</arg>
</arguments>
<msg timestamp="20190113 21:36:35.648" level="INFO">wait until eutA in service</msg>
<status status="PASS" endtime="20190113 21:36:35.648" starttime="20190113 21:36:35.647"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>10s</arg>
<arg>check_card_info</arg>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:36:35.655" level="INFO">******[eutA] check card 1/2 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:36:35.655" starttime="20190113 21:36:35.654"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:36:35.658" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:36:36.198" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:36:36.199" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:36:36.199" starttime="20190113 21:36:35.656"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:36:36.202" level="INFO">${pattern} = (?i)1/2\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:36:36.202" starttime="20190113 21:36:36.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:36.205" starttime="20190113 21:36:36.204"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:36.206" starttime="20190113 21:36:36.203"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:36.206" starttime="20190113 21:36:35.652"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:36.208" starttime="20190113 21:36:35.650"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>10s</arg>
<arg>check_card_info</arg>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:36:36.215" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:36:36.215" starttime="20190113 21:36:36.213"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:36:36.219" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:36:36.757" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:36:36.758" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:36:36.758" starttime="20190113 21:36:36.216"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:36:36.764" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:36:36.764" starttime="20190113 21:36:36.761"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:36.769" starttime="20190113 21:36:36.767"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:36.769" starttime="20190113 21:36:36.765"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:36.770" starttime="20190113 21:36:36.212"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:36.771" starttime="20190113 21:36:36.210"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:36.774" starttime="20190113 21:36:35.645"></status>
</kw>
<doc>1 Provision ip address for craft 1 and login the device login successful
2 reboot the standby card connection works and has no interrupt.
3 wait for the standby card ready connection works and has no interrupt.</doc>
<tags>
<tag>@author=Min Gu</tag>
<tag>@eut=10GE-12</tag>
<tag>@eut=DualCard</tag>
<tag>@eut=GPON-8r2</tag>
<tag>@feature=Management</tag>
<tag>@globalid=2509259</tag>
<tag>@priority=P2</tag>
<tag>@require=1eut</tag>
<tag>@subFeature=Local Craft Interface Support</tag>
<tag>@tcid=AXOS_E72_PARENT-TC-3749</tag>
<tag>@user_interface=CLI</tag>
</tags>
<status status="PASS" endtime="20190113 21:36:36.822" critical="yes" starttime="20190113 21:32:02.481"></status>
</test>
<status status="PASS" endtime="20190113 21:36:36.983" starttime="20190113 21:32:01.484"></status>
</suite>
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/System/Management/Local_Craft_Interface_Support/test_cases/tc_Verify_craft_connection_after_reboot_the_system.robot" id="s1-s1-s1-s1-s1-s1-s1-s1-s2" name="tc Verify craft connection after reboot the system">
<test id="s1-s1-s1-s1-s1-s1-s1-s1-s2-t1" name="tc_Verify_craft_connection_after_reboot_the_system">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>set eut version and release</arg>
</arguments>
<msg timestamp="20190113 21:36:37.424" level="INFO">set eut version and release</msg>
<status status="PASS" endtime="20190113 21:36:37.425" starttime="20190113 21:36:37.423"></status>
</kw>
<kw name="set_eut_version" library="release_adapter">
<doc>set EUT build and release attribution</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>If device is not specified, get it from topo.yaml ${DEVICES} list</arg>
</arguments>
<msg timestamp="20190113 21:36:37.437" level="INFO">If device is not specified, get it from topo.yaml &lt;cafe.core.utils.Param object at 0x7f69a6895d50&gt; list</msg>
<status status="PASS" endtime="20190113 21:36:37.438" starttime="20190113 21:36:37.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${device}'</arg>
<arg>Create List</arg>
<arg>${device}</arg>
<arg>ELSE</arg>
<arg>get dictionary keys</arg>
<arg>${DEVICES}</arg>
</arguments>
<assign>
<var>${keys}</var>
</assign>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${DEVICES}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:37.441" starttime="20190113 21:36:37.440"></status>
</kw>
<msg timestamp="20190113 21:36:37.441" level="INFO">${keys} = ['eutA']</msg>
<status status="PASS" endtime="20190113 21:36:37.441" starttime="20190113 21:36:37.439"></status>
</kw>
<kw type="for" name="${eut} IN [ @{keys} ]">
<kw type="foritem" name="${eut} = eutA">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current eut is ${eut}, type is ${DEVICES.${eut}.type}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:37.444" starttime="20190113 21:36:37.443"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${DEVICES.${eut}.type}'!='AXOS'</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:37.446" starttime="20190113 21:36:37.445"></status>
</kw>
<kw name="get_eut_version" library="release_adapter">
<tags>
<tag>@author=llin</tag>
</tags>
<doc>this is the keyword used to get single device's build information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>cli</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:36:37.450" level="INFO">send session_command, cmd=cli, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:36:37.947" level="INFO">session_command result=cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG state persistence control commands
  clear                 - Clear object data
  clock                 - Modify clock
  configure             - Manipulate software configuration information
  copy                  - Copy files
  cpe-upgrade:cpe       - CPE operation
  debug                 - 
  delete                - Delete files
  devtools              - Enable/disable development tools
  download              - Download files
  enable                - Enable EXEC commands
  exit                  - Exit the management session
  folder                - 
  generate              - Generate files
  idle-timeout          - Configure idle timeout
  install               - 
  lock                  - lock a datastore
  logout                - Logout a user
  manual                - Manual operation with alarms
  no                    - Negate a command or set its defaults
  ofa-connect           - Open Flow Connect
  ofa-listener          - Open Flow Listener
  ofa-port              - Open Flow port
  ont-eth               - ONT-ETH efm-loopback-status mode
  ont-firmware-upgrade  - Start software download
  ont-simulation        - ONT simulation commands
  ont-upgrade           - ONT upgrade commands
  paginate              - Paginate output from CLI commands
  perform               - Perform an operation
  ping                  - Ping IP address
  ping6                 - Ping IPv6 address
  quit                  - Exit the management session
  redundancy            - redundancy switchover commands
  reload                - Reboot the current card
  remove-dynamic-policy - 
  replay                - Replay card-config
  restart               - Restart Diameter daemon
  run                   - 
  send                  - Send message to terminal of one or all users
  session               - 
  show                  - Show information about the system
  ssh                   - ssh command
  start                 - Start an operation
  stop                  - Stop an operation
  switch                - Switch network clock
  tcpdump               - tcpdump command
  telnet                - telnet command
  templatize            - Find patterns in subtree.
  terminal              - Set terminal type
  timestamp             - Enable/disable the display of timestamp
  traceroute            - Traceroute IP address
  uninstall             - 
  unlock                - unlock a datastore
  upgrade               - Upgrade commands
  upload                - Upload files
  verify                - 
NGPON2X4</msg>
<msg timestamp="20190113 21:36:37.948" level="INFO">${res} = cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG s...</msg>
<status status="PASS" endtime="20190113 21:36:37.948" starttime="20190113 21:36:37.448"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:36:37.962" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:36:38.457" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 21:36:38.458" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 21:36:38.458" starttime="20190113 21:36:37.950"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>(description|details)\\s*(.*)\r</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 21:36:38.461" level="INFO">${matches} = ['IBAXOS191-CI-330', 'IBAXOS191-CI-330']</msg>
<status status="PASS" endtime="20190113 21:36:38.461" starttime="20190113 21:36:38.460"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:38.463" starttime="20190113 21:36:38.462"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 21:36:38.464" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 21:36:38.464" starttime="20190113 21:36:38.463"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${build}</arg>
</arguments>
<msg timestamp="20190113 21:36:38.466" level="INFO">we've got the build informations : IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 21:36:38.466" starttime="20190113 21:36:38.465"></status>
</kw>
<msg timestamp="20190113 21:36:38.466" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 21:36:38.466" starttime="20190113 21:36:37.447"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>build</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:38.482" starttime="20190113 21:36:38.481"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s build is ${DEVICES.${eut}.build}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:38.484" starttime="20190113 21:36:38.483"></status>
</kw>
<kw name="get_eut_distro" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to get single device's distro information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:36:38.497" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:36:39.031" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 21:36:39.031" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 21:36:39.031" starttime="20190113 21:36:38.486"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>distro\\s*"(.*)"\r</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 21:36:39.043" level="INFO">${matches} = ['IB-AXOS-19.1 2019.01.12 02:16:30', 'IB-AXOS-19.1 2019.01.12 02:16:30']</msg>
<status status="PASS" endtime="20190113 21:36:39.044" starttime="20190113 21:36:39.042"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.045" starttime="20190113 21:36:39.044"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<msg timestamp="20190113 21:36:39.047" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 21:36:39.047" starttime="20190113 21:36:39.046"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${distro}</arg>
</arguments>
<msg timestamp="20190113 21:36:39.049" level="INFO">we've got the build informations : IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 21:36:39.049" starttime="20190113 21:36:39.047"></status>
</kw>
<msg timestamp="20190113 21:36:39.050" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 21:36:39.050" starttime="20190113 21:36:38.485"></status>
</kw>
<kw name="mapping_distro_to_release" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to mapping build id to release name</doc>
<arguments>
<arg>${distro}</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${distro}</arg>
<arg>\\s+.*$</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 21:36:39.081" level="INFO">${build} = IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 21:36:39.081" starttime="20190113 21:36:39.080"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the branch of the build is : ${build}</arg>
</arguments>
<msg timestamp="20190113 21:36:39.082" level="INFO">the branch of the build is : IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 21:36:39.083" starttime="20190113 21:36:39.082"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>open('${map}').readlines()</arg>
</arguments>
<assign>
<var>${fileHandler}</var>
</assign>
<msg timestamp="20190113 21:36:39.096" level="INFO">${fileHandler} = ['Release, Branch\n', 'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2\n', 'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-...</msg>
<status status="PASS" endtime="20190113 21:36:39.096" starttime="20190113 21:36:39.083"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the mapping file content : ${fileHandler}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.098" starttime="20190113 21:36:39.097"></status>
</kw>
<kw name="Convert To List" library="Collections">
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.099" starttime="20190113 21:36:39.099"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:36:39.102" level="INFO">${rowIndex} = 0</msg>
<status status="PASS" endtime="20190113 21:36:39.102" starttime="20190113 21:36:39.100"></status>
</kw>
<kw type="for" name="${rowitem} IN [ @{fileHandler} ]">
<kw type="foritem" name="${rowitem} = Release, Branch&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.105" starttime="20190113 21:36:39.104"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:36:39.109" level="FAIL">'Release, Branch
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:36:39.109" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:36:39.109" starttime="20190113 21:36:39.108"></status>
</kw>
<msg timestamp="20190113 21:36:39.110" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:36:39.110" starttime="20190113 21:36:39.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:36:39.111" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:36:39.111" starttime="20190113 21:36:39.110"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.113" starttime="20190113 21:36:39.112"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:36:39.114" level="INFO">${rowIndex} = 1</msg>
<status status="PASS" endtime="20190113 21:36:39.114" starttime="20190113 21:36:39.113"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:39.115" starttime="20190113 21:36:39.103"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.117" starttime="20190113 21:36:39.116"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:36:39.120" level="FAIL">'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:36:39.120" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:36:39.120" starttime="20190113 21:36:39.119"></status>
</kw>
<msg timestamp="20190113 21:36:39.120" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:36:39.120" starttime="20190113 21:36:39.117"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:36:39.122" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:36:39.122" starttime="20190113 21:36:39.121"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.123" starttime="20190113 21:36:39.122"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:36:39.125" level="INFO">${rowIndex} = 2</msg>
<status status="PASS" endtime="20190113 21:36:39.125" starttime="20190113 21:36:39.124"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:39.125" starttime="20190113 21:36:39.115"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.128" starttime="20190113 21:36:39.126"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:36:39.130" level="FAIL">'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:36:39.130" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:36:39.130" starttime="20190113 21:36:39.129"></status>
</kw>
<msg timestamp="20190113 21:36:39.131" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:36:39.131" starttime="20190113 21:36:39.128"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:36:39.132" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:36:39.133" starttime="20190113 21:36:39.132"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.134" starttime="20190113 21:36:39.133"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:36:39.136" level="INFO">${rowIndex} = 3</msg>
<status status="PASS" endtime="20190113 21:36:39.136" starttime="20190113 21:36:39.135"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:39.136" starttime="20190113 21:36:39.126"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.139" starttime="20190113 21:36:39.138"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:36:39.143" level="FAIL">'AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:36:39.143" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:36:39.143" starttime="20190113 21:36:39.141"></status>
</kw>
<msg timestamp="20190113 21:36:39.144" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:36:39.144" starttime="20190113 21:36:39.140"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:36:39.146" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:36:39.146" starttime="20190113 21:36:39.144"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.148" starttime="20190113 21:36:39.147"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:36:39.150" level="INFO">${rowIndex} = 4</msg>
<status status="PASS" endtime="20190113 21:36:39.150" starttime="20190113 21:36:39.149"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:39.150" starttime="20190113 21:36:39.137"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.153" starttime="20190113 21:36:39.152"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:36:39.156" level="FAIL">'AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:36:39.156" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:36:39.156" starttime="20190113 21:36:39.155"></status>
</kw>
<msg timestamp="20190113 21:36:39.156" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:36:39.157" starttime="20190113 21:36:39.153"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:36:39.163" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:36:39.164" starttime="20190113 21:36:39.159"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.166" starttime="20190113 21:36:39.165"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:36:39.169" level="INFO">${rowIndex} = 5</msg>
<status status="PASS" endtime="20190113 21:36:39.170" starttime="20190113 21:36:39.168"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:39.172" starttime="20190113 21:36:39.151"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_19_1, IB-AXOS-19.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.176" starttime="20190113 21:36:39.174"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.182" starttime="20190113 21:36:39.180"></status>
</kw>
<msg timestamp="20190113 21:36:39.194" level="INFO">${contain_build} = True</msg>
<status status="PASS" endtime="20190113 21:36:39.194" starttime="20190113 21:36:39.178"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:36:39.196" level="INFO">build IB-AXOS-19.1 search result is True</msg>
<status status="PASS" endtime="20190113 21:36:39.197" starttime="20190113 21:36:39.195"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:36:39.198" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20190113 21:36:39.198" starttime="20190113 21:36:39.197"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:39.206" starttime="20190113 21:36:39.172"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:39.206" starttime="20190113 21:36:39.103"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${contain_build}'!='True'</arg>
<arg>NONE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.209" starttime="20190113 21:36:39.207"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we find the release info in ${rowIndex} row</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.211" starttime="20190113 21:36:39.209"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<assign>
<var>${len}</var>
</assign>
<msg timestamp="20190113 21:36:39.213" level="INFO">Length is 6</msg>
<msg timestamp="20190113 21:36:39.215" level="INFO">${len} = 6</msg>
<status status="PASS" endtime="20190113 21:36:39.215" starttime="20190113 21:36:39.212"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>@{fileHandler}[${rowIndex}]</arg>
</arguments>
<assign>
<var>${releaseStr}</var>
</assign>
<msg timestamp="20190113 21:36:39.218" level="DEBUG">Argument types are:
&lt;type 'str'&gt;</msg>
<msg timestamp="20190113 21:36:39.218" level="INFO">${releaseStr} = AXOS_19_1, IB-AXOS-19.1
</msg>
<status status="PASS" endtime="20190113 21:36:39.218" starttime="20190113 21:36:39.217"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>release=${releaseStr}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.220" starttime="20190113 21:36:39.219"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${releaseStr}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>@{matches}</var>
</assign>
<msg timestamp="20190113 21:36:39.222" level="INFO">@{matches} = [ AXOS_19_1 |  IB-AXOS-19.1
 ]</msg>
<status status="PASS" endtime="20190113 21:36:39.222" starttime="20190113 21:36:39.221"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.224" starttime="20190113 21:36:39.223"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 21:36:39.226" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 21:36:39.227" starttime="20190113 21:36:39.225"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the release information: ${release}.</arg>
</arguments>
<msg timestamp="20190113 21:36:39.230" level="INFO">we've got the release information: AXOS_19_1.</msg>
<status status="PASS" endtime="20190113 21:36:39.231" starttime="20190113 21:36:39.228"></status>
</kw>
<msg timestamp="20190113 21:36:39.232" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 21:36:39.232" starttime="20190113 21:36:39.078"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'NONE'=='${release}'</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.234" starttime="20190113 21:36:39.233"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>release</arg>
<arg>${release}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.236" starttime="20190113 21:36:39.234"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s release is ${DEVICES.${eut}.release}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:39.239" starttime="20190113 21:36:39.237"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:39.240" starttime="20190113 21:36:37.442"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:39.244" starttime="20190113 21:36:37.442"></status>
</kw>
<status status="PASS" endtime="20190113 21:36:39.247" starttime="20190113 21:36:37.435"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:1 Provision ip address for craft 1 and login the device login successful</arg>
</arguments>
<msg timestamp="20190113 21:36:39.317" level="INFO">STEP:1 Provision ip address for craft 1 and login the device login successful</msg>
<status status="PASS" endtime="20190113 21:36:39.317" starttime="20190113 21:36:39.316"></status>
</kw>
<kw name="get_system_equipment_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get "show system-equipment" command information,</doc>
<arguments>
<arg>eutA</arg>
</arguments>
<assign>
<var>&amp;{dict_card_info}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show system-equipment</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:36:39.459" level="INFO">send session_command, cmd=show system-equipment, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:36:39.974" level="INFO">session_command result=show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<msg timestamp="20190113 21:36:39.975" level="INFO">${res} = show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<status status="PASS" endtime="20190113 21:36:39.975" starttime="20190113 21:36:39.452"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>active-controller\\s+"card\\s+(\\d/\\d)\\s+.*"</arg>
</arguments>
<assign>
<var>${match}</var>
<var>${active_card}</var>
</assign>
<msg timestamp="20190113 21:36:39.978" level="INFO">${match} = active-controller  "card 1/2 (this card)"</msg>
<msg timestamp="20190113 21:36:39.979" level="INFO">${active_card} = 1/2</msg>
<status status="PASS" endtime="20190113 21:36:39.979" starttime="20190113 21:36:39.977"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>standby-controller\\s+"card\\s+(\\d/\\d)\\s+.*"</arg>
</arguments>
<assign>
<var>${match}</var>
<var>${standby_card}</var>
</assign>
<msg timestamp="20190113 21:36:39.981" level="INFO">${match} = standby-controller "card 1/1 (mate card)"</msg>
<msg timestamp="20190113 21:36:39.981" level="INFO">${standby_card} = 1/1</msg>
<status status="PASS" endtime="20190113 21:36:39.981" starttime="20190113 21:36:39.980"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] get system-equipment active-controller ${active_card}, standby-controller ${standby_card}******</arg>
</arguments>
<msg timestamp="20190113 21:36:39.983" level="INFO">******[eutA] get system-equipment active-controller 1/2, standby-controller 1/1******</msg>
<status status="PASS" endtime="20190113 21:36:39.984" starttime="20190113 21:36:39.982"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>active=${active_card}</arg>
<arg>standby=${standby_card}</arg>
</arguments>
<assign>
<var>&amp;{dict_info}</var>
</assign>
<msg timestamp="20190113 21:36:39.986" level="INFO">&amp;{dict_info} = { active=1/2 | standby=1/1 }</msg>
<status status="PASS" endtime="20190113 21:36:39.986" starttime="20190113 21:36:39.984"></status>
</kw>
<msg timestamp="20190113 21:36:39.988" level="INFO">&amp;{dict_card_info} = { active=1/2 | standby=1/1 }</msg>
<status status="PASS" endtime="20190113 21:36:39.988" starttime="20190113 21:36:39.450"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${old_active_Card}</arg>
<arg>&amp;{dict_card_info}[active]</arg>
</arguments>
<msg timestamp="20190113 21:36:40.033" level="INFO">${old_active_Card} = 1/2</msg>
<status status="PASS" endtime="20190113 21:36:40.033" starttime="20190113 21:36:40.030"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${old_standby_Card}</arg>
<arg>&amp;{dict_card_info}[standby]</arg>
</arguments>
<msg timestamp="20190113 21:36:40.106" level="INFO">${old_standby_Card} = 1/1</msg>
<status status="PASS" endtime="20190113 21:36:40.106" starttime="20190113 21:36:40.104"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:2 reboot the system connection interrupt.</arg>
</arguments>
<msg timestamp="20190113 21:36:40.152" level="INFO">STEP:2 reboot the system connection interrupt.</msg>
<status status="PASS" endtime="20190113 21:36:40.153" starttime="20190113 21:36:40.151"></status>
</kw>
<kw name="reload" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: reload operation</doc>
<arguments>
<arg>eutA</arg>
</arguments>
<kw name="release_cmd_adapter" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: cmd adapter in different release</doc>
<arguments>
<arg>${device}</arg>
<arg>${prov_reload_cmd}</arg>
</arguments>
<assign>
<var>${reload_str}</var>
</assign>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>if no 'release' item in topo.yaml set it to DEFAULT</arg>
</arguments>
<msg timestamp="20190113 21:36:40.204" level="INFO">if no 'release' item in topo.yaml set it to DEFAULT</msg>
<status status="PASS" endtime="20190113 21:36:40.204" starttime="20190113 21:36:40.203"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${DEVICES.${device}}</arg>
<arg>release</arg>
</arguments>
<assign>
<var>${passed}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${device}}</arg>
<arg>release</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:40.207" starttime="20190113 21:36:40.206"></status>
</kw>
<msg timestamp="20190113 21:36:40.207" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20190113 21:36:40.207" starttime="20190113 21:36:40.205"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${passed}</arg>
<arg>${DEVICES.${device}.release}</arg>
<arg>DEFAULT</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 21:36:40.209" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 21:36:40.209" starttime="20190113 21:36:40.208"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>get release ${release}</arg>
</arguments>
<msg timestamp="20190113 21:36:40.211" level="INFO">get release AXOS_19_1</msg>
<status status="PASS" endtime="20190113 21:36:40.211" starttime="20190113 21:36:40.210"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>set release to 'DEFAULT' if release is not key in cmd_key dictionary</arg>
</arguments>
<msg timestamp="20190113 21:36:40.212" level="INFO">set release to 'DEFAULT' if release is not key in cmd_key dictionary</msg>
<status status="PASS" endtime="20190113 21:36:40.213" starttime="20190113 21:36:40.212"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${cmd_param}</arg>
<arg>${release}</arg>
</arguments>
<assign>
<var>${passed}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${cmd_param}</arg>
<arg>${release}</arg>
</arguments>
<msg timestamp="20190113 21:36:40.215" level="FAIL">Dictionary does not contain key 'AXOS_19_1'.</msg>
<msg timestamp="20190113 21:36:40.215" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:36:40.215" starttime="20190113 21:36:40.214"></status>
</kw>
<msg timestamp="20190113 21:36:40.216" level="INFO">${passed} = False</msg>
<status status="PASS" endtime="20190113 21:36:40.216" starttime="20190113 21:36:40.213"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${passed}</arg>
<arg>${release}</arg>
<arg>DEFAULT</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 21:36:40.218" level="INFO">${release} = DEFAULT</msg>
<status status="PASS" endtime="20190113 21:36:40.218" starttime="20190113 21:36:40.217"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${cmd_var_item}</arg>
</arguments>
<msg timestamp="20190113 21:36:40.220" level="INFO">List is empty.</msg>
<status status="PASS" endtime="20190113 21:36:40.220" starttime="20190113 21:36:40.219"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=','</arg>
<arg>@{cmd_var_item}</arg>
</arguments>
<assign>
<var>${item}</var>
</assign>
<msg timestamp="20190113 21:36:40.222" level="INFO">${item} = </msg>
<status status="PASS" endtime="20190113 21:36:40.223" starttime="20190113 21:36:40.221"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${cmd_param}</arg>
</arguments>
<msg timestamp="20190113 21:36:40.225" level="INFO">Dictionary size is 2 and it contains following items:
AXOS_3_1: 
DEFAULT: all</msg>
<status status="PASS" endtime="20190113 21:36:40.225" starttime="20190113 21:36:40.224"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${item}"=="${EMPTY}"</arg>
<arg>Set Variable</arg>
<arg>&amp;{cmd_param}[${release}]</arg>
<arg>ELSE</arg>
<arg>evaluate</arg>
<arg>'&amp;{cmd_param}[${release}]'%('${item}')</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>&amp;{cmd_param}[${release}]</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:40.229" starttime="20190113 21:36:40.228"></status>
</kw>
<msg timestamp="20190113 21:36:40.229" level="INFO">${cmd_str} = all</msg>
<status status="PASS" endtime="20190113 21:36:40.230" starttime="20190113 21:36:40.226"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>return string is "${cmd_str}" for release ${release}</arg>
</arguments>
<msg timestamp="20190113 21:36:40.232" level="INFO">return string is "all" for release DEFAULT</msg>
<status status="PASS" endtime="20190113 21:36:40.232" starttime="20190113 21:36:40.230"></status>
</kw>
<msg timestamp="20190113 21:36:40.233" level="INFO">${reload_str} = all</msg>
<status status="PASS" endtime="20190113 21:36:40.233" starttime="20190113 21:36:40.202"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>reload ${reload_str} ${option}</arg>
<arg>prompt=Proceed with reload\\? \\[y/N\\]</arg>
</arguments>
<msg timestamp="20190113 21:36:40.237" level="INFO">send session_command, cmd=reload all , prompt={u'Proceed with reload\\? \\[y/N\\]': None}, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:36:40.796" level="INFO">session_command result=reload all 
Warning! Reloading the device will impact services.
Running configuration has been changed
Use 'copy running-config startup-config' to save modified configuration
</msg>
<status status="PASS" endtime="20190113 21:36:40.796" starttime="20190113 21:36:40.234"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20190113 21:36:42.800" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190113 21:36:42.801" starttime="20190113 21:36:40.798"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>y</arg>
<arg>timeout=60</arg>
</arguments>
<msg timestamp="20190113 21:36:42.805" level="INFO">send session_command, cmd=y, prompt=None, timeout=60, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:36:45.097" level="INFO">session_command result=y
NGPON2X4</msg>
<status status="PASS" endtime="20190113 21:36:45.097" starttime="20190113 21:36:42.802"></status>
</kw>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:36:45.218" starttime="20190113 21:36:45.099"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
<arg>Wait for device disconnect</arg>
</arguments>
<msg timestamp="20190113 21:37:15.220" level="INFO">Slept 30 seconds</msg>
<msg timestamp="20190113 21:37:15.220" level="INFO">Wait for device disconnect</msg>
<status status="PASS" endtime="20190113 21:37:15.221" starttime="20190113 21:36:45.219"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>${retry_interval}</arg>
<arg>Run Keyword And Expect Error</arg>
<arg>*</arg>
<arg>Cli</arg>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>*</arg>
<arg>Cli</arg>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<msg timestamp="20190113 21:37:15.226" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:37:22.653" level="FAIL">SSHLoginException</msg>
<msg timestamp="20190113 21:37:22.653" level="DEBUG">Traceback (most recent call last):
  File "/etc/barista/packages/caferobot/command/adapter.py", line 210, in run_keyword
    return self._keywords_adapter_map[name].run_keyword(name, args, kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 83, in run_keyword
    return self._KEYWORDS_WRAPPERS[name](*args, **kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 140, in _wrap_cli
    result = device.session_command(cmd, p, timeout, newline, retry, int(timeout_exception), exclude_prompt)
  File "/etc/barista/packages/caferobot/command/device/shell.py", line 82, in session_command
    raise e</msg>
<status status="FAIL" endtime="20190113 21:37:22.654" starttime="20190113 21:37:15.225"></status>
</kw>
<status status="PASS" endtime="20190113 21:37:22.655" starttime="20190113 21:37:15.224"></status>
</kw>
<status status="PASS" endtime="20190113 21:37:22.657" starttime="20190113 21:37:15.222"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
<arg>Wait for reload ${reload_str} ${option} finish</arg>
</arguments>
<msg timestamp="20190113 21:37:52.660" level="INFO">Slept 30 seconds</msg>
<msg timestamp="20190113 21:37:52.661" level="INFO">Wait for reload all  finish</msg>
<status status="PASS" endtime="20190113 21:37:52.661" starttime="20190113 21:37:22.658"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>${retry_interval}</arg>
<arg>Verify Cmd Working After Reload</arg>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<kw name="Verify Cmd Working After Reload" library="keyword_common">
<tags>
<tag>@author=chxu</tag>
</tags>
<doc>Verify OLT Image Version matches today's date</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>disconnect</arg>
<arg>${device}</arg>
</arguments>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:37:52.710" starttime="20190113 21:37:52.708"></status>
</kw>
<status status="PASS" endtime="20190113 21:37:52.710" starttime="20190113 21:37:52.707"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:37:52.720" level="INFO">send session_command, cmd=show version, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:38:16.810" level="FAIL">SSHLoginException</msg>
<msg timestamp="20190113 21:38:16.810" level="DEBUG">Traceback (most recent call last):
  File "/etc/barista/packages/caferobot/command/adapter.py", line 210, in run_keyword
    return self._keywords_adapter_map[name].run_keyword(name, args, kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 83, in run_keyword
    return self._KEYWORDS_WRAPPERS[name](*args, **kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 140, in _wrap_cli
    result = device.session_command(cmd, p, timeout, newline, retry, int(timeout_exception), exclude_prompt)
  File "/etc/barista/packages/caferobot/command/device/shell.py", line 82, in session_command
    raise e</msg>
<status status="FAIL" endtime="20190113 21:38:16.810" starttime="20190113 21:37:52.712"></status>
</kw>
<status status="FAIL" endtime="20190113 21:38:16.811" starttime="20190113 21:37:52.711"></status>
</kw>
<status status="FAIL" endtime="20190113 21:38:16.812" starttime="20190113 21:37:52.706"></status>
</kw>
<kw name="Verify Cmd Working After Reload" library="keyword_common">
<tags>
<tag>@author=chxu</tag>
</tags>
<doc>Verify OLT Image Version matches today's date</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>disconnect</arg>
<arg>${device}</arg>
</arguments>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:38:46.836" starttime="20190113 21:38:46.828"></status>
</kw>
<status status="PASS" endtime="20190113 21:38:46.836" starttime="20190113 21:38:46.827"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:38:46.845" level="INFO">send session_command, cmd=show version, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:39:10.922" level="FAIL">SSHLoginException</msg>
<msg timestamp="20190113 21:39:10.923" level="DEBUG">Traceback (most recent call last):
  File "/etc/barista/packages/caferobot/command/adapter.py", line 210, in run_keyword
    return self._keywords_adapter_map[name].run_keyword(name, args, kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 83, in run_keyword
    return self._KEYWORDS_WRAPPERS[name](*args, **kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 140, in _wrap_cli
    result = device.session_command(cmd, p, timeout, newline, retry, int(timeout_exception), exclude_prompt)
  File "/etc/barista/packages/caferobot/command/device/shell.py", line 82, in session_command
    raise e</msg>
<status status="FAIL" endtime="20190113 21:39:10.923" starttime="20190113 21:38:46.839"></status>
</kw>
<status status="FAIL" endtime="20190113 21:39:10.924" starttime="20190113 21:38:46.837"></status>
</kw>
<status status="FAIL" endtime="20190113 21:39:10.924" starttime="20190113 21:38:46.816"></status>
</kw>
<kw name="Verify Cmd Working After Reload" library="keyword_common">
<tags>
<tag>@author=chxu</tag>
</tags>
<doc>Verify OLT Image Version matches today's date</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>disconnect</arg>
<arg>${device}</arg>
</arguments>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:39:40.931" starttime="20190113 21:39:40.929"></status>
</kw>
<status status="PASS" endtime="20190113 21:39:40.932" starttime="20190113 21:39:40.928"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:39:40.937" level="INFO">send session_command, cmd=show version, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:40:04.989" level="FAIL">SSHLoginException</msg>
<msg timestamp="20190113 21:40:04.989" level="DEBUG">Traceback (most recent call last):
  File "/etc/barista/packages/caferobot/command/adapter.py", line 210, in run_keyword
    return self._keywords_adapter_map[name].run_keyword(name, args, kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 83, in run_keyword
    return self._KEYWORDS_WRAPPERS[name](*args, **kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 140, in _wrap_cli
    result = device.session_command(cmd, p, timeout, newline, retry, int(timeout_exception), exclude_prompt)
  File "/etc/barista/packages/caferobot/command/device/shell.py", line 82, in session_command
    raise e</msg>
<status status="FAIL" endtime="20190113 21:40:04.990" starttime="20190113 21:39:40.934"></status>
</kw>
<status status="FAIL" endtime="20190113 21:40:04.990" starttime="20190113 21:39:40.932"></status>
</kw>
<status status="FAIL" endtime="20190113 21:40:04.991" starttime="20190113 21:39:40.925"></status>
</kw>
<kw name="Verify Cmd Working After Reload" library="keyword_common">
<tags>
<tag>@author=chxu</tag>
</tags>
<doc>Verify OLT Image Version matches today's date</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>disconnect</arg>
<arg>${device}</arg>
</arguments>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:40:35.002" starttime="20190113 21:40:34.998"></status>
</kw>
<status status="PASS" endtime="20190113 21:40:35.003" starttime="20190113 21:40:34.996"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:40:35.011" level="INFO">send session_command, cmd=show version, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:40:59.056" level="FAIL">SSHLoginException</msg>
<msg timestamp="20190113 21:40:59.056" level="DEBUG">Traceback (most recent call last):
  File "/etc/barista/packages/caferobot/command/adapter.py", line 210, in run_keyword
    return self._keywords_adapter_map[name].run_keyword(name, args, kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 83, in run_keyword
    return self._KEYWORDS_WRAPPERS[name](*args, **kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 140, in _wrap_cli
    result = device.session_command(cmd, p, timeout, newline, retry, int(timeout_exception), exclude_prompt)
  File "/etc/barista/packages/caferobot/command/device/shell.py", line 82, in session_command
    raise e</msg>
<status status="FAIL" endtime="20190113 21:40:59.056" starttime="20190113 21:40:35.008"></status>
</kw>
<status status="FAIL" endtime="20190113 21:40:59.057" starttime="20190113 21:40:35.005"></status>
</kw>
<status status="FAIL" endtime="20190113 21:40:59.058" starttime="20190113 21:40:34.992"></status>
</kw>
<kw name="Verify Cmd Working After Reload" library="keyword_common">
<tags>
<tag>@author=chxu</tag>
</tags>
<doc>Verify OLT Image Version matches today's date</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>disconnect</arg>
<arg>${device}</arg>
</arguments>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:41:29.066" starttime="20190113 21:41:29.064"></status>
</kw>
<status status="PASS" endtime="20190113 21:41:29.066" starttime="20190113 21:41:29.063"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:41:29.072" level="INFO">send session_command, cmd=show version, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:41:34.709" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 21:41:34.709" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 21:41:34.709" starttime="20190113 21:41:29.069"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 21:41:34.713" starttime="20190113 21:41:34.712"></status>
</kw>
<msg timestamp="20190113 21:41:34.714" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 21:41:34.715" starttime="20190113 21:41:29.067"></status>
</kw>
<kw name="Result Should Not Contain" library="caferobot.result.result.ResultAdapter">
<doc>Fails if ``latest response from CLI`` does contain ``exp``..</doc>
<arguments>
<arg>started: lmd</arg>
</arguments>
<status status="PASS" endtime="20190113 21:41:34.720" starttime="20190113 21:41:34.719"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>\\w+\-\\w+\-\\d+</arg>
</arguments>
<status status="PASS" endtime="20190113 21:41:34.722" starttime="20190113 21:41:34.721"></status>
</kw>
<status status="PASS" endtime="20190113 21:41:34.723" starttime="20190113 21:41:29.060"></status>
</kw>
<status status="PASS" endtime="20190113 21:41:34.724" starttime="20190113 21:37:52.662"></status>
</kw>
<status status="PASS" endtime="20190113 21:41:34.725" starttime="20190113 21:36:40.198"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:3 wait for the system ready connection can work again</arg>
</arguments>
<msg timestamp="20190113 21:41:34.811" level="INFO">STEP:3 wait for the system ready connection can work again</msg>
<status status="PASS" endtime="20190113 21:41:34.812" starttime="20190113 21:41:34.810"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>10s</arg>
<arg>check_card_info</arg>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:41:34.883" level="INFO">******[eutA] check card 1/2 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:41:34.883" starttime="20190113 21:41:34.882"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:41:34.894" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:41:35.524" level="INFO">session_command result=show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Active)  NGPON2-4  211709602412  N/A       

      PROVISION  CARD                                                              SOFTWARE  
CARD  TYPE       STATE   CARD TYPE                          MODEL    SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------
1/2   None       Online  Controller 14 10G ports (Standby)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:41:35.525" level="INFO">${res} = show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     S...</msg>
<status status="PASS" endtime="20190113 21:41:35.525" starttime="20190113 21:41:34.885"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:41:35.528" level="INFO">${pattern} = (?i)1/2\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:41:35.529" starttime="20190113 21:41:35.527"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:41:35.532" level="FAIL">'show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Active)  NGPON2-4  211709602412  N/A       

      PROVISION  CARD                                                              SOFTWARE  
CARD  TYPE       STATE   CARD TYPE                          MODEL    SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------
1/2   None       Online  Controller 14 10G ports (Standby)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/2\s+.*In Service\s+.*'</msg>
<msg timestamp="20190113 21:41:35.532" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:41:35.532" starttime="20190113 21:41:35.531"></status>
</kw>
<status status="FAIL" endtime="20190113 21:41:35.533" starttime="20190113 21:41:35.529"></status>
</kw>
<status status="FAIL" endtime="20190113 21:41:35.533" starttime="20190113 21:41:34.880"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:41:45.539" level="INFO">******[eutA] check card 1/2 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:41:45.539" starttime="20190113 21:41:45.538"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:41:45.549" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:41:48.117" level="INFO">session_command result=show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Active)  NGPON2-4  211709602412  N/A       

      PROVISION  CARD                                                              SOFTWARE  
CARD  TYPE       STATE   CARD TYPE                          MODEL    SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------
1/2   10GE-12    Online  Controller 14 10G ports (Standby)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:41:48.117" level="INFO">${res} = show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     S...</msg>
<status status="PASS" endtime="20190113 21:41:48.117" starttime="20190113 21:41:45.539"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:41:48.122" level="INFO">${pattern} = (?i)1/2\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:41:48.122" starttime="20190113 21:41:48.120"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:41:48.125" level="FAIL">'show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Active)  NGPON2-4  211709602412  N/A       

      PROVISION  CARD                                                              SOFTWARE  
CARD  TYPE       STATE   CARD TYPE                          MODEL    SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------
1/2   10GE-12    Online  Controller 14 10G ports (Standby)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/2\s+.*In Service\s+.*'</msg>
<msg timestamp="20190113 21:41:48.125" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:41:48.125" starttime="20190113 21:41:48.124"></status>
</kw>
<status status="FAIL" endtime="20190113 21:41:48.125" starttime="20190113 21:41:48.122"></status>
</kw>
<status status="FAIL" endtime="20190113 21:41:48.126" starttime="20190113 21:41:45.535"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:41:58.133" level="INFO">******[eutA] check card 1/2 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:41:58.133" starttime="20190113 21:41:58.132"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:41:58.137" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:41:58.785" level="INFO">session_command result=show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Active)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                        SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                          MODEL    SERIAL NO     VERSION   
-------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Standby)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:41:58.786" level="INFO">${res} = show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     S...</msg>
<status status="PASS" endtime="20190113 21:41:58.786" starttime="20190113 21:41:58.134"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:41:58.789" level="INFO">${pattern} = (?i)1/2\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:41:58.789" starttime="20190113 21:41:58.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:41:58.793" starttime="20190113 21:41:58.792"></status>
</kw>
<status status="PASS" endtime="20190113 21:41:58.794" starttime="20190113 21:41:58.790"></status>
</kw>
<status status="PASS" endtime="20190113 21:41:58.795" starttime="20190113 21:41:58.129"></status>
</kw>
<status status="PASS" endtime="20190113 21:41:58.797" starttime="20190113 21:41:34.878"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>10s</arg>
<arg>check_card_info</arg>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:41:58.895" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:41:58.896" starttime="20190113 21:41:58.894"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:41:58.909" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:41:59.518" level="INFO">session_command result=show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Active)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                        SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                          MODEL    SERIAL NO     VERSION   
-------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Standby)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:41:59.519" level="INFO">${res} = show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     S...</msg>
<status status="PASS" endtime="20190113 21:41:59.519" starttime="20190113 21:41:58.897"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:41:59.522" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:41:59.522" starttime="20190113 21:41:59.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:41:59.525" starttime="20190113 21:41:59.524"></status>
</kw>
<status status="PASS" endtime="20190113 21:41:59.526" starttime="20190113 21:41:59.523"></status>
</kw>
<status status="PASS" endtime="20190113 21:41:59.526" starttime="20190113 21:41:58.892"></status>
</kw>
<status status="PASS" endtime="20190113 21:41:59.528" starttime="20190113 21:41:58.890"></status>
</kw>
<kw type="teardown" name="case teardown">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait until eutA in service</arg>
</arguments>
<msg timestamp="20190113 21:41:59.594" level="INFO">wait until eutA in service</msg>
<status status="PASS" endtime="20190113 21:41:59.594" starttime="20190113 21:41:59.593"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>${retry_interval}</arg>
<arg>Verify Cmd Working After Reload</arg>
<arg>eutA</arg>
<arg>show version</arg>
</arguments>
<kw name="Verify Cmd Working After Reload" library="keyword_common">
<tags>
<tag>@author=chxu</tag>
</tags>
<doc>Verify OLT Image Version matches today's date</doc>
<arguments>
<arg>eutA</arg>
<arg>show version</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>disconnect</arg>
<arg>${device}</arg>
</arguments>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:41:59.729" starttime="20190113 21:41:59.598"></status>
</kw>
<status status="PASS" endtime="20190113 21:41:59.730" starttime="20190113 21:41:59.597"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:41:59.736" level="INFO">send session_command, cmd=show version, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:42:04.315" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 21:42:04.316" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 21:42:04.316" starttime="20190113 21:41:59.733"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:04.320" starttime="20190113 21:42:04.318"></status>
</kw>
<msg timestamp="20190113 21:42:04.320" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 21:42:04.321" starttime="20190113 21:41:59.731"></status>
</kw>
<kw name="Result Should Not Contain" library="caferobot.result.result.ResultAdapter">
<doc>Fails if ``latest response from CLI`` does contain ``exp``..</doc>
<arguments>
<arg>started: lmd</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:04.323" starttime="20190113 21:42:04.322"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>\\w+\-\\w+\-\\d+</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:04.325" starttime="20190113 21:42:04.324"></status>
</kw>
<status status="PASS" endtime="20190113 21:42:04.325" starttime="20190113 21:41:59.596"></status>
</kw>
<status status="PASS" endtime="20190113 21:42:04.327" starttime="20190113 21:41:59.595"></status>
</kw>
<status status="PASS" endtime="20190113 21:42:04.328" starttime="20190113 21:41:59.592"></status>
</kw>
<doc>1 Provision ip address for craft 1 and login the device login successful
2 reboot the system connection interrupt.
3 wait for the system ready connection can work again</doc>
<tags>
<tag>@author=Min Gu</tag>
<tag>@eut=10GE-12</tag>
<tag>@eut=DualCard</tag>
<tag>@eut=GPON-8r2</tag>
<tag>@feature=Management</tag>
<tag>@globalid=2509260</tag>
<tag>@priority=P2</tag>
<tag>@require=1eut</tag>
<tag>@subFeature=Local Craft Interface Support</tag>
<tag>@tcid=AXOS_E72_PARENT-TC-3750</tag>
<tag>@user_interface=CLI</tag>
</tags>
<status status="PASS" endtime="20190113 21:42:04.391" critical="yes" starttime="20190113 21:36:37.289"></status>
</test>
<status status="PASS" endtime="20190113 21:42:04.646" starttime="20190113 21:36:37.052"></status>
</suite>
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/System/Management/Local_Craft_Interface_Support/test_cases/tc_Verify_craft_connection_after_switchover_through_CLI_dualcard.robot" id="s1-s1-s1-s1-s1-s1-s1-s1-s3" name="tc Verify craft connection after switchover through CLI dualcard">
<test id="s1-s1-s1-s1-s1-s1-s1-s1-s3-t1" name="tc_Verify_craft_connection_after_switchover_through_CLI_dualcard">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>set eut version and release</arg>
</arguments>
<msg timestamp="20190113 21:42:05.080" level="INFO">set eut version and release</msg>
<status status="PASS" endtime="20190113 21:42:05.081" starttime="20190113 21:42:05.079"></status>
</kw>
<kw name="set_eut_version" library="release_adapter">
<doc>set EUT build and release attribution</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>If device is not specified, get it from topo.yaml ${DEVICES} list</arg>
</arguments>
<msg timestamp="20190113 21:42:05.140" level="INFO">If device is not specified, get it from topo.yaml &lt;cafe.core.utils.Param object at 0x7f69a6895d50&gt; list</msg>
<status status="PASS" endtime="20190113 21:42:05.140" starttime="20190113 21:42:05.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${device}'</arg>
<arg>Create List</arg>
<arg>${device}</arg>
<arg>ELSE</arg>
<arg>get dictionary keys</arg>
<arg>${DEVICES}</arg>
</arguments>
<assign>
<var>${keys}</var>
</assign>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${DEVICES}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:05.143" starttime="20190113 21:42:05.142"></status>
</kw>
<msg timestamp="20190113 21:42:05.144" level="INFO">${keys} = ['eutA']</msg>
<status status="PASS" endtime="20190113 21:42:05.144" starttime="20190113 21:42:05.141"></status>
</kw>
<kw type="for" name="${eut} IN [ @{keys} ]">
<kw type="foritem" name="${eut} = eutA">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current eut is ${eut}, type is ${DEVICES.${eut}.type}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:05.159" starttime="20190113 21:42:05.147"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${DEVICES.${eut}.type}'!='AXOS'</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:05.162" starttime="20190113 21:42:05.160"></status>
</kw>
<kw name="get_eut_version" library="release_adapter">
<tags>
<tag>@author=llin</tag>
</tags>
<doc>this is the keyword used to get single device's build information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>cli</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:42:05.168" level="INFO">send session_command, cmd=cli, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:42:05.738" level="INFO">session_command result=cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG state persistence control commands
  clear                 - Clear object data
  clock                 - Modify clock
  configure             - Manipulate software configuration information
  copy                  - Copy files
  cpe-upgrade:cpe       - CPE operation
  debug                 - 
  delete                - Delete files
  devtools              - Enable/disable development tools
  download              - Download files
  enable                - Enable EXEC commands
  exit                  - Exit the management session
  folder                - 
  generate              - Generate files
  idle-timeout          - Configure idle timeout
  install               - 
  lock                  - lock a datastore
  logout                - Logout a user
  manual                - Manual operation with alarms
  no                    - Negate a command or set its defaults
  ofa-connect           - Open Flow Connect
  ofa-listener          - Open Flow Listener
  ofa-port              - Open Flow port
  ont-eth               - ONT-ETH efm-loopback-status mode
  ont-firmware-upgrade  - Start software download
  ont-simulation        - ONT simulation commands
  ont-upgrade           - ONT upgrade commands
  paginate              - Paginate output from CLI commands
  perform               - Perform an operation
  ping                  - Ping IP address
  ping6                 - Ping IPv6 address
  quit                  - Exit the management session
  redundancy            - redundancy switchover commands
  reload                - Reboot the current card
  remove-dynamic-policy - 
  replay                - Replay card-config
  restart               - Restart Diameter daemon
  run                   - 
  send                  - Send message to terminal of one or all users
  session               - 
  show                  - Show information about the system
  ssh                   - ssh command
  start                 - Start an operation
  stop                  - Stop an operation
  switch                - Switch network clock
  tcpdump               - tcpdump command
  telnet                - telnet command
  templatize            - Find patterns in subtree.
  terminal              - Set terminal type
  timestamp             - Enable/disable the display of timestamp
  traceroute            - Traceroute IP address
  uninstall             - 
  unlock                - unlock a datastore
  upgrade               - Upgrade commands
  upload                - Upload files
  verify                - 
NGPON2X4</msg>
<msg timestamp="20190113 21:42:05.739" level="INFO">${res} = cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG s...</msg>
<status status="PASS" endtime="20190113 21:42:05.739" starttime="20190113 21:42:05.164"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:42:05.742" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:42:06.278" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 21:42:06.279" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 21:42:06.279" starttime="20190113 21:42:05.740"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>(description|details)\\s*(.*)\r</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 21:42:06.282" level="INFO">${matches} = ['IBAXOS191-CI-330', 'IBAXOS191-CI-330']</msg>
<status status="PASS" endtime="20190113 21:42:06.282" starttime="20190113 21:42:06.281"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:06.284" starttime="20190113 21:42:06.283"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 21:42:06.286" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 21:42:06.286" starttime="20190113 21:42:06.285"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${build}</arg>
</arguments>
<msg timestamp="20190113 21:42:06.288" level="INFO">we've got the build informations : IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 21:42:06.288" starttime="20190113 21:42:06.287"></status>
</kw>
<msg timestamp="20190113 21:42:06.288" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 21:42:06.289" starttime="20190113 21:42:05.163"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>build</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:06.293" starttime="20190113 21:42:06.292"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s build is ${DEVICES.${eut}.build}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:06.295" starttime="20190113 21:42:06.294"></status>
</kw>
<kw name="get_eut_distro" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to get single device's distro information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:42:06.299" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:42:06.990" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 21:42:06.991" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 21:42:06.991" starttime="20190113 21:42:06.297"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>distro\\s*"(.*)"\r</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 21:42:06.995" level="INFO">${matches} = ['IB-AXOS-19.1 2019.01.12 02:16:30', 'IB-AXOS-19.1 2019.01.12 02:16:30']</msg>
<status status="PASS" endtime="20190113 21:42:06.996" starttime="20190113 21:42:06.993"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:06.998" starttime="20190113 21:42:06.996"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<msg timestamp="20190113 21:42:07.000" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 21:42:07.000" starttime="20190113 21:42:06.998"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${distro}</arg>
</arguments>
<msg timestamp="20190113 21:42:07.002" level="INFO">we've got the build informations : IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 21:42:07.002" starttime="20190113 21:42:07.001"></status>
</kw>
<msg timestamp="20190113 21:42:07.003" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 21:42:07.003" starttime="20190113 21:42:06.296"></status>
</kw>
<kw name="mapping_distro_to_release" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to mapping build id to release name</doc>
<arguments>
<arg>${distro}</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${distro}</arg>
<arg>\\s+.*$</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 21:42:07.009" level="INFO">${build} = IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 21:42:07.010" starttime="20190113 21:42:07.008"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the branch of the build is : ${build}</arg>
</arguments>
<msg timestamp="20190113 21:42:07.011" level="INFO">the branch of the build is : IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 21:42:07.011" starttime="20190113 21:42:07.010"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>open('${map}').readlines()</arg>
</arguments>
<assign>
<var>${fileHandler}</var>
</assign>
<msg timestamp="20190113 21:42:07.015" level="INFO">${fileHandler} = ['Release, Branch\n', 'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2\n', 'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-...</msg>
<status status="PASS" endtime="20190113 21:42:07.016" starttime="20190113 21:42:07.012"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the mapping file content : ${fileHandler}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.017" starttime="20190113 21:42:07.016"></status>
</kw>
<kw name="Convert To List" library="Collections">
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.019" starttime="20190113 21:42:07.018"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:42:07.021" level="INFO">${rowIndex} = 0</msg>
<status status="PASS" endtime="20190113 21:42:07.021" starttime="20190113 21:42:07.020"></status>
</kw>
<kw type="for" name="${rowitem} IN [ @{fileHandler} ]">
<kw type="foritem" name="${rowitem} = Release, Branch&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.026" starttime="20190113 21:42:07.024"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:42:07.029" level="FAIL">'Release, Branch
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:42:07.029" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:42:07.029" starttime="20190113 21:42:07.028"></status>
</kw>
<msg timestamp="20190113 21:42:07.029" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:42:07.030" starttime="20190113 21:42:07.026"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:42:07.031" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:42:07.031" starttime="20190113 21:42:07.030"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.033" starttime="20190113 21:42:07.032"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:42:07.035" level="INFO">${rowIndex} = 1</msg>
<status status="PASS" endtime="20190113 21:42:07.036" starttime="20190113 21:42:07.034"></status>
</kw>
<status status="PASS" endtime="20190113 21:42:07.036" starttime="20190113 21:42:07.022"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.039" starttime="20190113 21:42:07.038"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:42:07.042" level="FAIL">'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:42:07.042" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:42:07.042" starttime="20190113 21:42:07.041"></status>
</kw>
<msg timestamp="20190113 21:42:07.042" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:42:07.043" starttime="20190113 21:42:07.039"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:42:07.044" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:42:07.045" starttime="20190113 21:42:07.043"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.046" starttime="20190113 21:42:07.045"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:42:07.049" level="INFO">${rowIndex} = 2</msg>
<status status="PASS" endtime="20190113 21:42:07.049" starttime="20190113 21:42:07.048"></status>
</kw>
<status status="PASS" endtime="20190113 21:42:07.050" starttime="20190113 21:42:07.036"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.052" starttime="20190113 21:42:07.051"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:42:07.055" level="FAIL">'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:42:07.055" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:42:07.055" starttime="20190113 21:42:07.054"></status>
</kw>
<msg timestamp="20190113 21:42:07.056" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:42:07.056" starttime="20190113 21:42:07.053"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:42:07.058" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:42:07.059" starttime="20190113 21:42:07.057"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.060" starttime="20190113 21:42:07.059"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:42:07.062" level="INFO">${rowIndex} = 3</msg>
<status status="PASS" endtime="20190113 21:42:07.062" starttime="20190113 21:42:07.061"></status>
</kw>
<status status="PASS" endtime="20190113 21:42:07.062" starttime="20190113 21:42:07.050"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.065" starttime="20190113 21:42:07.064"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:42:07.067" level="FAIL">'AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:42:07.068" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:42:07.068" starttime="20190113 21:42:07.066"></status>
</kw>
<msg timestamp="20190113 21:42:07.069" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:42:07.069" starttime="20190113 21:42:07.065"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:42:07.070" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:42:07.071" starttime="20190113 21:42:07.069"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.072" starttime="20190113 21:42:07.071"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:42:07.073" level="INFO">${rowIndex} = 4</msg>
<status status="PASS" endtime="20190113 21:42:07.074" starttime="20190113 21:42:07.073"></status>
</kw>
<status status="PASS" endtime="20190113 21:42:07.074" starttime="20190113 21:42:07.063"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.076" starttime="20190113 21:42:07.075"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:42:07.080" level="FAIL">'AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:42:07.080" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:42:07.080" starttime="20190113 21:42:07.078"></status>
</kw>
<msg timestamp="20190113 21:42:07.081" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:42:07.081" starttime="20190113 21:42:07.077"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:42:07.083" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:42:07.083" starttime="20190113 21:42:07.082"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.085" starttime="20190113 21:42:07.084"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:42:07.087" level="INFO">${rowIndex} = 5</msg>
<status status="PASS" endtime="20190113 21:42:07.087" starttime="20190113 21:42:07.086"></status>
</kw>
<status status="PASS" endtime="20190113 21:42:07.088" starttime="20190113 21:42:07.074"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_19_1, IB-AXOS-19.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.091" starttime="20190113 21:42:07.089"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.094" starttime="20190113 21:42:07.093"></status>
</kw>
<msg timestamp="20190113 21:42:07.095" level="INFO">${contain_build} = True</msg>
<status status="PASS" endtime="20190113 21:42:07.095" starttime="20190113 21:42:07.092"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:42:07.096" level="INFO">build IB-AXOS-19.1 search result is True</msg>
<status status="PASS" endtime="20190113 21:42:07.097" starttime="20190113 21:42:07.095"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:42:07.098" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20190113 21:42:07.099" starttime="20190113 21:42:07.097"></status>
</kw>
<status status="PASS" endtime="20190113 21:42:07.099" starttime="20190113 21:42:07.088"></status>
</kw>
<status status="PASS" endtime="20190113 21:42:07.099" starttime="20190113 21:42:07.021"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${contain_build}'!='True'</arg>
<arg>NONE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.102" starttime="20190113 21:42:07.100"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we find the release info in ${rowIndex} row</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.104" starttime="20190113 21:42:07.103"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<assign>
<var>${len}</var>
</assign>
<msg timestamp="20190113 21:42:07.105" level="INFO">Length is 6</msg>
<msg timestamp="20190113 21:42:07.106" level="INFO">${len} = 6</msg>
<status status="PASS" endtime="20190113 21:42:07.106" starttime="20190113 21:42:07.104"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>@{fileHandler}[${rowIndex}]</arg>
</arguments>
<assign>
<var>${releaseStr}</var>
</assign>
<msg timestamp="20190113 21:42:07.107" level="DEBUG">Argument types are:
&lt;type 'str'&gt;</msg>
<msg timestamp="20190113 21:42:07.108" level="INFO">${releaseStr} = AXOS_19_1, IB-AXOS-19.1
</msg>
<status status="PASS" endtime="20190113 21:42:07.108" starttime="20190113 21:42:07.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>release=${releaseStr}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.109" starttime="20190113 21:42:07.108"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${releaseStr}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>@{matches}</var>
</assign>
<msg timestamp="20190113 21:42:07.111" level="INFO">@{matches} = [ AXOS_19_1 |  IB-AXOS-19.1
 ]</msg>
<status status="PASS" endtime="20190113 21:42:07.111" starttime="20190113 21:42:07.110"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.114" starttime="20190113 21:42:07.112"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 21:42:07.115" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 21:42:07.115" starttime="20190113 21:42:07.114"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the release information: ${release}.</arg>
</arguments>
<msg timestamp="20190113 21:42:07.117" level="INFO">we've got the release information: AXOS_19_1.</msg>
<status status="PASS" endtime="20190113 21:42:07.117" starttime="20190113 21:42:07.116"></status>
</kw>
<msg timestamp="20190113 21:42:07.118" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 21:42:07.118" starttime="20190113 21:42:07.006"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'NONE'=='${release}'</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.119" starttime="20190113 21:42:07.118"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>release</arg>
<arg>${release}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.121" starttime="20190113 21:42:07.120"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s release is ${DEVICES.${eut}.release}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:07.124" starttime="20190113 21:42:07.122"></status>
</kw>
<status status="PASS" endtime="20190113 21:42:07.124" starttime="20190113 21:42:05.146"></status>
</kw>
<status status="PASS" endtime="20190113 21:42:07.125" starttime="20190113 21:42:05.145"></status>
</kw>
<status status="PASS" endtime="20190113 21:42:07.137" starttime="20190113 21:42:05.138"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:1 Provision ip address for craft 1 and login the device login successful</arg>
</arguments>
<msg timestamp="20190113 21:42:07.166" level="INFO">STEP:1 Provision ip address for craft 1 and login the device login successful</msg>
<status status="PASS" endtime="20190113 21:42:07.167" starttime="20190113 21:42:07.165"></status>
</kw>
<kw name="get_system_equipment_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get "show system-equipment" command information,</doc>
<arguments>
<arg>eutA</arg>
</arguments>
<assign>
<var>&amp;{dict_card_info}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show system-equipment</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:42:07.232" level="INFO">send session_command, cmd=show system-equipment, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:42:07.777" level="INFO">session_command result=show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/1 (this card)"
 standby-controller "card 1/2 (mate card)"
NGPON2X4</msg>
<msg timestamp="20190113 21:42:07.778" level="INFO">${res} = show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/1 (this card)"
 standby-controller "card 1/2 (mate card)"
NGPON2X4</msg>
<status status="PASS" endtime="20190113 21:42:07.778" starttime="20190113 21:42:07.228"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>active-controller\\s+"card\\s+(\\d/\\d)\\s+.*"</arg>
</arguments>
<assign>
<var>${match}</var>
<var>${active_card}</var>
</assign>
<msg timestamp="20190113 21:42:07.782" level="INFO">${match} = active-controller  "card 1/1 (this card)"</msg>
<msg timestamp="20190113 21:42:07.782" level="INFO">${active_card} = 1/1</msg>
<status status="PASS" endtime="20190113 21:42:07.783" starttime="20190113 21:42:07.780"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>standby-controller\\s+"card\\s+(\\d/\\d)\\s+.*"</arg>
</arguments>
<assign>
<var>${match}</var>
<var>${standby_card}</var>
</assign>
<msg timestamp="20190113 21:42:07.784" level="INFO">${match} = standby-controller "card 1/2 (mate card)"</msg>
<msg timestamp="20190113 21:42:07.784" level="INFO">${standby_card} = 1/2</msg>
<status status="PASS" endtime="20190113 21:42:07.784" starttime="20190113 21:42:07.783"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] get system-equipment active-controller ${active_card}, standby-controller ${standby_card}******</arg>
</arguments>
<msg timestamp="20190113 21:42:07.786" level="INFO">******[eutA] get system-equipment active-controller 1/1, standby-controller 1/2******</msg>
<status status="PASS" endtime="20190113 21:42:07.786" starttime="20190113 21:42:07.785"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>active=${active_card}</arg>
<arg>standby=${standby_card}</arg>
</arguments>
<assign>
<var>&amp;{dict_info}</var>
</assign>
<msg timestamp="20190113 21:42:07.788" level="INFO">&amp;{dict_info} = { active=1/1 | standby=1/2 }</msg>
<status status="PASS" endtime="20190113 21:42:07.788" starttime="20190113 21:42:07.787"></status>
</kw>
<msg timestamp="20190113 21:42:07.789" level="INFO">&amp;{dict_card_info} = { active=1/1 | standby=1/2 }</msg>
<status status="PASS" endtime="20190113 21:42:07.789" starttime="20190113 21:42:07.227"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${old_active_Card}</arg>
<arg>&amp;{dict_card_info}[active]</arg>
</arguments>
<msg timestamp="20190113 21:42:07.834" level="INFO">${old_active_Card} = 1/1</msg>
<status status="PASS" endtime="20190113 21:42:07.835" starttime="20190113 21:42:07.832"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${old_standby_Card}</arg>
<arg>&amp;{dict_card_info}[standby]</arg>
</arguments>
<msg timestamp="20190113 21:42:07.882" level="INFO">${old_standby_Card} = 1/2</msg>
<status status="PASS" endtime="20190113 21:42:07.883" starttime="20190113 21:42:07.880"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:2 Perform switchover through CLI connection can work again after seconds interrupt.</arg>
</arguments>
<msg timestamp="20190113 21:42:07.933" level="INFO">STEP:2 Perform switchover through CLI connection can work again after seconds interrupt.</msg>
<status status="PASS" endtime="20190113 21:42:07.934" starttime="20190113 21:42:07.932"></status>
</kw>
<kw name="redundancy_switchover" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>redundancy switchover</doc>
<arguments>
<arg>eutA</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>redundancy ${switch_type}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:42:07.993" level="INFO">send session_command, cmd=redundancy switchover, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:42:08.426" level="INFO">session_command result=redundancy switchover
status Controller Switch-over triggered successfully from 1/1 to 1/2 at 2019-01-13 21:24:20:151 PST
NGPON2X4</msg>
<msg timestamp="20190113 21:42:08.427" level="INFO">${res} = redundancy switchover
status Controller Switch-over triggered successfully from 1/1 to 1/2 at 2019-01-13 21:24:20:151 PST
NGPON2X4</msg>
<status status="PASS" endtime="20190113 21:42:08.427" starttime="20190113 21:42:07.989"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:08.431" starttime="20190113 21:42:08.429"></status>
</kw>
<status status="PASS" endtime="20190113 21:42:08.432" starttime="20190113 21:42:07.988"></status>
</kw>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:42:08.510" starttime="20190113 21:42:08.433"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
<arg>Wait for redundancy ${switch_type}</arg>
</arguments>
<msg timestamp="20190113 21:42:38.513" level="INFO">Slept 30 seconds</msg>
<msg timestamp="20190113 21:42:38.513" level="INFO">Wait for redundancy switchover</msg>
<status status="PASS" endtime="20190113 21:42:38.514" starttime="20190113 21:42:08.511"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>${retry_interval}</arg>
<arg>Cli</arg>
<arg>${device}</arg>
<arg>show switchover status</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show switchover status</arg>
</arguments>
<msg timestamp="20190113 21:42:38.519" level="INFO">send session_command, cmd=show switchover status, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:42:56.887" level="FAIL">SSHLoginException</msg>
<msg timestamp="20190113 21:42:56.887" level="DEBUG">Traceback (most recent call last):
  File "/etc/barista/packages/caferobot/command/adapter.py", line 210, in run_keyword
    return self._keywords_adapter_map[name].run_keyword(name, args, kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 83, in run_keyword
    return self._KEYWORDS_WRAPPERS[name](*args, **kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 140, in _wrap_cli
    result = device.session_command(cmd, p, timeout, newline, retry, int(timeout_exception), exclude_prompt)
  File "/etc/barista/packages/caferobot/command/device/shell.py", line 82, in session_command
    raise e</msg>
<status status="FAIL" endtime="20190113 21:42:56.888" starttime="20190113 21:42:38.517"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show switchover status</arg>
</arguments>
<msg timestamp="20190113 21:43:06.894" level="INFO">send session_command, cmd=show switchover status, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:48:12.780" level="INFO">session_command result=show switchover status
switchover status
 card-location                1/2
 system-state                 ACTIVE
 switchover-reason            "User Initiated Normal-mode"
 switchover-status            Successful
 switchover-start-time        "2019-01-13 21:24:23:455 PST"
 switchover-end-time          "2019-01-13 21:24:25:478 PST"
 switchover-dm-in-sync-status "All DMs in sync"
NGPON2X4</msg>
<status status="PASS" endtime="20190113 21:48:12.781" starttime="20190113 21:43:06.889"></status>
</kw>
<msg timestamp="20190113 21:48:12.782" level="INFO">${res} = show switchover status
switchover status
 card-location                1/2
 system-state                 ACTIVE
 switchover-reason            "User Initiated Normal-mode"
 switchover-status      ...</msg>
<status status="PASS" endtime="20190113 21:48:12.783" starttime="20190113 21:42:38.515"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:12.784" starttime="20190113 21:42:07.986"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${p_check_switchover_status}</arg>
<arg>10s</arg>
<arg>check_switchover_status</arg>
<arg>eutA</arg>
<arg>switchover-dm-in-sync-status="All DMs in sync"</arg>
</arguments>
<kw name="check_switchover_status" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: perform ont related operations</doc>
<arguments>
<arg>eutA</arg>
<arg>switchover-dm-in-sync-status="All DMs in sync"</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show switchover status</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:48:12.818" level="INFO">send session_command, cmd=show switchover status, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:48:13.389" level="INFO">session_command result=show switchover status
switchover status
 card-location                1/2
 system-state                 ACTIVE
 switchover-reason            "User Initiated Normal-mode"
 switchover-status            Successful
 switchover-start-time        "2019-01-13 21:24:23:455 PST"
 switchover-end-time          "2019-01-13 21:24:25:478 PST"
 switchover-dm-in-sync-status "All DMs in sync"
NGPON2X4</msg>
<msg timestamp="20190113 21:48:13.390" level="INFO">${res} = show switchover status
switchover status
 card-location                1/2
 system-state                 ACTIVE
 switchover-reason            "User Initiated Normal-mode"
 switchover-status      ...</msg>
<status status="PASS" endtime="20190113 21:48:13.390" starttime="20190113 21:48:12.815"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{dict_check_item.keys()} ]">
<kw type="foritem" name="${check_item} = switchover-dm-in-sync-status">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:48:13.395" level="INFO">${pattern} = (?i)switchover-dm-in-sync-status\s+.*"All DMs in sync"</msg>
<status status="PASS" endtime="20190113 21:48:13.395" starttime="20190113 21:48:13.394"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check switchover status:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:48:13.396" level="INFO">******[eutA] check switchover status:(?i)switchover-dm-in-sync-status\s+.*"All DMs in sync", contain=yes******</msg>
<status status="PASS" endtime="20190113 21:48:13.397" starttime="20190113 21:48:13.395"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:48:13.400" starttime="20190113 21:48:13.399"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:13.400" starttime="20190113 21:48:13.397"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:13.401" starttime="20190113 21:48:13.393"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:13.401" starttime="20190113 21:48:13.392"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:13.402" starttime="20190113 21:48:12.813"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:13.403" starttime="20190113 21:48:12.811"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:48:13.468" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:48:13.468" starttime="20190113 21:48:13.466"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:48:13.470" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:48:14.021" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:48:14.022" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:48:14.022" starttime="20190113 21:48:13.468"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:48:14.027" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:48:14.027" starttime="20190113 21:48:14.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:48:14.030" starttime="20190113 21:48:14.029"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:14.030" starttime="20190113 21:48:14.028"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:14.031" starttime="20190113 21:48:13.465"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:48:14.082" level="INFO">******[eutA] check card 1/2 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:48:14.082" starttime="20190113 21:48:14.081"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:48:14.086" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:48:14.595" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:48:14.595" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:48:14.595" starttime="20190113 21:48:14.083"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:48:14.598" level="INFO">${pattern} = (?i)1/2\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:48:14.598" starttime="20190113 21:48:14.597"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:48:14.601" starttime="20190113 21:48:14.600"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:14.601" starttime="20190113 21:48:14.599"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:14.602" starttime="20190113 21:48:14.080"></status>
</kw>
<kw name="check_system_equipment_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show system-equipment" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>active-controller=${old_standby_Card}</arg>
<arg>standby-controller=${old_active_Card}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show system-equipment</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:48:14.654" level="INFO">send session_command, cmd=show system-equipment, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:48:15.102" level="INFO">session_command result=show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<msg timestamp="20190113 21:48:15.103" level="INFO">${res} = show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<status status="PASS" endtime="20190113 21:48:15.103" starttime="20190113 21:48:14.644"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{dict_check_item.keys()} ]">
<kw type="foritem" name="${check_item} = active-controller">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:48:15.108" level="INFO">${pattern} = (?i)active-controller\s+.*1/2</msg>
<status status="PASS" endtime="20190113 21:48:15.108" starttime="20190113 21:48:15.106"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check system-equipment:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:48:15.110" level="INFO">******[eutA] check system-equipment:(?i)active-controller\s+.*1/2, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:48:15.110" starttime="20190113 21:48:15.109"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:48:15.113" starttime="20190113 21:48:15.112"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:15.114" starttime="20190113 21:48:15.111"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:15.114" starttime="20190113 21:48:15.105"></status>
</kw>
<kw type="foritem" name="${check_item} = standby-controller">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:48:15.116" level="INFO">${pattern} = (?i)standby-controller\s+.*1/1</msg>
<status status="PASS" endtime="20190113 21:48:15.117" starttime="20190113 21:48:15.115"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check system-equipment:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:48:15.118" level="INFO">******[eutA] check system-equipment:(?i)standby-controller\s+.*1/1, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:48:15.118" starttime="20190113 21:48:15.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:48:15.121" starttime="20190113 21:48:15.120"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:15.122" starttime="20190113 21:48:15.119"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:15.122" starttime="20190113 21:48:15.114"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:15.122" starttime="20190113 21:48:15.104"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:15.123" starttime="20190113 21:48:14.642"></status>
</kw>
<kw name="check_system_equipment_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show system-equipment" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>active-controller=${old_active_Card}</arg>
<arg>standby-controller=${old_standby_Card}</arg>
<arg>contain=no</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show system-equipment</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:48:15.146" level="INFO">send session_command, cmd=show system-equipment, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:48:15.701" level="INFO">session_command result=show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<msg timestamp="20190113 21:48:15.701" level="INFO">${res} = show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<status status="PASS" endtime="20190113 21:48:15.701" starttime="20190113 21:48:15.141"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{dict_check_item.keys()} ]">
<kw type="foritem" name="${check_item} = active-controller">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:48:15.706" level="INFO">${pattern} = (?i)active-controller\s+.*1/1</msg>
<status status="PASS" endtime="20190113 21:48:15.706" starttime="20190113 21:48:15.705"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check system-equipment:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:48:15.707" level="INFO">******[eutA] check system-equipment:(?i)active-controller\s+.*1/1, contain=no******</msg>
<status status="PASS" endtime="20190113 21:48:15.708" starttime="20190113 21:48:15.706"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Not Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` matches ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:48:15.711" starttime="20190113 21:48:15.710"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:15.711" starttime="20190113 21:48:15.708"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:15.711" starttime="20190113 21:48:15.704"></status>
</kw>
<kw type="foritem" name="${check_item} = standby-controller">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:48:15.714" level="INFO">${pattern} = (?i)standby-controller\s+.*1/2</msg>
<status status="PASS" endtime="20190113 21:48:15.714" starttime="20190113 21:48:15.713"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check system-equipment:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:48:15.715" level="INFO">******[eutA] check system-equipment:(?i)standby-controller\s+.*1/2, contain=no******</msg>
<status status="PASS" endtime="20190113 21:48:15.716" starttime="20190113 21:48:15.714"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Not Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` matches ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:48:15.718" starttime="20190113 21:48:15.717"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:15.718" starttime="20190113 21:48:15.716"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:15.719" starttime="20190113 21:48:15.712"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:15.719" starttime="20190113 21:48:15.703"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:15.720" starttime="20190113 21:48:15.139"></status>
</kw>
<kw type="teardown" name="case teardown">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait until eutA in service</arg>
</arguments>
<msg timestamp="20190113 21:48:15.743" level="INFO">wait until eutA in service</msg>
<status status="PASS" endtime="20190113 21:48:15.743" starttime="20190113 21:48:15.742"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>10s</arg>
<arg>check_card_info</arg>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:48:15.747" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:48:15.748" starttime="20190113 21:48:15.746"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:48:15.750" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:48:16.243" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:48:16.244" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:48:16.244" starttime="20190113 21:48:15.748"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:48:16.248" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:48:16.248" starttime="20190113 21:48:16.246"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:48:16.251" starttime="20190113 21:48:16.250"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:16.252" starttime="20190113 21:48:16.249"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:16.252" starttime="20190113 21:48:15.745"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:16.254" starttime="20190113 21:48:15.744"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>10s</arg>
<arg>check_card_info</arg>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:48:16.260" level="INFO">******[eutA] check card 1/2 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:48:16.261" starttime="20190113 21:48:16.259"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:48:16.264" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:48:17.031" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:48:17.032" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:48:17.032" starttime="20190113 21:48:16.262"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:48:17.040" level="INFO">${pattern} = (?i)1/2\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:48:17.041" starttime="20190113 21:48:17.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:48:17.044" starttime="20190113 21:48:17.043"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:17.044" starttime="20190113 21:48:17.041"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:17.044" starttime="20190113 21:48:16.257"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:17.050" starttime="20190113 21:48:16.256"></status>
</kw>
<status status="PASS" endtime="20190113 21:48:17.053" starttime="20190113 21:48:15.741"></status>
</kw>
<doc>1 Provision ip address for craft 1 and login the device login successful
2 Perform switchover through CLI connection can work again after seconds interrupt.</doc>
<tags>
<tag>@author=Min Gu</tag>
<tag>@eut=10GE-12</tag>
<tag>@eut=DualCard</tag>
<tag>@eut=GPON-8r2</tag>
<tag>@feature=Management</tag>
<tag>@globalid=2509257</tag>
<tag>@priority=P2</tag>
<tag>@require=1eut</tag>
<tag>@subFeature=Local Craft Interface Support</tag>
<tag>@tcid=AXOS_E72_PARENT-TC-3747</tag>
<tag>@user_interface=CLI</tag>
</tags>
<status status="PASS" endtime="20190113 21:48:17.163" critical="yes" starttime="20190113 21:42:04.947"></status>
</test>
<status status="PASS" endtime="20190113 21:48:17.374" starttime="20190113 21:42:04.694"></status>
</suite>
<doc>Initialization file of feature_x test suites
It is for putting suite level setup and teardown keywords
And setting the forced tags for all the test cases in "feature_x" folder and its subfolder</doc>
<status status="PASS" endtime="20190113 21:48:17.524" starttime="20190113 21:32:01.480"></status>
</suite>
<status status="PASS" endtime="20190113 21:48:17.536" starttime="20190113 21:32:01.477"></status>
</suite>
<status status="PASS" endtime="20190113 21:48:17.543" starttime="20190113 21:32:01.474"></status>
</suite>
<status status="PASS" endtime="20190113 21:48:17.552" starttime="20190113 21:32:01.472"></status>
</suite>
<status status="PASS" endtime="20190113 21:48:17.560" starttime="20190113 21:32:01.469"></status>
</suite>
<status status="PASS" endtime="20190113 21:48:17.565" starttime="20190113 21:32:01.466"></status>
</suite>
<status status="PASS" endtime="20190113 21:48:17.571" starttime="20190113 21:32:01.462"></status>
</suite>
<status status="PASS" endtime="20190113 21:48:17.592" starttime="20190113 21:32:01.365"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="3">@author=Min Gu</stat>
<stat fail="0" pass="3">@eut=10GE-12</stat>
<stat fail="0" pass="3">@eut=DualCard</stat>
<stat fail="0" pass="3">@eut=GPON-8r2</stat>
<stat fail="0" pass="3">@feature=Management</stat>
<stat fail="0" pass="1">@globalid=2509257</stat>
<stat fail="0" pass="1">@globalid=2509259</stat>
<stat fail="0" pass="1">@globalid=2509260</stat>
<stat fail="0" pass="3">@priority=P2</stat>
<stat fail="0" pass="3">@require=1eut</stat>
<stat fail="0" pass="3">@subFeature=Local Craft Interface Support</stat>
<stat fail="0" pass="1">@tcid=AXOS_E72_PARENT-TC-3747</stat>
<stat fail="0" pass="1">@tcid=AXOS_E72_PARENT-TC-3749</stat>
<stat fail="0" pass="1">@tcid=AXOS_E72_PARENT-TC-3750</stat>
<stat fail="0" pass="3">@user_interface=CLI</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="AXOS" pass="3">AXOS</stat>
<stat fail="0" id="s1-s1" name="AXOS-automation" pass="3">AXOS.AXOS-automation</stat>
<stat fail="0" id="s1-s1-s1" name="Milan" pass="3">AXOS.AXOS-automation.Milan</stat>
<stat fail="0" id="s1-s1-s1-s1" name="ST Test Cases" pass="3">AXOS.AXOS-automation.Milan.ST Test Cases</stat>
<stat fail="0" id="s1-s1-s1-s1-s1" name="System" pass="3">AXOS.AXOS-automation.Milan.ST Test Cases.System</stat>
<stat fail="0" id="s1-s1-s1-s1-s1-s1" name="Management" pass="3">AXOS.AXOS-automation.Milan.ST Test Cases.System.Management</stat>
<stat fail="0" id="s1-s1-s1-s1-s1-s1-s1" name="Local Craft Interface Support" pass="3">AXOS.AXOS-automation.Milan.ST Test Cases.System.Management.Local Craft Interface Support</stat>
<stat fail="0" id="s1-s1-s1-s1-s1-s1-s1-s1" name="Test Cases" pass="3">AXOS.AXOS-automation.Milan.ST Test Cases.System.Management.Local Craft Interface Support.Test Cases</stat>
<stat fail="0" id="s1-s1-s1-s1-s1-s1-s1-s1-s1" name="tc Verify craft connection after reboot the standby card" pass="1">AXOS.AXOS-automation.Milan.ST Test Cases.System.Management.Local Craft Interface Support.Test Cases.tc Verify craft connection after reboot the standby card</stat>
<stat fail="0" id="s1-s1-s1-s1-s1-s1-s1-s1-s2" name="tc Verify craft connection after reboot the system" pass="1">AXOS.AXOS-automation.Milan.ST Test Cases.System.Management.Local Craft Interface Support.Test Cases.tc Verify craft connection after reboot the system</stat>
<stat fail="0" id="s1-s1-s1-s1-s1-s1-s1-s1-s3" name="tc Verify craft connection after switchover through CLI dualcard" pass="1">AXOS.AXOS-automation.Milan.ST Test Cases.System.Management.Local Craft Interface Support.Test Cases.tc Verify craft connection after switchover through CLI dualcard</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
