<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20190113 21:53:58.663" generator="Robot 3.0.4 (Python 2.7.14 on linux2)">
<suite source="/home/guchen/workspace/AXOS" id="s1" name="AXOS">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation" id="s1-s1" name="AXOS-automation">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan" id="s1-s1-s1" name="Milan">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases" id="s1-s1-s1-s1" name="ST Test Cases">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/System" id="s1-s1-s1-s1-s1" name="System">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/System/Management" id="s1-s1-s1-s1-s1-s1" name="Management">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/System/Management/Local_Craft_Interface_Support" id="s1-s1-s1-s1-s1-s1-s1" name="Local Craft Interface Support">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/System/Management/Local_Craft_Interface_Support/test_cases_10ge" id="s1-s1-s1-s1-s1-s1-s1-s1" name="Test Cases 10Ge">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/System/Management/Local_Craft_Interface_Support/test_cases_10ge/tc_Verify_craft_connection_after_reboot_the_standby_card.robot" id="s1-s1-s1-s1-s1-s1-s1-s1-s1" name="tc Verify craft connection after reboot the standby card">
<test id="s1-s1-s1-s1-s1-s1-s1-s1-s1-t1" name="tc_Verify_craft_connection_after_reboot_the_standby_card">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>set eut version and release</arg>
</arguments>
<msg timestamp="20190113 21:54:00.075" level="INFO">set eut version and release</msg>
<status status="PASS" endtime="20190113 21:54:00.076" starttime="20190113 21:54:00.074"></status>
</kw>
<kw name="set_eut_version" library="release_adapter">
<doc>set EUT build and release attribution</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>If device is not specified, get it from topo.yaml ${DEVICES} list</arg>
</arguments>
<msg timestamp="20190113 21:54:00.213" level="INFO">If device is not specified, get it from topo.yaml &lt;cafe.core.utils.Param object at 0x7f088e347d50&gt; list</msg>
<status status="PASS" endtime="20190113 21:54:00.213" starttime="20190113 21:54:00.212"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${device}'</arg>
<arg>Create List</arg>
<arg>${device}</arg>
<arg>ELSE</arg>
<arg>get dictionary keys</arg>
<arg>${DEVICES}</arg>
</arguments>
<assign>
<var>${keys}</var>
</assign>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${DEVICES}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:00.216" starttime="20190113 21:54:00.215"></status>
</kw>
<msg timestamp="20190113 21:54:00.216" level="INFO">${keys} = ['eutA']</msg>
<status status="PASS" endtime="20190113 21:54:00.217" starttime="20190113 21:54:00.214"></status>
</kw>
<kw type="for" name="${eut} IN [ @{keys} ]">
<kw type="foritem" name="${eut} = eutA">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current eut is ${eut}, type is ${DEVICES.${eut}.type}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:00.219" starttime="20190113 21:54:00.218"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${DEVICES.${eut}.type}'!='AXOS'</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:00.222" starttime="20190113 21:54:00.220"></status>
</kw>
<kw name="get_eut_version" library="release_adapter">
<tags>
<tag>@author=llin</tag>
</tags>
<doc>this is the keyword used to get single device's build information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>cli</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:54:04.298" level="INFO">Created ShellDevice(eutA)</msg>
<msg timestamp="20190113 21:54:04.299" level="INFO">send session_command, cmd=cli, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:54:05.073" level="INFO">session_command result=cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG state persistence control commands
  clear                 - Clear object data
  clock                 - Modify clock
  configure             - Manipulate software configuration information
  copy                  - Copy files
  cpe-upgrade:cpe       - CPE operation
  debug                 - 
  delete                - Delete files
  devtools              - Enable/disable development tools
  download              - Download files
  enable                - Enable EXEC commands
  exit                  - Exit the management session
  folder                - 
  generate              - Generate files
  idle-timeout          - Configure idle timeout
  install               - 
  lock                  - lock a datastore
  logout                - Logout a user
  manual                - Manual operation with alarms
  no                    - Negate a command or set its defaults
  ofa-connect           - Open Flow Connect
  ofa-listener          - Open Flow Listener
  ofa-port              - Open Flow port
  ont-eth               - ONT-ETH efm-loopback-status mode
  ont-firmware-upgrade  - Start software download
  ont-simulation        - ONT simulation commands
  ont-upgrade           - ONT upgrade commands
  paginate              - Paginate output from CLI commands
  perform               - Perform an operation
  ping                  - Ping IP address
  ping6                 - Ping IPv6 address
  quit                  - Exit the management session
  redundancy            - redundancy switchover commands
  reload                - Reboot the current card
  remove-dynamic-policy - 
  replay                - Replay card-config
  restart               - Restart Diameter daemon
  run                   - 
  send                  - Send message to terminal of one or all users
  session               - 
  show                  - Show information about the system
  ssh                   - ssh command
  start                 - Start an operation
  stop                  - Stop an operation
  switch                - Switch network clock
  tcpdump               - tcpdump command
  telnet                - telnet command
  templatize            - Find patterns in subtree.
  terminal              - Set terminal type
  timestamp             - Enable/disable the display of timestamp
  traceroute            - Traceroute IP address
  uninstall             - 
  unlock                - unlock a datastore
  upgrade               - Upgrade commands
  upload                - Upload files
  verify                - 
NGPON2X4</msg>
<msg timestamp="20190113 21:54:05.074" level="INFO">${res} = cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG s...</msg>
<status status="PASS" endtime="20190113 21:54:05.074" starttime="20190113 21:54:00.224"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:54:05.085" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:54:05.606" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 21:54:05.607" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 21:54:05.607" starttime="20190113 21:54:05.076"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>(description|details)\\s*(.*)\r</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 21:54:05.610" level="INFO">${matches} = ['IBAXOS191-CI-330', 'IBAXOS191-CI-330']</msg>
<status status="PASS" endtime="20190113 21:54:05.611" starttime="20190113 21:54:05.609"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:05.612" starttime="20190113 21:54:05.611"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 21:54:05.614" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 21:54:05.614" starttime="20190113 21:54:05.613"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${build}</arg>
</arguments>
<msg timestamp="20190113 21:54:05.615" level="INFO">we've got the build informations : IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 21:54:05.616" starttime="20190113 21:54:05.614"></status>
</kw>
<msg timestamp="20190113 21:54:05.616" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 21:54:05.616" starttime="20190113 21:54:00.222"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>build</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:05.622" starttime="20190113 21:54:05.621"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s build is ${DEVICES.${eut}.build}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:05.624" starttime="20190113 21:54:05.623"></status>
</kw>
<kw name="get_eut_distro" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to get single device's distro information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:54:05.628" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:54:06.085" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 21:54:06.086" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 21:54:06.086" starttime="20190113 21:54:05.626"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>distro\\s*"(.*)"\r</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 21:54:06.090" level="INFO">${matches} = ['IB-AXOS-19.1 2019.01.12 02:16:30', 'IB-AXOS-19.1 2019.01.12 02:16:30']</msg>
<status status="PASS" endtime="20190113 21:54:06.090" starttime="20190113 21:54:06.088"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.092" starttime="20190113 21:54:06.091"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<msg timestamp="20190113 21:54:06.093" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 21:54:06.093" starttime="20190113 21:54:06.092"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${distro}</arg>
</arguments>
<msg timestamp="20190113 21:54:06.095" level="INFO">we've got the build informations : IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 21:54:06.095" starttime="20190113 21:54:06.094"></status>
</kw>
<msg timestamp="20190113 21:54:06.096" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 21:54:06.096" starttime="20190113 21:54:05.625"></status>
</kw>
<kw name="mapping_distro_to_release" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to mapping build id to release name</doc>
<arguments>
<arg>${distro}</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${distro}</arg>
<arg>\\s+.*$</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 21:54:06.100" level="INFO">${build} = IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 21:54:06.101" starttime="20190113 21:54:06.099"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the branch of the build is : ${build}</arg>
</arguments>
<msg timestamp="20190113 21:54:06.102" level="INFO">the branch of the build is : IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 21:54:06.103" starttime="20190113 21:54:06.101"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>open('${map}').readlines()</arg>
</arguments>
<assign>
<var>${fileHandler}</var>
</assign>
<msg timestamp="20190113 21:54:06.105" level="INFO">${fileHandler} = ['Release, Branch\n', 'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2\n', 'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-...</msg>
<status status="PASS" endtime="20190113 21:54:06.105" starttime="20190113 21:54:06.103"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the mapping file content : ${fileHandler}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.107" starttime="20190113 21:54:06.106"></status>
</kw>
<kw name="Convert To List" library="Collections">
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.108" starttime="20190113 21:54:06.108"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:54:06.110" level="INFO">${rowIndex} = 0</msg>
<status status="PASS" endtime="20190113 21:54:06.110" starttime="20190113 21:54:06.109"></status>
</kw>
<kw type="for" name="${rowitem} IN [ @{fileHandler} ]">
<kw type="foritem" name="${rowitem} = Release, Branch&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.114" starttime="20190113 21:54:06.112"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:54:06.118" level="FAIL">'Release, Branch
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:54:06.119" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:54:06.119" starttime="20190113 21:54:06.117"></status>
</kw>
<msg timestamp="20190113 21:54:06.119" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:54:06.119" starttime="20190113 21:54:06.114"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:54:06.121" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:54:06.121" starttime="20190113 21:54:06.120"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.123" starttime="20190113 21:54:06.122"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:54:06.124" level="INFO">${rowIndex} = 1</msg>
<status status="PASS" endtime="20190113 21:54:06.124" starttime="20190113 21:54:06.123"></status>
</kw>
<status status="PASS" endtime="20190113 21:54:06.125" starttime="20190113 21:54:06.112"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.127" starttime="20190113 21:54:06.126"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:54:06.130" level="FAIL">'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:54:06.130" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:54:06.130" starttime="20190113 21:54:06.129"></status>
</kw>
<msg timestamp="20190113 21:54:06.131" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:54:06.131" starttime="20190113 21:54:06.128"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:54:06.132" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:54:06.132" starttime="20190113 21:54:06.131"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.134" starttime="20190113 21:54:06.133"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:54:06.135" level="INFO">${rowIndex} = 2</msg>
<status status="PASS" endtime="20190113 21:54:06.135" starttime="20190113 21:54:06.134"></status>
</kw>
<status status="PASS" endtime="20190113 21:54:06.136" starttime="20190113 21:54:06.125"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.138" starttime="20190113 21:54:06.137"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:54:06.140" level="FAIL">'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:54:06.140" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:54:06.140" starttime="20190113 21:54:06.139"></status>
</kw>
<msg timestamp="20190113 21:54:06.141" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:54:06.141" starttime="20190113 21:54:06.138"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:54:06.142" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:54:06.143" starttime="20190113 21:54:06.142"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.144" starttime="20190113 21:54:06.143"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:54:06.146" level="INFO">${rowIndex} = 3</msg>
<status status="PASS" endtime="20190113 21:54:06.146" starttime="20190113 21:54:06.145"></status>
</kw>
<status status="PASS" endtime="20190113 21:54:06.146" starttime="20190113 21:54:06.136"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.148" starttime="20190113 21:54:06.147"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:54:06.151" level="FAIL">'AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:54:06.151" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:54:06.151" starttime="20190113 21:54:06.150"></status>
</kw>
<msg timestamp="20190113 21:54:06.152" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:54:06.152" starttime="20190113 21:54:06.149"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:54:06.153" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:54:06.154" starttime="20190113 21:54:06.152"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.155" starttime="20190113 21:54:06.154"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:54:06.157" level="INFO">${rowIndex} = 4</msg>
<status status="PASS" endtime="20190113 21:54:06.157" starttime="20190113 21:54:06.156"></status>
</kw>
<status status="PASS" endtime="20190113 21:54:06.158" starttime="20190113 21:54:06.146"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.160" starttime="20190113 21:54:06.159"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:54:06.163" level="FAIL">'AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:54:06.163" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:54:06.163" starttime="20190113 21:54:06.162"></status>
</kw>
<msg timestamp="20190113 21:54:06.164" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:54:06.164" starttime="20190113 21:54:06.161"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:54:06.166" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:54:06.166" starttime="20190113 21:54:06.165"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.168" starttime="20190113 21:54:06.167"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:54:06.170" level="INFO">${rowIndex} = 5</msg>
<status status="PASS" endtime="20190113 21:54:06.170" starttime="20190113 21:54:06.169"></status>
</kw>
<status status="PASS" endtime="20190113 21:54:06.170" starttime="20190113 21:54:06.158"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_19_1, IB-AXOS-19.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.173" starttime="20190113 21:54:06.172"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.176" starttime="20190113 21:54:06.175"></status>
</kw>
<msg timestamp="20190113 21:54:06.177" level="INFO">${contain_build} = True</msg>
<status status="PASS" endtime="20190113 21:54:06.177" starttime="20190113 21:54:06.174"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:54:06.179" level="INFO">build IB-AXOS-19.1 search result is True</msg>
<status status="PASS" endtime="20190113 21:54:06.179" starttime="20190113 21:54:06.178"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:54:06.180" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20190113 21:54:06.181" starttime="20190113 21:54:06.179"></status>
</kw>
<status status="PASS" endtime="20190113 21:54:06.181" starttime="20190113 21:54:06.171"></status>
</kw>
<status status="PASS" endtime="20190113 21:54:06.181" starttime="20190113 21:54:06.111"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${contain_build}'!='True'</arg>
<arg>NONE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.183" starttime="20190113 21:54:06.182"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we find the release info in ${rowIndex} row</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.185" starttime="20190113 21:54:06.184"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<assign>
<var>${len}</var>
</assign>
<msg timestamp="20190113 21:54:06.187" level="INFO">Length is 6</msg>
<msg timestamp="20190113 21:54:06.187" level="INFO">${len} = 6</msg>
<status status="PASS" endtime="20190113 21:54:06.187" starttime="20190113 21:54:06.186"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>@{fileHandler}[${rowIndex}]</arg>
</arguments>
<assign>
<var>${releaseStr}</var>
</assign>
<msg timestamp="20190113 21:54:06.189" level="DEBUG">Argument types are:
&lt;type 'str'&gt;</msg>
<msg timestamp="20190113 21:54:06.189" level="INFO">${releaseStr} = AXOS_19_1, IB-AXOS-19.1
</msg>
<status status="PASS" endtime="20190113 21:54:06.189" starttime="20190113 21:54:06.188"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>release=${releaseStr}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.191" starttime="20190113 21:54:06.190"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${releaseStr}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>@{matches}</var>
</assign>
<msg timestamp="20190113 21:54:06.193" level="INFO">@{matches} = [ AXOS_19_1 |  IB-AXOS-19.1
 ]</msg>
<status status="PASS" endtime="20190113 21:54:06.193" starttime="20190113 21:54:06.192"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.195" starttime="20190113 21:54:06.194"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 21:54:06.197" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 21:54:06.197" starttime="20190113 21:54:06.196"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the release information: ${release}.</arg>
</arguments>
<msg timestamp="20190113 21:54:06.199" level="INFO">we've got the release information: AXOS_19_1.</msg>
<status status="PASS" endtime="20190113 21:54:06.199" starttime="20190113 21:54:06.198"></status>
</kw>
<msg timestamp="20190113 21:54:06.200" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 21:54:06.200" starttime="20190113 21:54:06.098"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'NONE'=='${release}'</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.202" starttime="20190113 21:54:06.201"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>release</arg>
<arg>${release}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.204" starttime="20190113 21:54:06.203"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s release is ${DEVICES.${eut}.release}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:06.206" starttime="20190113 21:54:06.205"></status>
</kw>
<status status="PASS" endtime="20190113 21:54:06.207" starttime="20190113 21:54:00.218"></status>
</kw>
<status status="PASS" endtime="20190113 21:54:06.213" starttime="20190113 21:54:00.217"></status>
</kw>
<status status="PASS" endtime="20190113 21:54:06.214" starttime="20190113 21:54:00.211"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:1 Provision ip address for craft 1 and login the device</arg>
</arguments>
<msg timestamp="20190113 21:54:06.281" level="INFO">STEP:1 Provision ip address for craft 1 and login the device</msg>
<status status="PASS" endtime="20190113 21:54:06.281" starttime="20190113 21:54:06.280"></status>
</kw>
<kw name="get_system_equipment_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get "show system-equipment" command information,</doc>
<arguments>
<arg>eutA</arg>
</arguments>
<assign>
<var>&amp;{dict_card_info}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show system-equipment</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:54:06.351" level="INFO">send session_command, cmd=show system-equipment, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:54:06.816" level="INFO">session_command result=show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<msg timestamp="20190113 21:54:06.817" level="INFO">${res} = show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<status status="PASS" endtime="20190113 21:54:06.817" starttime="20190113 21:54:06.346"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>active-controller\\s+"card\\s+(\\d/\\d)\\s+.*"</arg>
</arguments>
<assign>
<var>${match}</var>
<var>${active_card}</var>
</assign>
<msg timestamp="20190113 21:54:06.823" level="INFO">${match} = active-controller  "card 1/2 (this card)"</msg>
<msg timestamp="20190113 21:54:06.824" level="INFO">${active_card} = 1/2</msg>
<status status="PASS" endtime="20190113 21:54:06.824" starttime="20190113 21:54:06.820"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>standby-controller\\s+"card\\s+(\\d/\\d)\\s+.*"</arg>
</arguments>
<assign>
<var>${match}</var>
<var>${standby_card}</var>
</assign>
<msg timestamp="20190113 21:54:06.829" level="INFO">${match} = standby-controller "card 1/1 (mate card)"</msg>
<msg timestamp="20190113 21:54:06.829" level="INFO">${standby_card} = 1/1</msg>
<status status="PASS" endtime="20190113 21:54:06.830" starttime="20190113 21:54:06.826"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] get system-equipment active-controller ${active_card}, standby-controller ${standby_card}******</arg>
</arguments>
<msg timestamp="20190113 21:54:06.834" level="INFO">******[eutA] get system-equipment active-controller 1/2, standby-controller 1/1******</msg>
<status status="PASS" endtime="20190113 21:54:06.834" starttime="20190113 21:54:06.831"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>active=${active_card}</arg>
<arg>standby=${standby_card}</arg>
</arguments>
<assign>
<var>&amp;{dict_info}</var>
</assign>
<msg timestamp="20190113 21:54:06.840" level="INFO">&amp;{dict_info} = { active=1/2 | standby=1/1 }</msg>
<status status="PASS" endtime="20190113 21:54:06.840" starttime="20190113 21:54:06.836"></status>
</kw>
<msg timestamp="20190113 21:54:06.842" level="INFO">&amp;{dict_card_info} = { active=1/2 | standby=1/1 }</msg>
<status status="PASS" endtime="20190113 21:54:06.843" starttime="20190113 21:54:06.345"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${old_active_Card}</arg>
<arg>&amp;{dict_card_info}[active]</arg>
</arguments>
<msg timestamp="20190113 21:54:06.883" level="INFO">${old_active_Card} = 1/2</msg>
<status status="PASS" endtime="20190113 21:54:06.884" starttime="20190113 21:54:06.879"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${old_standby_Card}</arg>
<arg>&amp;{dict_card_info}[standby]</arg>
</arguments>
<msg timestamp="20190113 21:54:06.907" level="INFO">${old_standby_Card} = 1/1</msg>
<status status="PASS" endtime="20190113 21:54:06.907" starttime="20190113 21:54:06.904"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:2 reboot the standby card connection works and has no interrupt.</arg>
</arguments>
<msg timestamp="20190113 21:54:06.957" level="INFO">STEP:2 reboot the standby card connection works and has no interrupt.</msg>
<status status="PASS" endtime="20190113 21:54:06.957" starttime="20190113 21:54:06.956"></status>
</kw>
<kw name="reload_card" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: reload operation</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>reload ${card}</arg>
<arg>prompt=Proceed with reload\\? \\[y/N\\]</arg>
</arguments>
<msg timestamp="20190113 21:54:07.015" level="INFO">send session_command, cmd=reload 1/1, prompt={u'Proceed with reload\\? \\[y/N\\]': None}, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:54:07.491" level="INFO">session_command result=reload 1/1
Warning! Reloading the device will impact services.
No configuration changes
</msg>
<status status="PASS" endtime="20190113 21:54:07.492" starttime="20190113 21:54:07.013"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>y</arg>
<arg>timeout=120</arg>
</arguments>
<msg timestamp="20190113 21:54:07.495" level="INFO">send session_command, cmd=y, prompt=None, timeout=120, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:54:09.721" level="INFO">session_command result=y
NGPON2X4</msg>
<status status="PASS" endtime="20190113 21:54:09.722" starttime="20190113 21:54:07.493"></status>
</kw>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:09.790" starttime="20190113 21:54:09.723"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
<arg>Wait for card ${card} reload</arg>
</arguments>
<msg timestamp="20190113 21:54:19.793" level="INFO">Slept 10 seconds</msg>
<msg timestamp="20190113 21:54:19.794" level="INFO">Wait for card 1/1 reload</msg>
<status status="PASS" endtime="20190113 21:54:19.794" starttime="20190113 21:54:09.792"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>120s</arg>
<arg>5s</arg>
<arg>check_card_info</arg>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>Unequipped</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>Unequipped</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:54:19.799" level="INFO">******[eutA] check card 1/1 Unequipped, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:54:19.800" starttime="20190113 21:54:19.798"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:54:19.802" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:54:24.385" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:54:24.386" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:54:24.386" starttime="20190113 21:54:19.800"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:54:24.390" level="INFO">${pattern} = (?i)1/1\s+.*Unequipped\s+.*</msg>
<status status="PASS" endtime="20190113 21:54:24.390" starttime="20190113 21:54:24.388"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:54:24.394" level="FAIL">'show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*Unequipped\s+.*'</msg>
<msg timestamp="20190113 21:54:24.394" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:54:24.394" starttime="20190113 21:54:24.392"></status>
</kw>
<status status="FAIL" endtime="20190113 21:54:24.394" starttime="20190113 21:54:24.391"></status>
</kw>
<status status="FAIL" endtime="20190113 21:54:24.395" starttime="20190113 21:54:19.797"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>Unequipped</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:54:29.401" level="INFO">******[eutA] check card 1/1 Unequipped, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:54:29.401" starttime="20190113 21:54:29.400"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:54:29.403" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:54:33.697" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:54:33.698" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:54:33.698" starttime="20190113 21:54:29.402"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:54:33.702" level="INFO">${pattern} = (?i)1/1\s+.*Unequipped\s+.*</msg>
<status status="PASS" endtime="20190113 21:54:33.702" starttime="20190113 21:54:33.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:54:33.706" level="FAIL">'show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*Unequipped\s+.*'</msg>
<msg timestamp="20190113 21:54:33.706" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:54:33.706" starttime="20190113 21:54:33.705"></status>
</kw>
<status status="FAIL" endtime="20190113 21:54:33.707" starttime="20190113 21:54:33.703"></status>
</kw>
<status status="FAIL" endtime="20190113 21:54:33.707" starttime="20190113 21:54:29.397"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>Unequipped</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:54:38.712" level="INFO">******[eutA] check card 1/1 Unequipped, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:54:38.713" starttime="20190113 21:54:38.711"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:54:38.715" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:54:39.209" level="INFO">session_command result=show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:54:39.210" level="INFO">${res} = show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
---------------------------...</msg>
<status status="PASS" endtime="20190113 21:54:39.210" starttime="20190113 21:54:38.713"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:54:39.213" level="INFO">${pattern} = (?i)1/1\s+.*Unequipped\s+.*</msg>
<status status="PASS" endtime="20190113 21:54:39.213" starttime="20190113 21:54:39.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:54:39.216" level="FAIL">'show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*Unequipped\s+.*'</msg>
<msg timestamp="20190113 21:54:39.216" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:54:39.216" starttime="20190113 21:54:39.215"></status>
</kw>
<status status="FAIL" endtime="20190113 21:54:39.216" starttime="20190113 21:54:39.213"></status>
</kw>
<status status="FAIL" endtime="20190113 21:54:39.217" starttime="20190113 21:54:38.709"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>Unequipped</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:54:44.223" level="INFO">******[eutA] check card 1/1 Unequipped, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:54:44.223" starttime="20190113 21:54:44.222"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:54:44.227" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:54:44.714" level="INFO">session_command result=show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:54:44.715" level="INFO">${res} = show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
---------------------------...</msg>
<status status="PASS" endtime="20190113 21:54:44.715" starttime="20190113 21:54:44.224"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:54:44.717" level="INFO">${pattern} = (?i)1/1\s+.*Unequipped\s+.*</msg>
<status status="PASS" endtime="20190113 21:54:44.718" starttime="20190113 21:54:44.716"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:54:44.721" level="FAIL">'show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*Unequipped\s+.*'</msg>
<msg timestamp="20190113 21:54:44.721" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:54:44.721" starttime="20190113 21:54:44.720"></status>
</kw>
<status status="FAIL" endtime="20190113 21:54:44.722" starttime="20190113 21:54:44.718"></status>
</kw>
<status status="FAIL" endtime="20190113 21:54:44.722" starttime="20190113 21:54:44.219"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>Unequipped</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:54:49.727" level="INFO">******[eutA] check card 1/1 Unequipped, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:54:49.728" starttime="20190113 21:54:49.726"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:54:49.730" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:54:50.257" level="INFO">session_command result=show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:54:50.258" level="INFO">${res} = show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
---------------------------...</msg>
<status status="PASS" endtime="20190113 21:54:50.258" starttime="20190113 21:54:49.728"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:54:50.261" level="INFO">${pattern} = (?i)1/1\s+.*Unequipped\s+.*</msg>
<status status="PASS" endtime="20190113 21:54:50.262" starttime="20190113 21:54:50.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:54:50.264" level="FAIL">'show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*Unequipped\s+.*'</msg>
<msg timestamp="20190113 21:54:50.265" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:54:50.265" starttime="20190113 21:54:50.263"></status>
</kw>
<status status="FAIL" endtime="20190113 21:54:50.265" starttime="20190113 21:54:50.262"></status>
</kw>
<status status="FAIL" endtime="20190113 21:54:50.266" starttime="20190113 21:54:49.724"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>Unequipped</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:54:55.271" level="INFO">******[eutA] check card 1/1 Unequipped, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:54:55.271" starttime="20190113 21:54:55.270"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:54:55.274" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:54:55.760" level="INFO">session_command result=show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   Unequipped  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:54:55.760" level="INFO">${res} = show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
---------------------------...</msg>
<status status="PASS" endtime="20190113 21:54:55.760" starttime="20190113 21:54:55.272"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:54:55.763" level="INFO">${pattern} = (?i)1/1\s+.*Unequipped\s+.*</msg>
<status status="PASS" endtime="20190113 21:54:55.763" starttime="20190113 21:54:55.762"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:54:55.766" starttime="20190113 21:54:55.765"></status>
</kw>
<status status="PASS" endtime="20190113 21:54:55.766" starttime="20190113 21:54:55.764"></status>
</kw>
<status status="PASS" endtime="20190113 21:54:55.767" starttime="20190113 21:54:55.268"></status>
</kw>
<status status="PASS" endtime="20190113 21:54:55.768" starttime="20190113 21:54:19.795"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
<arg>Wait for reload ${card} finish</arg>
</arguments>
<msg timestamp="20190113 21:55:25.770" level="INFO">Slept 30 seconds</msg>
<msg timestamp="20190113 21:55:25.771" level="INFO">Wait for reload 1/1 finish</msg>
<status status="PASS" endtime="20190113 21:55:25.771" starttime="20190113 21:54:55.769"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>${retry_interval}</arg>
<arg>check_card_info</arg>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:55:25.777" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:55:25.777" starttime="20190113 21:55:25.775"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:55:25.779" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:55:26.298" level="INFO">session_command result=show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   Unequipped  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:55:26.299" level="INFO">${res} = show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
---------------------------...</msg>
<status status="PASS" endtime="20190113 21:55:26.299" starttime="20190113 21:55:25.777"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:55:26.302" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:55:26.302" starttime="20190113 21:55:26.301"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:55:26.305" level="FAIL">'show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   Unequipped  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*In Service\s+.*'</msg>
<msg timestamp="20190113 21:55:26.305" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:55:26.306" starttime="20190113 21:55:26.304"></status>
</kw>
<status status="FAIL" endtime="20190113 21:55:26.306" starttime="20190113 21:55:26.303"></status>
</kw>
<status status="FAIL" endtime="20190113 21:55:26.306" starttime="20190113 21:55:25.774"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:55:56.312" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:55:56.312" starttime="20190113 21:55:56.310"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:55:56.323" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:55:56.955" level="INFO">session_command result=show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   Unequipped  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:55:56.955" level="INFO">${res} = show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
---------------------------...</msg>
<status status="PASS" endtime="20190113 21:55:56.955" starttime="20190113 21:55:56.313"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:55:56.958" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:55:56.958" starttime="20190113 21:55:56.957"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:55:56.961" level="FAIL">'show card
      PROVISION                                              SERIAL  SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE             MODEL     NO      VERSION   
-------------------------------------------------------------------------------
1/1   NGPON2-4   Unequipped  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*In Service\s+.*'</msg>
<msg timestamp="20190113 21:55:56.961" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:55:56.962" starttime="20190113 21:55:56.960"></status>
</kw>
<status status="FAIL" endtime="20190113 21:55:56.962" starttime="20190113 21:55:56.959"></status>
</kw>
<status status="FAIL" endtime="20190113 21:55:56.963" starttime="20190113 21:55:56.308"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:56:26.969" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:56:26.969" starttime="20190113 21:56:26.968"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:56:26.972" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:56:27.835" level="INFO">session_command result=show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
------------------------------------------------------------------------------
1/1   NGPON2-4   Connected  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:56:27.836" level="INFO">${res} = show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
-----------------------------...</msg>
<status status="PASS" endtime="20190113 21:56:27.836" starttime="20190113 21:56:26.970"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:56:27.839" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:56:27.839" starttime="20190113 21:56:27.837"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:56:27.842" level="FAIL">'show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
------------------------------------------------------------------------------
1/1   NGPON2-4   Connected  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*In Service\s+.*'</msg>
<msg timestamp="20190113 21:56:27.843" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:56:27.843" starttime="20190113 21:56:27.841"></status>
</kw>
<status status="FAIL" endtime="20190113 21:56:27.843" starttime="20190113 21:56:27.840"></status>
</kw>
<status status="FAIL" endtime="20190113 21:56:27.844" starttime="20190113 21:56:26.965"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:56:57.850" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:56:57.851" starttime="20190113 21:56:57.849"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:56:57.853" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:56:58.384" level="INFO">session_command result=show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
------------------------------------------------------------------------------
1/1   NGPON2-4   Connected  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:56:58.385" level="INFO">${res} = show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
-----------------------------...</msg>
<status status="PASS" endtime="20190113 21:56:58.385" starttime="20190113 21:56:57.851"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:56:58.388" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:56:58.389" starttime="20190113 21:56:58.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:56:58.392" level="FAIL">'show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
------------------------------------------------------------------------------
1/1   NGPON2-4   Connected  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*In Service\s+.*'</msg>
<msg timestamp="20190113 21:56:58.392" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:56:58.392" starttime="20190113 21:56:58.391"></status>
</kw>
<status status="FAIL" endtime="20190113 21:56:58.393" starttime="20190113 21:56:58.389"></status>
</kw>
<status status="FAIL" endtime="20190113 21:56:58.393" starttime="20190113 21:56:57.846"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:57:28.399" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:57:28.399" starttime="20190113 21:57:28.398"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:57:28.402" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:57:29.035" level="INFO">session_command result=show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
------------------------------------------------------------------------------
1/1   NGPON2-4   Connected  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:57:29.036" level="INFO">${res} = show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
-----------------------------...</msg>
<status status="PASS" endtime="20190113 21:57:29.036" starttime="20190113 21:57:28.400"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:57:29.040" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:57:29.040" starttime="20190113 21:57:29.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:57:29.043" level="FAIL">'show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
------------------------------------------------------------------------------
1/1   NGPON2-4   Connected  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*In Service\s+.*'</msg>
<msg timestamp="20190113 21:57:29.044" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:57:29.044" starttime="20190113 21:57:29.042"></status>
</kw>
<status status="FAIL" endtime="20190113 21:57:29.045" starttime="20190113 21:57:29.041"></status>
</kw>
<status status="FAIL" endtime="20190113 21:57:29.045" starttime="20190113 21:57:28.395"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:57:59.051" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:57:59.051" starttime="20190113 21:57:59.050"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:57:59.053" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:57:59.586" level="INFO">session_command result=show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
------------------------------------------------------------------------------
1/1   NGPON2-4   Connected  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:57:59.587" level="INFO">${res} = show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
-----------------------------...</msg>
<status status="PASS" endtime="20190113 21:57:59.587" starttime="20190113 21:57:59.052"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:57:59.592" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:57:59.592" starttime="20190113 21:57:59.590"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 21:57:59.595" level="FAIL">'show card
      PROVISION  CARD                                       SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL     NO      VERSION   
------------------------------------------------------------------------------
1/1   NGPON2-4   Connected  Controller (Standby)  NGPON2-4  N/A     N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/1\s+.*In Service\s+.*'</msg>
<msg timestamp="20190113 21:57:59.595" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:57:59.595" starttime="20190113 21:57:59.594"></status>
</kw>
<status status="FAIL" endtime="20190113 21:57:59.595" starttime="20190113 21:57:59.593"></status>
</kw>
<status status="FAIL" endtime="20190113 21:57:59.596" starttime="20190113 21:57:59.048"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>${device}</arg>
<arg>${card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:58:29.602" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:58:29.602" starttime="20190113 21:58:29.600"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:58:29.605" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:58:30.322" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:58:30.322" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:58:30.322" starttime="20190113 21:58:29.602"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:58:30.327" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:58:30.327" starttime="20190113 21:58:30.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:30.330" starttime="20190113 21:58:30.329"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:30.330" starttime="20190113 21:58:30.327"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:30.330" starttime="20190113 21:58:29.598"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:30.342" starttime="20190113 21:55:25.772"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:30.343" starttime="20190113 21:54:07.011"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:3 wait for the standby card ready connection works and has no interrupt.</arg>
</arguments>
<msg timestamp="20190113 21:58:30.414" level="INFO">STEP:3 wait for the standby card ready connection works and has no interrupt.</msg>
<status status="PASS" endtime="20190113 21:58:30.415" starttime="20190113 21:58:30.414"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>10s</arg>
<arg>check_card_info</arg>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:58:30.469" level="INFO">******[eutA] check card 1/2 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:58:30.469" starttime="20190113 21:58:30.467"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:58:30.474" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:58:30.997" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:58:30.998" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:58:30.998" starttime="20190113 21:58:30.469"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:58:31.003" level="INFO">${pattern} = (?i)1/2\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:58:31.003" starttime="20190113 21:58:31.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:31.008" starttime="20190113 21:58:31.006"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:31.008" starttime="20190113 21:58:31.004"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:31.009" starttime="20190113 21:58:30.466"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:31.011" starttime="20190113 21:58:30.465"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>10s</arg>
<arg>check_card_info</arg>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:58:31.089" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:58:31.089" starttime="20190113 21:58:31.088"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:58:31.099" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:58:31.692" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:58:31.692" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:58:31.692" starttime="20190113 21:58:31.090"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:58:31.699" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:58:31.699" starttime="20190113 21:58:31.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:31.703" starttime="20190113 21:58:31.701"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:31.703" starttime="20190113 21:58:31.700"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:31.704" starttime="20190113 21:58:31.086"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:31.705" starttime="20190113 21:58:31.084"></status>
</kw>
<kw name="check_system_equipment_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show system-equipment" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>active-controller=${old_active_Card}</arg>
<arg>standby-controller=${old_standby_Card}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show system-equipment</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:58:31.811" level="INFO">send session_command, cmd=show system-equipment, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:58:32.379" level="INFO">session_command result=show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<msg timestamp="20190113 21:58:32.379" level="INFO">${res} = show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<status status="PASS" endtime="20190113 21:58:32.380" starttime="20190113 21:58:31.805"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{dict_check_item.keys()} ]">
<kw type="foritem" name="${check_item} = active-controller">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:58:32.384" level="INFO">${pattern} = (?i)active-controller\s+.*1/2</msg>
<status status="PASS" endtime="20190113 21:58:32.384" starttime="20190113 21:58:32.383"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check system-equipment:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:58:32.386" level="INFO">******[eutA] check system-equipment:(?i)active-controller\s+.*1/2, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:58:32.386" starttime="20190113 21:58:32.385"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:32.389" starttime="20190113 21:58:32.388"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:32.390" starttime="20190113 21:58:32.387"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:32.390" starttime="20190113 21:58:32.382"></status>
</kw>
<kw type="foritem" name="${check_item} = standby-controller">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:58:32.392" level="INFO">${pattern} = (?i)standby-controller\s+.*1/1</msg>
<status status="PASS" endtime="20190113 21:58:32.392" starttime="20190113 21:58:32.391"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check system-equipment:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:58:32.394" level="INFO">******[eutA] check system-equipment:(?i)standby-controller\s+.*1/1, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:58:32.394" starttime="20190113 21:58:32.393"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:32.397" starttime="20190113 21:58:32.396"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:32.397" starttime="20190113 21:58:32.395"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:32.398" starttime="20190113 21:58:32.390"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:32.398" starttime="20190113 21:58:32.381"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:32.399" starttime="20190113 21:58:31.803"></status>
</kw>
<kw name="check_system_equipment_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show system-equipment" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>active-controller=${old_standby_Card}</arg>
<arg>standby-controller=${old_active_Card}</arg>
<arg>contain=no</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show system-equipment</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:58:32.422" level="INFO">send session_command, cmd=show system-equipment, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:58:32.905" level="INFO">session_command result=show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<msg timestamp="20190113 21:58:32.905" level="INFO">${res} = show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<status status="PASS" endtime="20190113 21:58:32.906" starttime="20190113 21:58:32.420"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{dict_check_item.keys()} ]">
<kw type="foritem" name="${check_item} = active-controller">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:58:32.911" level="INFO">${pattern} = (?i)active-controller\s+.*1/1</msg>
<status status="PASS" endtime="20190113 21:58:32.911" starttime="20190113 21:58:32.909"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check system-equipment:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:58:32.914" level="INFO">******[eutA] check system-equipment:(?i)active-controller\s+.*1/1, contain=no******</msg>
<status status="PASS" endtime="20190113 21:58:32.914" starttime="20190113 21:58:32.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Not Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` matches ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:32.918" starttime="20190113 21:58:32.917"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:32.918" starttime="20190113 21:58:32.915"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:32.919" starttime="20190113 21:58:32.908"></status>
</kw>
<kw type="foritem" name="${check_item} = standby-controller">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:58:32.921" level="INFO">${pattern} = (?i)standby-controller\s+.*1/2</msg>
<status status="PASS" endtime="20190113 21:58:32.921" starttime="20190113 21:58:32.920"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check system-equipment:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:58:32.923" level="INFO">******[eutA] check system-equipment:(?i)standby-controller\s+.*1/2, contain=no******</msg>
<status status="PASS" endtime="20190113 21:58:32.923" starttime="20190113 21:58:32.922"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Not Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` matches ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:32.926" starttime="20190113 21:58:32.925"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:32.927" starttime="20190113 21:58:32.924"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:32.927" starttime="20190113 21:58:32.919"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:32.927" starttime="20190113 21:58:32.906"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:32.928" starttime="20190113 21:58:32.419"></status>
</kw>
<kw type="teardown" name="case teardown">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait until eutA in service</arg>
</arguments>
<msg timestamp="20190113 21:58:32.961" level="INFO">wait until eutA in service</msg>
<status status="PASS" endtime="20190113 21:58:32.961" starttime="20190113 21:58:32.960"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>10s</arg>
<arg>check_card_info</arg>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:58:32.967" level="INFO">******[eutA] check card 1/2 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:58:32.967" starttime="20190113 21:58:32.966"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:58:32.977" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:58:33.515" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:58:33.515" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:58:33.515" starttime="20190113 21:58:32.968"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:58:33.518" level="INFO">${pattern} = (?i)1/2\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:58:33.518" starttime="20190113 21:58:33.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:33.521" starttime="20190113 21:58:33.520"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:33.522" starttime="20190113 21:58:33.519"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:33.522" starttime="20190113 21:58:32.964"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:33.523" starttime="20190113 21:58:32.962"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>10s</arg>
<arg>check_card_info</arg>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 21:58:33.530" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 21:58:33.530" starttime="20190113 21:58:33.528"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:58:33.533" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:58:34.035" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 21:58:34.035" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 21:58:34.035" starttime="20190113 21:58:33.531"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 21:58:34.039" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 21:58:34.039" starttime="20190113 21:58:34.037"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:34.042" starttime="20190113 21:58:34.041"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:34.042" starttime="20190113 21:58:34.040"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:34.043" starttime="20190113 21:58:33.527"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:34.044" starttime="20190113 21:58:33.525"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:34.045" starttime="20190113 21:58:32.959"></status>
</kw>
<doc>1 Provision ip address for craft 1 and login the device login successful
2 reboot the standby card connection works and has no interrupt.
3 wait for the standby card ready connection works and has no interrupt.</doc>
<tags>
<tag>@author=Min Gu</tag>
<tag>@eut=10GE-12</tag>
<tag>@eut=DualCard</tag>
<tag>@eut=GPON-8r2</tag>
<tag>@feature=Management</tag>
<tag>@globalid=2509259</tag>
<tag>@priority=P2</tag>
<tag>@require=1eut</tag>
<tag>@subFeature=Local Craft Interface Support</tag>
<tag>@tcid=AXOS_E72_PARENT-TC-3749</tag>
<tag>@user_interface=CLI</tag>
</tags>
<status status="PASS" endtime="20190113 21:58:34.109" critical="yes" starttime="20190113 21:53:59.952"></status>
</test>
<status status="PASS" endtime="20190113 21:58:34.262" starttime="20190113 21:53:58.870"></status>
</suite>
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/System/Management/Local_Craft_Interface_Support/test_cases_10ge/tc_Verify_craft_connection_after_reboot_the_system.robot" id="s1-s1-s1-s1-s1-s1-s1-s1-s2" name="tc Verify craft connection after reboot the system">
<test id="s1-s1-s1-s1-s1-s1-s1-s1-s2-t1" name="tc_Verify_craft_connection_after_reboot_the_system">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>set eut version and release</arg>
</arguments>
<msg timestamp="20190113 21:58:34.627" level="INFO">set eut version and release</msg>
<status status="PASS" endtime="20190113 21:58:34.627" starttime="20190113 21:58:34.626"></status>
</kw>
<kw name="set_eut_version" library="release_adapter">
<doc>set EUT build and release attribution</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>If device is not specified, get it from topo.yaml ${DEVICES} list</arg>
</arguments>
<msg timestamp="20190113 21:58:34.643" level="INFO">If device is not specified, get it from topo.yaml &lt;cafe.core.utils.Param object at 0x7f088e347d50&gt; list</msg>
<status status="PASS" endtime="20190113 21:58:34.643" starttime="20190113 21:58:34.642"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${device}'</arg>
<arg>Create List</arg>
<arg>${device}</arg>
<arg>ELSE</arg>
<arg>get dictionary keys</arg>
<arg>${DEVICES}</arg>
</arguments>
<assign>
<var>${keys}</var>
</assign>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${DEVICES}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:34.646" starttime="20190113 21:58:34.645"></status>
</kw>
<msg timestamp="20190113 21:58:34.646" level="INFO">${keys} = ['eutA']</msg>
<status status="PASS" endtime="20190113 21:58:34.647" starttime="20190113 21:58:34.644"></status>
</kw>
<kw type="for" name="${eut} IN [ @{keys} ]">
<kw type="foritem" name="${eut} = eutA">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current eut is ${eut}, type is ${DEVICES.${eut}.type}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:34.650" starttime="20190113 21:58:34.649"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${DEVICES.${eut}.type}'!='AXOS'</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:34.652" starttime="20190113 21:58:34.650"></status>
</kw>
<kw name="get_eut_version" library="release_adapter">
<tags>
<tag>@author=llin</tag>
</tags>
<doc>this is the keyword used to get single device's build information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>cli</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:58:34.655" level="INFO">send session_command, cmd=cli, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:58:35.164" level="INFO">session_command result=cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG state persistence control commands
  clear                 - Clear object data
  clock                 - Modify clock
  configure             - Manipulate software configuration information
  copy                  - Copy files
  cpe-upgrade:cpe       - CPE operation
  debug                 - 
  delete                - Delete files
  devtools              - Enable/disable development tools
  download              - Download files
  enable                - Enable EXEC commands
  exit                  - Exit the management session
  folder                - 
  generate              - Generate files
  idle-timeout          - Configure idle timeout
  install               - 
  lock                  - lock a datastore
  logout                - Logout a user
  manual                - Manual operation with alarms
  no                    - Negate a command or set its defaults
  ofa-connect           - Open Flow Connect
  ofa-listener          - Open Flow Listener
  ofa-port              - Open Flow port
  ont-eth               - ONT-ETH efm-loopback-status mode
  ont-firmware-upgrade  - Start software download
  ont-simulation        - ONT simulation commands
  ont-upgrade           - ONT upgrade commands
  paginate              - Paginate output from CLI commands
  perform               - Perform an operation
  ping                  - Ping IP address
  ping6                 - Ping IPv6 address
  quit                  - Exit the management session
  redundancy            - redundancy switchover commands
  reload                - Reboot the current card
  remove-dynamic-policy - 
  replay                - Replay card-config
  restart               - Restart Diameter daemon
  run                   - 
  send                  - Send message to terminal of one or all users
  session               - 
  show                  - Show information about the system
  ssh                   - ssh command
  start                 - Start an operation
  stop                  - Stop an operation
  switch                - Switch network clock
  tcpdump               - tcpdump command
  telnet                - telnet command
  templatize            - Find patterns in subtree.
  terminal              - Set terminal type
  timestamp             - Enable/disable the display of timestamp
  traceroute            - Traceroute IP address
  uninstall             - 
  unlock                - unlock a datastore
  upgrade               - Upgrade commands
  upload                - Upload files
  verify                - 
NGPON2X4</msg>
<msg timestamp="20190113 21:58:35.165" level="INFO">${res} = cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG s...</msg>
<status status="PASS" endtime="20190113 21:58:35.165" starttime="20190113 21:58:34.653"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:58:35.169" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:58:35.684" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 21:58:35.685" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 21:58:35.685" starttime="20190113 21:58:35.167"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>(description|details)\\s*(.*)\r</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 21:58:35.688" level="INFO">${matches} = ['IBAXOS191-CI-330', 'IBAXOS191-CI-330']</msg>
<status status="PASS" endtime="20190113 21:58:35.688" starttime="20190113 21:58:35.687"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:35.690" starttime="20190113 21:58:35.689"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 21:58:35.692" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 21:58:35.692" starttime="20190113 21:58:35.691"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${build}</arg>
</arguments>
<msg timestamp="20190113 21:58:35.694" level="INFO">we've got the build informations : IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 21:58:35.694" starttime="20190113 21:58:35.693"></status>
</kw>
<msg timestamp="20190113 21:58:35.695" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 21:58:35.695" starttime="20190113 21:58:34.652"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>build</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:35.704" starttime="20190113 21:58:35.702"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s build is ${DEVICES.${eut}.build}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:35.706" starttime="20190113 21:58:35.704"></status>
</kw>
<kw name="get_eut_distro" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to get single device's distro information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:58:35.709" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:58:36.175" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 21:58:36.176" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 21:58:36.176" starttime="20190113 21:58:35.707"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>distro\\s*"(.*)"\r</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 21:58:36.188" level="INFO">${matches} = ['IB-AXOS-19.1 2019.01.12 02:16:30', 'IB-AXOS-19.1 2019.01.12 02:16:30']</msg>
<status status="PASS" endtime="20190113 21:58:36.188" starttime="20190113 21:58:36.183"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.189" starttime="20190113 21:58:36.188"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<msg timestamp="20190113 21:58:36.191" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 21:58:36.191" starttime="20190113 21:58:36.190"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${distro}</arg>
</arguments>
<msg timestamp="20190113 21:58:36.192" level="INFO">we've got the build informations : IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 21:58:36.192" starttime="20190113 21:58:36.192"></status>
</kw>
<msg timestamp="20190113 21:58:36.193" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 21:58:36.193" starttime="20190113 21:58:35.706"></status>
</kw>
<kw name="mapping_distro_to_release" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to mapping build id to release name</doc>
<arguments>
<arg>${distro}</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${distro}</arg>
<arg>\\s+.*$</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 21:58:36.208" level="INFO">${build} = IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 21:58:36.208" starttime="20190113 21:58:36.207"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the branch of the build is : ${build}</arg>
</arguments>
<msg timestamp="20190113 21:58:36.209" level="INFO">the branch of the build is : IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 21:58:36.210" starttime="20190113 21:58:36.209"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>open('${map}').readlines()</arg>
</arguments>
<assign>
<var>${fileHandler}</var>
</assign>
<msg timestamp="20190113 21:58:36.227" level="INFO">${fileHandler} = ['Release, Branch\n', 'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2\n', 'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-...</msg>
<status status="PASS" endtime="20190113 21:58:36.227" starttime="20190113 21:58:36.210"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the mapping file content : ${fileHandler}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.229" starttime="20190113 21:58:36.228"></status>
</kw>
<kw name="Convert To List" library="Collections">
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.230" starttime="20190113 21:58:36.229"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:58:36.232" level="INFO">${rowIndex} = 0</msg>
<status status="PASS" endtime="20190113 21:58:36.232" starttime="20190113 21:58:36.231"></status>
</kw>
<kw type="for" name="${rowitem} IN [ @{fileHandler} ]">
<kw type="foritem" name="${rowitem} = Release, Branch&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.236" starttime="20190113 21:58:36.234"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:58:36.239" level="FAIL">'Release, Branch
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:58:36.239" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:58:36.239" starttime="20190113 21:58:36.238"></status>
</kw>
<msg timestamp="20190113 21:58:36.240" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:58:36.240" starttime="20190113 21:58:36.237"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:58:36.241" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:58:36.242" starttime="20190113 21:58:36.240"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.243" starttime="20190113 21:58:36.242"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:58:36.245" level="INFO">${rowIndex} = 1</msg>
<status status="PASS" endtime="20190113 21:58:36.245" starttime="20190113 21:58:36.244"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:36.245" starttime="20190113 21:58:36.233"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.248" starttime="20190113 21:58:36.247"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:58:36.250" level="FAIL">'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:58:36.251" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:58:36.251" starttime="20190113 21:58:36.250"></status>
</kw>
<msg timestamp="20190113 21:58:36.251" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:58:36.251" starttime="20190113 21:58:36.248"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:58:36.253" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:58:36.253" starttime="20190113 21:58:36.252"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.256" starttime="20190113 21:58:36.255"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:58:36.258" level="INFO">${rowIndex} = 2</msg>
<status status="PASS" endtime="20190113 21:58:36.258" starttime="20190113 21:58:36.257"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:36.258" starttime="20190113 21:58:36.246"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.261" starttime="20190113 21:58:36.260"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:58:36.264" level="FAIL">'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:58:36.264" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:58:36.264" starttime="20190113 21:58:36.263"></status>
</kw>
<msg timestamp="20190113 21:58:36.264" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:58:36.265" starttime="20190113 21:58:36.262"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:58:36.266" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:58:36.267" starttime="20190113 21:58:36.265"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.268" starttime="20190113 21:58:36.267"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:58:36.269" level="INFO">${rowIndex} = 3</msg>
<status status="PASS" endtime="20190113 21:58:36.270" starttime="20190113 21:58:36.269"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:36.270" starttime="20190113 21:58:36.259"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.272" starttime="20190113 21:58:36.271"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:58:36.275" level="FAIL">'AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:58:36.275" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:58:36.275" starttime="20190113 21:58:36.274"></status>
</kw>
<msg timestamp="20190113 21:58:36.276" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:58:36.276" starttime="20190113 21:58:36.273"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:58:36.278" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:58:36.278" starttime="20190113 21:58:36.277"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.279" starttime="20190113 21:58:36.278"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:58:36.281" level="INFO">${rowIndex} = 4</msg>
<status status="PASS" endtime="20190113 21:58:36.281" starttime="20190113 21:58:36.280"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:36.281" starttime="20190113 21:58:36.270"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.283" starttime="20190113 21:58:36.282"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 21:58:36.286" level="FAIL">'AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 21:58:36.286" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:58:36.286" starttime="20190113 21:58:36.285"></status>
</kw>
<msg timestamp="20190113 21:58:36.288" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 21:58:36.288" starttime="20190113 21:58:36.284"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:58:36.289" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 21:58:36.290" starttime="20190113 21:58:36.289"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.291" starttime="20190113 21:58:36.290"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 21:58:36.293" level="INFO">${rowIndex} = 5</msg>
<status status="PASS" endtime="20190113 21:58:36.293" starttime="20190113 21:58:36.292"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:36.293" starttime="20190113 21:58:36.282"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_19_1, IB-AXOS-19.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.295" starttime="20190113 21:58:36.294"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.300" starttime="20190113 21:58:36.297"></status>
</kw>
<msg timestamp="20190113 21:58:36.300" level="INFO">${contain_build} = True</msg>
<status status="PASS" endtime="20190113 21:58:36.300" starttime="20190113 21:58:36.296"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:58:36.302" level="INFO">build IB-AXOS-19.1 search result is True</msg>
<status status="PASS" endtime="20190113 21:58:36.302" starttime="20190113 21:58:36.301"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<msg timestamp="20190113 21:58:36.303" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20190113 21:58:36.303" starttime="20190113 21:58:36.302"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:36.304" starttime="20190113 21:58:36.293"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:36.304" starttime="20190113 21:58:36.232"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${contain_build}'!='True'</arg>
<arg>NONE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.306" starttime="20190113 21:58:36.305"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we find the release info in ${rowIndex} row</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.307" starttime="20190113 21:58:36.306"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<assign>
<var>${len}</var>
</assign>
<msg timestamp="20190113 21:58:36.308" level="INFO">Length is 6</msg>
<msg timestamp="20190113 21:58:36.309" level="INFO">${len} = 6</msg>
<status status="PASS" endtime="20190113 21:58:36.309" starttime="20190113 21:58:36.308"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>@{fileHandler}[${rowIndex}]</arg>
</arguments>
<assign>
<var>${releaseStr}</var>
</assign>
<msg timestamp="20190113 21:58:36.311" level="DEBUG">Argument types are:
&lt;type 'str'&gt;</msg>
<msg timestamp="20190113 21:58:36.311" level="INFO">${releaseStr} = AXOS_19_1, IB-AXOS-19.1
</msg>
<status status="PASS" endtime="20190113 21:58:36.311" starttime="20190113 21:58:36.310"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>release=${releaseStr}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.313" starttime="20190113 21:58:36.312"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${releaseStr}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>@{matches}</var>
</assign>
<msg timestamp="20190113 21:58:36.314" level="INFO">@{matches} = [ AXOS_19_1 |  IB-AXOS-19.1
 ]</msg>
<status status="PASS" endtime="20190113 21:58:36.314" starttime="20190113 21:58:36.313"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.316" starttime="20190113 21:58:36.315"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 21:58:36.317" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 21:58:36.317" starttime="20190113 21:58:36.316"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the release information: ${release}.</arg>
</arguments>
<msg timestamp="20190113 21:58:36.319" level="INFO">we've got the release information: AXOS_19_1.</msg>
<status status="PASS" endtime="20190113 21:58:36.319" starttime="20190113 21:58:36.318"></status>
</kw>
<msg timestamp="20190113 21:58:36.320" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 21:58:36.320" starttime="20190113 21:58:36.205"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'NONE'=='${release}'</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.321" starttime="20190113 21:58:36.320"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>release</arg>
<arg>${release}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.323" starttime="20190113 21:58:36.322"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s release is ${DEVICES.${eut}.release}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:36.325" starttime="20190113 21:58:36.324"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:36.325" starttime="20190113 21:58:34.648"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:36.336" starttime="20190113 21:58:34.647"></status>
</kw>
<status status="PASS" endtime="20190113 21:58:36.337" starttime="20190113 21:58:34.641"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:1 Provision ip address for craft 1 and login the device login successful</arg>
</arguments>
<msg timestamp="20190113 21:58:36.409" level="INFO">STEP:1 Provision ip address for craft 1 and login the device login successful</msg>
<status status="PASS" endtime="20190113 21:58:36.409" starttime="20190113 21:58:36.408"></status>
</kw>
<kw name="get_system_equipment_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get "show system-equipment" command information,</doc>
<arguments>
<arg>eutA</arg>
</arguments>
<assign>
<var>&amp;{dict_card_info}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show system-equipment</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:58:36.475" level="INFO">send session_command, cmd=show system-equipment, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:58:36.914" level="INFO">session_command result=show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<msg timestamp="20190113 21:58:36.915" level="INFO">${res} = show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<status status="PASS" endtime="20190113 21:58:36.916" starttime="20190113 21:58:36.467"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>active-controller\\s+"card\\s+(\\d/\\d)\\s+.*"</arg>
</arguments>
<assign>
<var>${match}</var>
<var>${active_card}</var>
</assign>
<msg timestamp="20190113 21:58:36.920" level="INFO">${match} = active-controller  "card 1/2 (this card)"</msg>
<msg timestamp="20190113 21:58:36.921" level="INFO">${active_card} = 1/2</msg>
<status status="PASS" endtime="20190113 21:58:36.921" starttime="20190113 21:58:36.919"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>standby-controller\\s+"card\\s+(\\d/\\d)\\s+.*"</arg>
</arguments>
<assign>
<var>${match}</var>
<var>${standby_card}</var>
</assign>
<msg timestamp="20190113 21:58:36.923" level="INFO">${match} = standby-controller "card 1/1 (mate card)"</msg>
<msg timestamp="20190113 21:58:36.923" level="INFO">${standby_card} = 1/1</msg>
<status status="PASS" endtime="20190113 21:58:36.924" starttime="20190113 21:58:36.922"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] get system-equipment active-controller ${active_card}, standby-controller ${standby_card}******</arg>
</arguments>
<msg timestamp="20190113 21:58:36.926" level="INFO">******[eutA] get system-equipment active-controller 1/2, standby-controller 1/1******</msg>
<status status="PASS" endtime="20190113 21:58:36.926" starttime="20190113 21:58:36.924"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>active=${active_card}</arg>
<arg>standby=${standby_card}</arg>
</arguments>
<assign>
<var>&amp;{dict_info}</var>
</assign>
<msg timestamp="20190113 21:58:36.929" level="INFO">&amp;{dict_info} = { active=1/2 | standby=1/1 }</msg>
<status status="PASS" endtime="20190113 21:58:36.929" starttime="20190113 21:58:36.927"></status>
</kw>
<msg timestamp="20190113 21:58:36.930" level="INFO">&amp;{dict_card_info} = { active=1/2 | standby=1/1 }</msg>
<status status="PASS" endtime="20190113 21:58:36.930" starttime="20190113 21:58:36.466"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${old_active_Card}</arg>
<arg>&amp;{dict_card_info}[active]</arg>
</arguments>
<msg timestamp="20190113 21:58:36.990" level="INFO">${old_active_Card} = 1/2</msg>
<status status="PASS" endtime="20190113 21:58:36.991" starttime="20190113 21:58:36.988"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${old_standby_Card}</arg>
<arg>&amp;{dict_card_info}[standby]</arg>
</arguments>
<msg timestamp="20190113 21:58:37.077" level="INFO">${old_standby_Card} = 1/1</msg>
<status status="PASS" endtime="20190113 21:58:37.077" starttime="20190113 21:58:37.074"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:2 reboot the system connection interrupt.</arg>
</arguments>
<msg timestamp="20190113 21:58:37.168" level="INFO">STEP:2 reboot the system connection interrupt.</msg>
<status status="PASS" endtime="20190113 21:58:37.169" starttime="20190113 21:58:37.167"></status>
</kw>
<kw name="reload" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: reload operation</doc>
<arguments>
<arg>eutA</arg>
</arguments>
<kw name="release_cmd_adapter" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: cmd adapter in different release</doc>
<arguments>
<arg>${device}</arg>
<arg>${prov_reload_cmd}</arg>
</arguments>
<assign>
<var>${reload_str}</var>
</assign>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>if no 'release' item in topo.yaml set it to DEFAULT</arg>
</arguments>
<msg timestamp="20190113 21:58:37.200" level="INFO">if no 'release' item in topo.yaml set it to DEFAULT</msg>
<status status="PASS" endtime="20190113 21:58:37.200" starttime="20190113 21:58:37.199"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${DEVICES.${device}}</arg>
<arg>release</arg>
</arguments>
<assign>
<var>${passed}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${device}}</arg>
<arg>release</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:37.206" starttime="20190113 21:58:37.202"></status>
</kw>
<msg timestamp="20190113 21:58:37.206" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20190113 21:58:37.207" starttime="20190113 21:58:37.201"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${passed}</arg>
<arg>${DEVICES.${device}.release}</arg>
<arg>DEFAULT</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 21:58:37.209" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 21:58:37.209" starttime="20190113 21:58:37.207"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>get release ${release}</arg>
</arguments>
<msg timestamp="20190113 21:58:37.210" level="INFO">get release AXOS_19_1</msg>
<status status="PASS" endtime="20190113 21:58:37.210" starttime="20190113 21:58:37.209"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>set release to 'DEFAULT' if release is not key in cmd_key dictionary</arg>
</arguments>
<msg timestamp="20190113 21:58:37.212" level="INFO">set release to 'DEFAULT' if release is not key in cmd_key dictionary</msg>
<status status="PASS" endtime="20190113 21:58:37.212" starttime="20190113 21:58:37.211"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${cmd_param}</arg>
<arg>${release}</arg>
</arguments>
<assign>
<var>${passed}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${cmd_param}</arg>
<arg>${release}</arg>
</arguments>
<msg timestamp="20190113 21:58:37.215" level="FAIL">Dictionary does not contain key 'AXOS_19_1'.</msg>
<msg timestamp="20190113 21:58:37.215" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 21:58:37.215" starttime="20190113 21:58:37.213"></status>
</kw>
<msg timestamp="20190113 21:58:37.217" level="INFO">${passed} = False</msg>
<status status="PASS" endtime="20190113 21:58:37.217" starttime="20190113 21:58:37.212"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${passed}</arg>
<arg>${release}</arg>
<arg>DEFAULT</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 21:58:37.218" level="INFO">${release} = DEFAULT</msg>
<status status="PASS" endtime="20190113 21:58:37.219" starttime="20190113 21:58:37.217"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${cmd_var_item}</arg>
</arguments>
<msg timestamp="20190113 21:58:37.220" level="INFO">List is empty.</msg>
<status status="PASS" endtime="20190113 21:58:37.220" starttime="20190113 21:58:37.219"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=','</arg>
<arg>@{cmd_var_item}</arg>
</arguments>
<assign>
<var>${item}</var>
</assign>
<msg timestamp="20190113 21:58:37.222" level="INFO">${item} = </msg>
<status status="PASS" endtime="20190113 21:58:37.222" starttime="20190113 21:58:37.221"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${cmd_param}</arg>
</arguments>
<msg timestamp="20190113 21:58:37.223" level="INFO">Dictionary size is 2 and it contains following items:
AXOS_3_1: 
DEFAULT: all</msg>
<status status="PASS" endtime="20190113 21:58:37.223" starttime="20190113 21:58:37.222"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${item}"=="${EMPTY}"</arg>
<arg>Set Variable</arg>
<arg>&amp;{cmd_param}[${release}]</arg>
<arg>ELSE</arg>
<arg>evaluate</arg>
<arg>'&amp;{cmd_param}[${release}]'%('${item}')</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>&amp;{cmd_param}[${release}]</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:37.227" starttime="20190113 21:58:37.225"></status>
</kw>
<msg timestamp="20190113 21:58:37.228" level="INFO">${cmd_str} = all</msg>
<status status="PASS" endtime="20190113 21:58:37.228" starttime="20190113 21:58:37.224"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>return string is "${cmd_str}" for release ${release}</arg>
</arguments>
<msg timestamp="20190113 21:58:37.229" level="INFO">return string is "all" for release DEFAULT</msg>
<status status="PASS" endtime="20190113 21:58:37.230" starttime="20190113 21:58:37.228"></status>
</kw>
<msg timestamp="20190113 21:58:37.230" level="INFO">${reload_str} = all</msg>
<status status="PASS" endtime="20190113 21:58:37.230" starttime="20190113 21:58:37.197"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>reload ${reload_str} ${option}</arg>
<arg>prompt=Proceed with reload\\? \\[y/N\\]</arg>
</arguments>
<msg timestamp="20190113 21:58:37.233" level="INFO">send session_command, cmd=reload all , prompt={u'Proceed with reload\\? \\[y/N\\]': None}, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:58:37.770" level="INFO">session_command result=reload all 
Warning! Reloading the device will impact services.
No configuration changes
</msg>
<status status="PASS" endtime="20190113 21:58:37.771" starttime="20190113 21:58:37.231"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2s</arg>
</arguments>
<msg timestamp="20190113 21:58:39.775" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20190113 21:58:39.775" starttime="20190113 21:58:37.773"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>y</arg>
<arg>timeout=60</arg>
</arguments>
<msg timestamp="20190113 21:58:39.779" level="INFO">send session_command, cmd=y, prompt=None, timeout=60, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:58:41.932" level="INFO">session_command result=y
NGPON2X4</msg>
<status status="PASS" endtime="20190113 21:58:41.933" starttime="20190113 21:58:39.776"></status>
</kw>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:58:41.970" starttime="20190113 21:58:41.935"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
<arg>Wait for device disconnect</arg>
</arguments>
<msg timestamp="20190113 21:59:11.973" level="INFO">Slept 30 seconds</msg>
<msg timestamp="20190113 21:59:11.974" level="INFO">Wait for device disconnect</msg>
<status status="PASS" endtime="20190113 21:59:11.974" starttime="20190113 21:58:41.971"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>${retry_interval}</arg>
<arg>Run Keyword And Expect Error</arg>
<arg>*</arg>
<arg>Cli</arg>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<kw name="Run Keyword And Expect Error" library="BuiltIn">
<doc>Runs the keyword and checks that the expected error occurred.</doc>
<arguments>
<arg>*</arg>
<arg>Cli</arg>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<msg timestamp="20190113 21:59:11.982" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 21:59:19.389" level="FAIL">SSHLoginException</msg>
<msg timestamp="20190113 21:59:19.389" level="DEBUG">Traceback (most recent call last):
  File "/etc/barista/packages/caferobot/command/adapter.py", line 210, in run_keyword
    return self._keywords_adapter_map[name].run_keyword(name, args, kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 83, in run_keyword
    return self._KEYWORDS_WRAPPERS[name](*args, **kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 140, in _wrap_cli
    result = device.session_command(cmd, p, timeout, newline, retry, int(timeout_exception), exclude_prompt)
  File "/etc/barista/packages/caferobot/command/device/shell.py", line 82, in session_command
    raise e</msg>
<status status="FAIL" endtime="20190113 21:59:19.390" starttime="20190113 21:59:11.979"></status>
</kw>
<status status="PASS" endtime="20190113 21:59:19.399" starttime="20190113 21:59:11.978"></status>
</kw>
<status status="PASS" endtime="20190113 21:59:19.407" starttime="20190113 21:59:11.975"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
<arg>Wait for reload ${reload_str} ${option} finish</arg>
</arguments>
<msg timestamp="20190113 21:59:49.412" level="INFO">Slept 30 seconds</msg>
<msg timestamp="20190113 21:59:49.413" level="INFO">Wait for reload all  finish</msg>
<status status="PASS" endtime="20190113 21:59:49.413" starttime="20190113 21:59:19.410"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>${retry_interval}</arg>
<arg>Verify Cmd Working After Reload</arg>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<kw name="Verify Cmd Working After Reload" library="keyword_common">
<tags>
<tag>@author=chxu</tag>
</tags>
<doc>Verify OLT Image Version matches today's date</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>disconnect</arg>
<arg>${device}</arg>
</arguments>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 21:59:49.460" starttime="20190113 21:59:49.459"></status>
</kw>
<status status="PASS" endtime="20190113 21:59:49.460" starttime="20190113 21:59:49.458"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 21:59:49.464" level="INFO">send session_command, cmd=show version, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:00:13.507" level="FAIL">SSHLoginException</msg>
<msg timestamp="20190113 22:00:13.507" level="DEBUG">Traceback (most recent call last):
  File "/etc/barista/packages/caferobot/command/adapter.py", line 210, in run_keyword
    return self._keywords_adapter_map[name].run_keyword(name, args, kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 83, in run_keyword
    return self._KEYWORDS_WRAPPERS[name](*args, **kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 140, in _wrap_cli
    result = device.session_command(cmd, p, timeout, newline, retry, int(timeout_exception), exclude_prompt)
  File "/etc/barista/packages/caferobot/command/device/shell.py", line 82, in session_command
    raise e</msg>
<status status="FAIL" endtime="20190113 22:00:13.508" starttime="20190113 21:59:49.462"></status>
</kw>
<status status="FAIL" endtime="20190113 22:00:13.508" starttime="20190113 21:59:49.461"></status>
</kw>
<status status="FAIL" endtime="20190113 22:00:13.509" starttime="20190113 21:59:49.456"></status>
</kw>
<kw name="Verify Cmd Working After Reload" library="keyword_common">
<tags>
<tag>@author=chxu</tag>
</tags>
<doc>Verify OLT Image Version matches today's date</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>disconnect</arg>
<arg>${device}</arg>
</arguments>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:00:43.515" starttime="20190113 22:00:43.514"></status>
</kw>
<status status="PASS" endtime="20190113 22:00:43.516" starttime="20190113 22:00:43.512"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:00:43.527" level="INFO">send session_command, cmd=show version, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:01:07.571" level="FAIL">SSHLoginException</msg>
<msg timestamp="20190113 22:01:07.571" level="DEBUG">Traceback (most recent call last):
  File "/etc/barista/packages/caferobot/command/adapter.py", line 210, in run_keyword
    return self._keywords_adapter_map[name].run_keyword(name, args, kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 83, in run_keyword
    return self._KEYWORDS_WRAPPERS[name](*args, **kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 140, in _wrap_cli
    result = device.session_command(cmd, p, timeout, newline, retry, int(timeout_exception), exclude_prompt)
  File "/etc/barista/packages/caferobot/command/device/shell.py", line 82, in session_command
    raise e</msg>
<status status="FAIL" endtime="20190113 22:01:07.571" starttime="20190113 22:00:43.518"></status>
</kw>
<status status="FAIL" endtime="20190113 22:01:07.572" starttime="20190113 22:00:43.516"></status>
</kw>
<status status="FAIL" endtime="20190113 22:01:07.573" starttime="20190113 22:00:43.510"></status>
</kw>
<kw name="Verify Cmd Working After Reload" library="keyword_common">
<tags>
<tag>@author=chxu</tag>
</tags>
<doc>Verify OLT Image Version matches today's date</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>disconnect</arg>
<arg>${device}</arg>
</arguments>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:01:37.581" starttime="20190113 22:01:37.579"></status>
</kw>
<status status="PASS" endtime="20190113 22:01:37.581" starttime="20190113 22:01:37.577"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:01:37.587" level="INFO">send session_command, cmd=show version, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:02:01.633" level="FAIL">SSHLoginException</msg>
<msg timestamp="20190113 22:02:01.634" level="DEBUG">Traceback (most recent call last):
  File "/etc/barista/packages/caferobot/command/adapter.py", line 210, in run_keyword
    return self._keywords_adapter_map[name].run_keyword(name, args, kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 83, in run_keyword
    return self._KEYWORDS_WRAPPERS[name](*args, **kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 140, in _wrap_cli
    result = device.session_command(cmd, p, timeout, newline, retry, int(timeout_exception), exclude_prompt)
  File "/etc/barista/packages/caferobot/command/device/shell.py", line 82, in session_command
    raise e</msg>
<status status="FAIL" endtime="20190113 22:02:01.634" starttime="20190113 22:01:37.585"></status>
</kw>
<status status="FAIL" endtime="20190113 22:02:01.635" starttime="20190113 22:01:37.582"></status>
</kw>
<status status="FAIL" endtime="20190113 22:02:01.635" starttime="20190113 22:01:37.574"></status>
</kw>
<kw name="Verify Cmd Working After Reload" library="keyword_common">
<tags>
<tag>@author=chxu</tag>
</tags>
<doc>Verify OLT Image Version matches today's date</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>disconnect</arg>
<arg>${device}</arg>
</arguments>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:02:31.642" starttime="20190113 22:02:31.640"></status>
</kw>
<status status="PASS" endtime="20190113 22:02:31.643" starttime="20190113 22:02:31.639"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:02:31.649" level="INFO">send session_command, cmd=show version, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:02:55.689" level="FAIL">SSHLoginException</msg>
<msg timestamp="20190113 22:02:55.689" level="DEBUG">Traceback (most recent call last):
  File "/etc/barista/packages/caferobot/command/adapter.py", line 210, in run_keyword
    return self._keywords_adapter_map[name].run_keyword(name, args, kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 83, in run_keyword
    return self._KEYWORDS_WRAPPERS[name](*args, **kwargs)
  File "/etc/barista/packages/caferobot/command/adapter.py", line 140, in _wrap_cli
    result = device.session_command(cmd, p, timeout, newline, retry, int(timeout_exception), exclude_prompt)
  File "/etc/barista/packages/caferobot/command/device/shell.py", line 82, in session_command
    raise e</msg>
<status status="FAIL" endtime="20190113 22:02:55.689" starttime="20190113 22:02:31.645"></status>
</kw>
<status status="FAIL" endtime="20190113 22:02:55.690" starttime="20190113 22:02:31.643"></status>
</kw>
<status status="FAIL" endtime="20190113 22:02:55.691" starttime="20190113 22:02:31.636"></status>
</kw>
<kw name="Verify Cmd Working After Reload" library="keyword_common">
<tags>
<tag>@author=chxu</tag>
</tags>
<doc>Verify OLT Image Version matches today's date</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>disconnect</arg>
<arg>${device}</arg>
</arguments>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:03:25.698" starttime="20190113 22:03:25.696"></status>
</kw>
<status status="PASS" endtime="20190113 22:03:25.699" starttime="20190113 22:03:25.695"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:03:25.703" level="INFO">send session_command, cmd=show version, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:03:31.255" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 22:03:31.255" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 22:03:31.256" starttime="20190113 22:03:25.701"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:03:31.261" starttime="20190113 22:03:31.259"></status>
</kw>
<msg timestamp="20190113 22:03:31.261" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 22:03:31.261" starttime="20190113 22:03:25.699"></status>
</kw>
<kw name="Result Should Not Contain" library="caferobot.result.result.ResultAdapter">
<doc>Fails if ``latest response from CLI`` does contain ``exp``..</doc>
<arguments>
<arg>started: lmd</arg>
</arguments>
<status status="PASS" endtime="20190113 22:03:31.264" starttime="20190113 22:03:31.263"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>\\w+\-\\w+\-\\d+</arg>
</arguments>
<status status="PASS" endtime="20190113 22:03:31.266" starttime="20190113 22:03:31.265"></status>
</kw>
<status status="PASS" endtime="20190113 22:03:31.266" starttime="20190113 22:03:25.692"></status>
</kw>
<status status="PASS" endtime="20190113 22:03:31.268" starttime="20190113 21:59:49.415"></status>
</kw>
<status status="PASS" endtime="20190113 22:03:31.269" starttime="20190113 21:58:37.194"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:3 wait for the system ready connection can work again</arg>
</arguments>
<msg timestamp="20190113 22:03:31.308" level="INFO">STEP:3 wait for the system ready connection can work again</msg>
<status status="PASS" endtime="20190113 22:03:31.309" starttime="20190113 22:03:31.307"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>10s</arg>
<arg>check_card_info</arg>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 22:03:31.369" level="INFO">******[eutA] check card 1/2 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 22:03:31.369" starttime="20190113 22:03:31.368"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:03:31.379" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:03:32.323" level="INFO">session_command result=show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Active)  NGPON2-4  211709602412  N/A       

      PROVISION  CARD                                      SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL    NO      VERSION   
-----------------------------------------------------------------------------
1/2   None       Connected  Controller (Standby)  10GE-12  N/A     N/A       

NGPON2X4</msg>
<msg timestamp="20190113 22:03:32.323" level="INFO">${res} = show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     S...</msg>
<status status="PASS" endtime="20190113 22:03:32.323" starttime="20190113 22:03:31.370"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 22:03:32.332" level="INFO">${pattern} = (?i)1/2\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 22:03:32.332" starttime="20190113 22:03:32.330"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 22:03:32.335" level="FAIL">'show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Active)  NGPON2-4  211709602412  N/A       

      PROVISION  CARD                                      SERIAL  SOFTWARE  
CARD  TYPE       STATE      CARD TYPE             MODEL    NO      VERSION   
-----------------------------------------------------------------------------
1/2   None       Connected  Controller (Standby)  10GE-12  N/A     N/A       

NGPON2X4' does not match '(?i)1/2\s+.*In Service\s+.*'</msg>
<msg timestamp="20190113 22:03:32.335" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 22:03:32.336" starttime="20190113 22:03:32.334"></status>
</kw>
<status status="FAIL" endtime="20190113 22:03:32.336" starttime="20190113 22:03:32.333"></status>
</kw>
<status status="FAIL" endtime="20190113 22:03:32.336" starttime="20190113 22:03:31.366"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 22:03:42.374" level="INFO">******[eutA] check card 1/2 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 22:03:42.374" starttime="20190113 22:03:42.372"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:03:42.376" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:03:50.268" level="INFO">session_command result=show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Active)  NGPON2-4  211709602412  N/A       

      PROVISION  CARD                                                              SOFTWARE  
CARD  TYPE       STATE   CARD TYPE                          MODEL    SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------
1/2   10GE-12    Online  Controller 14 10G ports (Standby)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 22:03:50.269" level="INFO">${res} = show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     S...</msg>
<status status="PASS" endtime="20190113 22:03:50.269" starttime="20190113 22:03:42.375"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 22:03:50.276" level="INFO">${pattern} = (?i)1/2\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 22:03:50.277" starttime="20190113 22:03:50.272"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<msg timestamp="20190113 22:03:50.280" level="FAIL">'show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Active)  NGPON2-4  211709602412  N/A       

      PROVISION  CARD                                                              SOFTWARE  
CARD  TYPE       STATE   CARD TYPE                          MODEL    SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------
1/2   10GE-12    Online  Controller 14 10G ports (Standby)  10GE-12  211804602067  N/A       

NGPON2X4' does not match '(?i)1/2\s+.*In Service\s+.*'</msg>
<msg timestamp="20190113 22:03:50.280" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 22:03:50.281" starttime="20190113 22:03:50.279"></status>
</kw>
<status status="FAIL" endtime="20190113 22:03:50.281" starttime="20190113 22:03:50.278"></status>
</kw>
<status status="FAIL" endtime="20190113 22:03:50.281" starttime="20190113 22:03:42.370"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 22:04:00.287" level="INFO">******[eutA] check card 1/2 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 22:04:00.287" starttime="20190113 22:04:00.285"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:04:00.289" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:04:00.778" level="INFO">session_command result=show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Active)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                        SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                          MODEL    SERIAL NO     VERSION   
-------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Standby)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 22:04:00.779" level="INFO">${res} = show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     S...</msg>
<status status="PASS" endtime="20190113 22:04:00.779" starttime="20190113 22:04:00.287"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 22:04:00.782" level="INFO">${pattern} = (?i)1/2\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 22:04:00.782" starttime="20190113 22:04:00.781"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:00.785" starttime="20190113 22:04:00.784"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:00.786" starttime="20190113 22:04:00.783"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:00.786" starttime="20190113 22:04:00.283"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:00.788" starttime="20190113 22:03:31.365"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>10s</arg>
<arg>check_card_info</arg>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 22:04:00.810" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 22:04:00.810" starttime="20190113 22:04:00.808"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:04:00.813" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:04:01.419" level="INFO">session_command result=show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     SERIAL NO     VERSION   
---------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Active)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                        SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                          MODEL    SERIAL NO     VERSION   
-------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Standby)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 22:04:01.419" level="INFO">${res} = show card
      PROVISION                                                                                SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                 MODEL     S...</msg>
<status status="PASS" endtime="20190113 22:04:01.420" starttime="20190113 22:04:00.811"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 22:04:01.433" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 22:04:01.433" starttime="20190113 22:04:01.431"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:01.436" starttime="20190113 22:04:01.435"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:01.436" starttime="20190113 22:04:01.433"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:01.437" starttime="20190113 22:04:00.806"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:01.439" starttime="20190113 22:04:00.804"></status>
</kw>
<kw type="teardown" name="case teardown">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait until eutA in service</arg>
</arguments>
<msg timestamp="20190113 22:04:01.488" level="INFO">wait until eutA in service</msg>
<status status="PASS" endtime="20190113 22:04:01.488" starttime="20190113 22:04:01.487"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>${retry_interval}</arg>
<arg>Verify Cmd Working After Reload</arg>
<arg>eutA</arg>
<arg>show version</arg>
</arguments>
<kw name="Verify Cmd Working After Reload" library="keyword_common">
<tags>
<tag>@author=chxu</tag>
</tags>
<doc>Verify OLT Image Version matches today's date</doc>
<arguments>
<arg>eutA</arg>
<arg>show version</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>disconnect</arg>
<arg>${device}</arg>
</arguments>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:01.500" starttime="20190113 22:04:01.492"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:01.500" starttime="20190113 22:04:01.491"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:04:01.505" level="INFO">send session_command, cmd=show version, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:04:05.939" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 22:04:05.940" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 22:04:05.940" starttime="20190113 22:04:01.503"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:05.945" starttime="20190113 22:04:05.943"></status>
</kw>
<msg timestamp="20190113 22:04:05.946" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 22:04:05.947" starttime="20190113 22:04:01.501"></status>
</kw>
<kw name="Result Should Not Contain" library="caferobot.result.result.ResultAdapter">
<doc>Fails if ``latest response from CLI`` does contain ``exp``..</doc>
<arguments>
<arg>started: lmd</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:05.951" starttime="20190113 22:04:05.949"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>\\w+\-\\w+\-\\d+</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:05.953" starttime="20190113 22:04:05.951"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:05.953" starttime="20190113 22:04:01.490"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:05.955" starttime="20190113 22:04:01.488"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:05.957" starttime="20190113 22:04:01.485"></status>
</kw>
<doc>1 Provision ip address for craft 1 and login the device login successful
2 reboot the system connection interrupt.
3 wait for the system ready connection can work again</doc>
<tags>
<tag>@author=Min Gu</tag>
<tag>@eut=10GE-12</tag>
<tag>@eut=DualCard</tag>
<tag>@eut=GPON-8r2</tag>
<tag>@feature=Management</tag>
<tag>@globalid=2509260</tag>
<tag>@priority=P2</tag>
<tag>@require=1eut</tag>
<tag>@subFeature=Local Craft Interface Support</tag>
<tag>@tcid=AXOS_E72_PARENT-TC-3750</tag>
<tag>@user_interface=CLI</tag>
</tags>
<status status="PASS" endtime="20190113 22:04:06.022" critical="yes" starttime="20190113 21:58:34.497"></status>
</test>
<status status="PASS" endtime="20190113 22:04:06.100" starttime="20190113 21:58:34.322"></status>
</suite>
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/System/Management/Local_Craft_Interface_Support/test_cases_10ge/tc_Verify_craft_connection_after_switchover_through_CLI_dualcard.robot" id="s1-s1-s1-s1-s1-s1-s1-s1-s3" name="tc Verify craft connection after switchover through CLI dualcard">
<test id="s1-s1-s1-s1-s1-s1-s1-s1-s3-t1" name="tc_Verify_craft_connection_after_switchover_through_CLI_dualcard">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>set eut version and release</arg>
</arguments>
<msg timestamp="20190113 22:04:06.418" level="INFO">set eut version and release</msg>
<status status="PASS" endtime="20190113 22:04:06.418" starttime="20190113 22:04:06.417"></status>
</kw>
<kw name="set_eut_version" library="release_adapter">
<doc>set EUT build and release attribution</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>If device is not specified, get it from topo.yaml ${DEVICES} list</arg>
</arguments>
<msg timestamp="20190113 22:04:06.478" level="INFO">If device is not specified, get it from topo.yaml &lt;cafe.core.utils.Param object at 0x7f088e347d50&gt; list</msg>
<status status="PASS" endtime="20190113 22:04:06.478" starttime="20190113 22:04:06.477"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${device}'</arg>
<arg>Create List</arg>
<arg>${device}</arg>
<arg>ELSE</arg>
<arg>get dictionary keys</arg>
<arg>${DEVICES}</arg>
</arguments>
<assign>
<var>${keys}</var>
</assign>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${DEVICES}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:06.481" starttime="20190113 22:04:06.480"></status>
</kw>
<msg timestamp="20190113 22:04:06.481" level="INFO">${keys} = ['eutA']</msg>
<status status="PASS" endtime="20190113 22:04:06.481" starttime="20190113 22:04:06.479"></status>
</kw>
<kw type="for" name="${eut} IN [ @{keys} ]">
<kw type="foritem" name="${eut} = eutA">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current eut is ${eut}, type is ${DEVICES.${eut}.type}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:06.484" starttime="20190113 22:04:06.483"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${DEVICES.${eut}.type}'!='AXOS'</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:06.487" starttime="20190113 22:04:06.485"></status>
</kw>
<kw name="get_eut_version" library="release_adapter">
<tags>
<tag>@author=llin</tag>
</tags>
<doc>this is the keyword used to get single device's build information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>cli</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:04:06.491" level="INFO">send session_command, cmd=cli, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:04:07.009" level="INFO">session_command result=cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG state persistence control commands
  clear                 - Clear object data
  clock                 - Modify clock
  configure             - Manipulate software configuration information
  copy                  - Copy files
  cpe-upgrade:cpe       - CPE operation
  debug                 - 
  delete                - Delete files
  devtools              - Enable/disable development tools
  download              - Download files
  enable                - Enable EXEC commands
  exit                  - Exit the management session
  folder                - 
  generate              - Generate files
  idle-timeout          - Configure idle timeout
  install               - 
  lock                  - lock a datastore
  logout                - Logout a user
  manual                - Manual operation with alarms
  no                    - Negate a command or set its defaults
  ofa-connect           - Open Flow Connect
  ofa-listener          - Open Flow Listener
  ofa-port              - Open Flow port
  ont-eth               - ONT-ETH efm-loopback-status mode
  ont-firmware-upgrade  - Start software download
  ont-simulation        - ONT simulation commands
  ont-upgrade           - ONT upgrade commands
  paginate              - Paginate output from CLI commands
  perform               - Perform an operation
  ping                  - Ping IP address
  ping6                 - Ping IPv6 address
  quit                  - Exit the management session
  redundancy            - redundancy switchover commands
  reload                - Reboot the current card
  remove-dynamic-policy - 
  replay                - Replay card-config
  restart               - Restart Diameter daemon
  run                   - 
  send                  - Send message to terminal of one or all users
  session               - 
  show                  - Show information about the system
  ssh                   - ssh command
  start                 - Start an operation
  stop                  - Stop an operation
  switch                - Switch network clock
  tcpdump               - tcpdump command
  telnet                - telnet command
  templatize            - Find patterns in subtree.
  terminal              - Set terminal type
  timestamp             - Enable/disable the display of timestamp
  traceroute            - Traceroute IP address
  uninstall             - 
  unlock                - unlock a datastore
  upgrade               - Upgrade commands
  upload                - Upload files
  verify                - 
NGPON2X4</msg>
<msg timestamp="20190113 22:04:07.010" level="INFO">${res} = cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG s...</msg>
<status status="PASS" endtime="20190113 22:04:07.010" starttime="20190113 22:04:06.488"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:04:07.015" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:04:07.539" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 22:04:07.539" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 22:04:07.539" starttime="20190113 22:04:07.012"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>(description|details)\\s*(.*)\r</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 22:04:07.542" level="INFO">${matches} = ['IBAXOS191-CI-330', 'IBAXOS191-CI-330']</msg>
<status status="PASS" endtime="20190113 22:04:07.542" starttime="20190113 22:04:07.541"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:07.544" starttime="20190113 22:04:07.543"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 22:04:07.546" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 22:04:07.546" starttime="20190113 22:04:07.545"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${build}</arg>
</arguments>
<msg timestamp="20190113 22:04:07.547" level="INFO">we've got the build informations : IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 22:04:07.548" starttime="20190113 22:04:07.546"></status>
</kw>
<msg timestamp="20190113 22:04:07.548" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 22:04:07.549" starttime="20190113 22:04:06.487"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>build</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:07.553" starttime="20190113 22:04:07.552"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s build is ${DEVICES.${eut}.build}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:07.555" starttime="20190113 22:04:07.554"></status>
</kw>
<kw name="get_eut_distro" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to get single device's distro information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:04:07.562" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:04:08.064" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 22:04:08.065" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 22:04:08.065" starttime="20190113 22:04:07.557"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>distro\\s*"(.*)"\r</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 22:04:08.068" level="INFO">${matches} = ['IB-AXOS-19.1 2019.01.12 02:16:30', 'IB-AXOS-19.1 2019.01.12 02:16:30']</msg>
<status status="PASS" endtime="20190113 22:04:08.069" starttime="20190113 22:04:08.067"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.070" starttime="20190113 22:04:08.069"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<msg timestamp="20190113 22:04:08.072" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 22:04:08.072" starttime="20190113 22:04:08.071"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${distro}</arg>
</arguments>
<msg timestamp="20190113 22:04:08.073" level="INFO">we've got the build informations : IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 22:04:08.073" starttime="20190113 22:04:08.072"></status>
</kw>
<msg timestamp="20190113 22:04:08.074" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 22:04:08.074" starttime="20190113 22:04:07.556"></status>
</kw>
<kw name="mapping_distro_to_release" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to mapping build id to release name</doc>
<arguments>
<arg>${distro}</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${distro}</arg>
<arg>\\s+.*$</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 22:04:08.078" level="INFO">${build} = IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 22:04:08.078" starttime="20190113 22:04:08.077"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the branch of the build is : ${build}</arg>
</arguments>
<msg timestamp="20190113 22:04:08.080" level="INFO">the branch of the build is : IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 22:04:08.080" starttime="20190113 22:04:08.079"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>open('${map}').readlines()</arg>
</arguments>
<assign>
<var>${fileHandler}</var>
</assign>
<msg timestamp="20190113 22:04:08.083" level="INFO">${fileHandler} = ['Release, Branch\n', 'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2\n', 'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-...</msg>
<status status="PASS" endtime="20190113 22:04:08.083" starttime="20190113 22:04:08.080"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the mapping file content : ${fileHandler}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.084" starttime="20190113 22:04:08.083"></status>
</kw>
<kw name="Convert To List" library="Collections">
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.086" starttime="20190113 22:04:08.085"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 22:04:08.087" level="INFO">${rowIndex} = 0</msg>
<status status="PASS" endtime="20190113 22:04:08.087" starttime="20190113 22:04:08.086"></status>
</kw>
<kw type="for" name="${rowitem} IN [ @{fileHandler} ]">
<kw type="foritem" name="${rowitem} = Release, Branch&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.090" starttime="20190113 22:04:08.089"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 22:04:08.092" level="FAIL">'Release, Branch
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 22:04:08.093" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 22:04:08.093" starttime="20190113 22:04:08.091"></status>
</kw>
<msg timestamp="20190113 22:04:08.093" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 22:04:08.093" starttime="20190113 22:04:08.090"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 22:04:08.095" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 22:04:08.095" starttime="20190113 22:04:08.094"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.096" starttime="20190113 22:04:08.096"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 22:04:08.098" level="INFO">${rowIndex} = 1</msg>
<status status="PASS" endtime="20190113 22:04:08.098" starttime="20190113 22:04:08.097"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:08.098" starttime="20190113 22:04:08.088"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.102" starttime="20190113 22:04:08.099"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 22:04:08.104" level="FAIL">'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 22:04:08.104" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 22:04:08.105" starttime="20190113 22:04:08.103"></status>
</kw>
<msg timestamp="20190113 22:04:08.105" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 22:04:08.105" starttime="20190113 22:04:08.102"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 22:04:08.107" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 22:04:08.107" starttime="20190113 22:04:08.106"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.108" starttime="20190113 22:04:08.108"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 22:04:08.110" level="INFO">${rowIndex} = 2</msg>
<status status="PASS" endtime="20190113 22:04:08.110" starttime="20190113 22:04:08.109"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:08.111" starttime="20190113 22:04:08.099"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.113" starttime="20190113 22:04:08.112"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 22:04:08.116" level="FAIL">'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 22:04:08.116" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 22:04:08.117" starttime="20190113 22:04:08.115"></status>
</kw>
<msg timestamp="20190113 22:04:08.117" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 22:04:08.117" starttime="20190113 22:04:08.114"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 22:04:08.119" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 22:04:08.119" starttime="20190113 22:04:08.118"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.120" starttime="20190113 22:04:08.119"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 22:04:08.122" level="INFO">${rowIndex} = 3</msg>
<status status="PASS" endtime="20190113 22:04:08.122" starttime="20190113 22:04:08.121"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:08.122" starttime="20190113 22:04:08.111"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.125" starttime="20190113 22:04:08.124"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 22:04:08.128" level="FAIL">'AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 22:04:08.129" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 22:04:08.129" starttime="20190113 22:04:08.127"></status>
</kw>
<msg timestamp="20190113 22:04:08.129" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 22:04:08.129" starttime="20190113 22:04:08.126"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 22:04:08.131" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 22:04:08.131" starttime="20190113 22:04:08.130"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.132" starttime="20190113 22:04:08.131"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 22:04:08.134" level="INFO">${rowIndex} = 4</msg>
<status status="PASS" endtime="20190113 22:04:08.134" starttime="20190113 22:04:08.133"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:08.134" starttime="20190113 22:04:08.123"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.137" starttime="20190113 22:04:08.135"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 22:04:08.140" level="FAIL">'AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 22:04:08.140" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 22:04:08.140" starttime="20190113 22:04:08.139"></status>
</kw>
<msg timestamp="20190113 22:04:08.140" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 22:04:08.140" starttime="20190113 22:04:08.137"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 22:04:08.142" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 22:04:08.142" starttime="20190113 22:04:08.141"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.143" starttime="20190113 22:04:08.143"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 22:04:08.145" level="INFO">${rowIndex} = 5</msg>
<status status="PASS" endtime="20190113 22:04:08.145" starttime="20190113 22:04:08.144"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:08.145" starttime="20190113 22:04:08.134"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_19_1, IB-AXOS-19.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.148" starttime="20190113 22:04:08.147"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.150" starttime="20190113 22:04:08.149"></status>
</kw>
<msg timestamp="20190113 22:04:08.151" level="INFO">${contain_build} = True</msg>
<status status="PASS" endtime="20190113 22:04:08.151" starttime="20190113 22:04:08.148"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 22:04:08.152" level="INFO">build IB-AXOS-19.1 search result is True</msg>
<status status="PASS" endtime="20190113 22:04:08.152" starttime="20190113 22:04:08.151"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<msg timestamp="20190113 22:04:08.154" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20190113 22:04:08.154" starttime="20190113 22:04:08.153"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:08.154" starttime="20190113 22:04:08.146"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:08.155" starttime="20190113 22:04:08.087"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${contain_build}'!='True'</arg>
<arg>NONE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.156" starttime="20190113 22:04:08.155"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we find the release info in ${rowIndex} row</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.157" starttime="20190113 22:04:08.156"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<assign>
<var>${len}</var>
</assign>
<msg timestamp="20190113 22:04:08.159" level="INFO">Length is 6</msg>
<msg timestamp="20190113 22:04:08.159" level="INFO">${len} = 6</msg>
<status status="PASS" endtime="20190113 22:04:08.160" starttime="20190113 22:04:08.158"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>@{fileHandler}[${rowIndex}]</arg>
</arguments>
<assign>
<var>${releaseStr}</var>
</assign>
<msg timestamp="20190113 22:04:08.161" level="DEBUG">Argument types are:
&lt;type 'str'&gt;</msg>
<msg timestamp="20190113 22:04:08.161" level="INFO">${releaseStr} = AXOS_19_1, IB-AXOS-19.1
</msg>
<status status="PASS" endtime="20190113 22:04:08.161" starttime="20190113 22:04:08.160"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>release=${releaseStr}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.163" starttime="20190113 22:04:08.162"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${releaseStr}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>@{matches}</var>
</assign>
<msg timestamp="20190113 22:04:08.164" level="INFO">@{matches} = [ AXOS_19_1 |  IB-AXOS-19.1
 ]</msg>
<status status="PASS" endtime="20190113 22:04:08.164" starttime="20190113 22:04:08.163"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.166" starttime="20190113 22:04:08.165"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 22:04:08.167" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 22:04:08.167" starttime="20190113 22:04:08.166"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the release information: ${release}.</arg>
</arguments>
<msg timestamp="20190113 22:04:08.169" level="INFO">we've got the release information: AXOS_19_1.</msg>
<status status="PASS" endtime="20190113 22:04:08.169" starttime="20190113 22:04:08.168"></status>
</kw>
<msg timestamp="20190113 22:04:08.170" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 22:04:08.170" starttime="20190113 22:04:08.076"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'NONE'=='${release}'</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.172" starttime="20190113 22:04:08.171"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>release</arg>
<arg>${release}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.173" starttime="20190113 22:04:08.172"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s release is ${DEVICES.${eut}.release}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:08.175" starttime="20190113 22:04:08.174"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:08.175" starttime="20190113 22:04:06.482"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:08.176" starttime="20190113 22:04:06.482"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:08.177" starttime="20190113 22:04:06.475"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:1 Provision ip address for craft 1 and login the device login successful</arg>
</arguments>
<msg timestamp="20190113 22:04:08.230" level="INFO">STEP:1 Provision ip address for craft 1 and login the device login successful</msg>
<status status="PASS" endtime="20190113 22:04:08.231" starttime="20190113 22:04:08.229"></status>
</kw>
<kw name="get_system_equipment_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get "show system-equipment" command information,</doc>
<arguments>
<arg>eutA</arg>
</arguments>
<assign>
<var>&amp;{dict_card_info}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show system-equipment</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:04:08.300" level="INFO">send session_command, cmd=show system-equipment, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:04:08.839" level="INFO">session_command result=show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/1 (this card)"
 standby-controller "card 1/2 (mate card)"
NGPON2X4</msg>
<msg timestamp="20190113 22:04:08.839" level="INFO">${res} = show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/1 (this card)"
 standby-controller "card 1/2 (mate card)"
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:04:08.839" starttime="20190113 22:04:08.291"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>active-controller\\s+"card\\s+(\\d/\\d)\\s+.*"</arg>
</arguments>
<assign>
<var>${match}</var>
<var>${active_card}</var>
</assign>
<msg timestamp="20190113 22:04:08.843" level="INFO">${match} = active-controller  "card 1/1 (this card)"</msg>
<msg timestamp="20190113 22:04:08.843" level="INFO">${active_card} = 1/1</msg>
<status status="PASS" endtime="20190113 22:04:08.843" starttime="20190113 22:04:08.841"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>standby-controller\\s+"card\\s+(\\d/\\d)\\s+.*"</arg>
</arguments>
<assign>
<var>${match}</var>
<var>${standby_card}</var>
</assign>
<msg timestamp="20190113 22:04:08.845" level="INFO">${match} = standby-controller "card 1/2 (mate card)"</msg>
<msg timestamp="20190113 22:04:08.846" level="INFO">${standby_card} = 1/2</msg>
<status status="PASS" endtime="20190113 22:04:08.846" starttime="20190113 22:04:08.844"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] get system-equipment active-controller ${active_card}, standby-controller ${standby_card}******</arg>
</arguments>
<msg timestamp="20190113 22:04:08.848" level="INFO">******[eutA] get system-equipment active-controller 1/1, standby-controller 1/2******</msg>
<status status="PASS" endtime="20190113 22:04:08.848" starttime="20190113 22:04:08.846"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>active=${active_card}</arg>
<arg>standby=${standby_card}</arg>
</arguments>
<assign>
<var>&amp;{dict_info}</var>
</assign>
<msg timestamp="20190113 22:04:08.850" level="INFO">&amp;{dict_info} = { active=1/1 | standby=1/2 }</msg>
<status status="PASS" endtime="20190113 22:04:08.850" starttime="20190113 22:04:08.849"></status>
</kw>
<msg timestamp="20190113 22:04:08.852" level="INFO">&amp;{dict_card_info} = { active=1/1 | standby=1/2 }</msg>
<status status="PASS" endtime="20190113 22:04:08.852" starttime="20190113 22:04:08.290"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${old_active_Card}</arg>
<arg>&amp;{dict_card_info}[active]</arg>
</arguments>
<msg timestamp="20190113 22:04:08.899" level="INFO">${old_active_Card} = 1/1</msg>
<status status="PASS" endtime="20190113 22:04:08.899" starttime="20190113 22:04:08.897"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${old_standby_Card}</arg>
<arg>&amp;{dict_card_info}[standby]</arg>
</arguments>
<msg timestamp="20190113 22:04:08.947" level="INFO">${old_standby_Card} = 1/2</msg>
<status status="PASS" endtime="20190113 22:04:08.947" starttime="20190113 22:04:08.944"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:2 Perform switchover through CLI connection can work again after seconds interrupt.</arg>
</arguments>
<msg timestamp="20190113 22:04:08.994" level="INFO">STEP:2 Perform switchover through CLI connection can work again after seconds interrupt.</msg>
<status status="PASS" endtime="20190113 22:04:08.995" starttime="20190113 22:04:08.993"></status>
</kw>
<kw name="redundancy_switchover" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>redundancy switchover</doc>
<arguments>
<arg>eutA</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>redundancy ${switch_type}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:04:09.044" level="INFO">send session_command, cmd=redundancy switchover, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:04:09.477" level="INFO">session_command result=redundancy switchover
status Controller Switch-over triggered successfully from 1/1 to 1/2 at 2019-01-13 21:46:20:946 PST
NGPON2X4</msg>
<msg timestamp="20190113 22:04:09.478" level="INFO">${res} = redundancy switchover
status Controller Switch-over triggered successfully from 1/1 to 1/2 at 2019-01-13 21:46:20:946 PST
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:04:09.478" starttime="20190113 22:04:09.039"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:09.480" starttime="20190113 22:04:09.479"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:09.481" starttime="20190113 22:04:09.036"></status>
</kw>
<kw name="Disconnect" library="caferobot.command.adapter.CliAdapter">
<doc>Disconnect the connection to the device which named connection_name</doc>
<arguments>
<arg>${device}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:09.516" starttime="20190113 22:04:09.482"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30s</arg>
<arg>Wait for redundancy ${switch_type}</arg>
</arguments>
<msg timestamp="20190113 22:04:39.520" level="INFO">Slept 30 seconds</msg>
<msg timestamp="20190113 22:04:39.520" level="INFO">Wait for redundancy switchover</msg>
<status status="PASS" endtime="20190113 22:04:39.520" starttime="20190113 22:04:09.516"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>${retry_interval}</arg>
<arg>Cli</arg>
<arg>${device}</arg>
<arg>show switchover status</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show switchover status</arg>
</arguments>
<msg timestamp="20190113 22:04:39.526" level="INFO">send session_command, cmd=show switchover status, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:04:55.935" level="INFO">session_command result=show switchover status
switchover status
 card-location                1/2
 system-state                 ACTIVE
 switchover-reason            "User Initiated Normal-mode"
 switchover-status            Successful
 switchover-start-time        "2019-01-13 21:46:23:327 PST"
 switchover-end-time          "2019-01-13 21:46:25:131 PST"
 switchover-dm-in-sync-status "All DMs in sync"
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:04:55.935" starttime="20190113 22:04:39.525"></status>
</kw>
<msg timestamp="20190113 22:04:55.936" level="INFO">${res} = show switchover status
switchover status
 card-location                1/2
 system-state                 ACTIVE
 switchover-reason            "User Initiated Normal-mode"
 switchover-status      ...</msg>
<status status="PASS" endtime="20190113 22:04:55.937" starttime="20190113 22:04:39.521"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:55.938" starttime="20190113 22:04:09.035"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${p_check_switchover_status}</arg>
<arg>10s</arg>
<arg>check_switchover_status</arg>
<arg>eutA</arg>
<arg>switchover-dm-in-sync-status="All DMs in sync"</arg>
</arguments>
<kw name="check_switchover_status" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: perform ont related operations</doc>
<arguments>
<arg>eutA</arg>
<arg>switchover-dm-in-sync-status="All DMs in sync"</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show switchover status</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:04:55.978" level="INFO">send session_command, cmd=show switchover status, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:04:56.431" level="INFO">session_command result=show switchover status
switchover status
 card-location                1/2
 system-state                 ACTIVE
 switchover-reason            "User Initiated Normal-mode"
 switchover-status            Successful
 switchover-start-time        "2019-01-13 21:46:23:327 PST"
 switchover-end-time          "2019-01-13 21:46:25:131 PST"
 switchover-dm-in-sync-status "All DMs in sync"
NGPON2X4</msg>
<msg timestamp="20190113 22:04:56.431" level="INFO">${res} = show switchover status
switchover status
 card-location                1/2
 system-state                 ACTIVE
 switchover-reason            "User Initiated Normal-mode"
 switchover-status      ...</msg>
<status status="PASS" endtime="20190113 22:04:56.431" starttime="20190113 22:04:55.969"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{dict_check_item.keys()} ]">
<kw type="foritem" name="${check_item} = switchover-dm-in-sync-status">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 22:04:56.436" level="INFO">${pattern} = (?i)switchover-dm-in-sync-status\s+.*"All DMs in sync"</msg>
<status status="PASS" endtime="20190113 22:04:56.436" starttime="20190113 22:04:56.435"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check switchover status:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 22:04:56.437" level="INFO">******[eutA] check switchover status:(?i)switchover-dm-in-sync-status\s+.*"All DMs in sync", contain=yes******</msg>
<status status="PASS" endtime="20190113 22:04:56.438" starttime="20190113 22:04:56.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:56.441" starttime="20190113 22:04:56.440"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:56.441" starttime="20190113 22:04:56.438"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:56.442" starttime="20190113 22:04:56.434"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:56.442" starttime="20190113 22:04:56.433"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:56.442" starttime="20190113 22:04:55.968"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:56.444" starttime="20190113 22:04:55.966"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 22:04:56.490" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 22:04:56.490" starttime="20190113 22:04:56.488"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:04:56.493" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:04:57.041" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 22:04:57.042" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 22:04:57.042" starttime="20190113 22:04:56.490"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 22:04:57.045" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 22:04:57.045" starttime="20190113 22:04:57.044"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:57.048" starttime="20190113 22:04:57.047"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:57.048" starttime="20190113 22:04:57.046"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:57.049" starttime="20190113 22:04:56.487"></status>
</kw>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 22:04:57.090" level="INFO">******[eutA] check card 1/2 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 22:04:57.090" starttime="20190113 22:04:57.089"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:04:57.093" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:04:57.622" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 22:04:57.622" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 22:04:57.622" starttime="20190113 22:04:57.091"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 22:04:57.625" level="INFO">${pattern} = (?i)1/2\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 22:04:57.625" starttime="20190113 22:04:57.624"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:57.628" starttime="20190113 22:04:57.627"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:57.629" starttime="20190113 22:04:57.626"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:57.629" starttime="20190113 22:04:57.088"></status>
</kw>
<kw name="check_system_equipment_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show system-equipment" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>active-controller=${old_standby_Card}</arg>
<arg>standby-controller=${old_active_Card}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show system-equipment</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:04:57.684" level="INFO">send session_command, cmd=show system-equipment, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:04:58.143" level="INFO">session_command result=show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<msg timestamp="20190113 22:04:58.143" level="INFO">${res} = show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:04:58.143" starttime="20190113 22:04:57.682"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{dict_check_item.keys()} ]">
<kw type="foritem" name="${check_item} = active-controller">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 22:04:58.149" level="INFO">${pattern} = (?i)active-controller\s+.*1/2</msg>
<status status="PASS" endtime="20190113 22:04:58.149" starttime="20190113 22:04:58.148"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check system-equipment:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 22:04:58.150" level="INFO">******[eutA] check system-equipment:(?i)active-controller\s+.*1/2, contain=yes******</msg>
<status status="PASS" endtime="20190113 22:04:58.151" starttime="20190113 22:04:58.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:58.153" starttime="20190113 22:04:58.152"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:58.154" starttime="20190113 22:04:58.151"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:58.154" starttime="20190113 22:04:58.147"></status>
</kw>
<kw type="foritem" name="${check_item} = standby-controller">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 22:04:58.156" level="INFO">${pattern} = (?i)standby-controller\s+.*1/1</msg>
<status status="PASS" endtime="20190113 22:04:58.156" starttime="20190113 22:04:58.155"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check system-equipment:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 22:04:58.158" level="INFO">******[eutA] check system-equipment:(?i)standby-controller\s+.*1/1, contain=yes******</msg>
<status status="PASS" endtime="20190113 22:04:58.158" starttime="20190113 22:04:58.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:58.160" starttime="20190113 22:04:58.160"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:58.161" starttime="20190113 22:04:58.158"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:58.161" starttime="20190113 22:04:58.154"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:58.161" starttime="20190113 22:04:58.145"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:58.162" starttime="20190113 22:04:57.680"></status>
</kw>
<kw name="check_system_equipment_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show system-equipment" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>active-controller=${old_active_Card}</arg>
<arg>standby-controller=${old_standby_Card}</arg>
<arg>contain=no</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show system-equipment</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:04:58.204" level="INFO">send session_command, cmd=show system-equipment, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:04:58.638" level="INFO">session_command result=show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<msg timestamp="20190113 22:04:58.639" level="INFO">${res} = show system-equipment
system-equipment
 equipment-type     "Multi Card"
 active-controller  "card 1/2 (this card)"
 standby-controller "card 1/1 (mate card)"
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:04:58.639" starttime="20190113 22:04:58.201"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{dict_check_item.keys()} ]">
<kw type="foritem" name="${check_item} = active-controller">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 22:04:58.643" level="INFO">${pattern} = (?i)active-controller\s+.*1/1</msg>
<status status="PASS" endtime="20190113 22:04:58.643" starttime="20190113 22:04:58.642"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check system-equipment:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 22:04:58.645" level="INFO">******[eutA] check system-equipment:(?i)active-controller\s+.*1/1, contain=no******</msg>
<status status="PASS" endtime="20190113 22:04:58.645" starttime="20190113 22:04:58.644"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Not Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` matches ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:58.648" starttime="20190113 22:04:58.647"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:58.648" starttime="20190113 22:04:58.646"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:58.649" starttime="20190113 22:04:58.641"></status>
</kw>
<kw type="foritem" name="${check_item} = standby-controller">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>(?i)${check_item}\\s+.*${dict_check_item['${check_item}']}</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 22:04:58.651" level="INFO">${pattern} = (?i)standby-controller\s+.*1/2</msg>
<status status="PASS" endtime="20190113 22:04:58.651" starttime="20190113 22:04:58.650"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check system-equipment:${pattern}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 22:04:58.653" level="INFO">******[eutA] check system-equipment:(?i)standby-controller\s+.*1/2, contain=no******</msg>
<status status="PASS" endtime="20190113 22:04:58.653" starttime="20190113 22:04:58.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>Should Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>Should Not Match Regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Not Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` matches ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:58.655" starttime="20190113 22:04:58.654"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:58.656" starttime="20190113 22:04:58.653"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:58.656" starttime="20190113 22:04:58.649"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:58.656" starttime="20190113 22:04:58.640"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:58.657" starttime="20190113 22:04:58.200"></status>
</kw>
<kw type="teardown" name="case teardown">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait until eutA in service</arg>
</arguments>
<msg timestamp="20190113 22:04:58.707" level="INFO">wait until eutA in service</msg>
<status status="PASS" endtime="20190113 22:04:58.708" starttime="20190113 22:04:58.706"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>10s</arg>
<arg>check_card_info</arg>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_active_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 22:04:58.713" level="INFO">******[eutA] check card 1/1 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 22:04:58.713" starttime="20190113 22:04:58.712"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:04:58.716" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:04:59.223" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 22:04:59.224" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 22:04:59.224" starttime="20190113 22:04:58.714"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 22:04:59.227" level="INFO">${pattern} = (?i)1/1\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 22:04:59.227" starttime="20190113 22:04:59.226"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:59.230" starttime="20190113 22:04:59.229"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:59.230" starttime="20190113 22:04:59.228"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:59.231" starttime="20190113 22:04:58.710"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:59.232" starttime="20190113 22:04:58.709"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>${retry_time}</arg>
<arg>10s</arg>
<arg>check_card_info</arg>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="check_card_info" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show card" command information</doc>
<arguments>
<arg>eutA</arg>
<arg>${old_standby_Card}</arg>
<arg>In Service</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>******[${device}] check card ${card_num} ${check_item}, contain=${contain}******</arg>
</arguments>
<msg timestamp="20190113 22:04:59.237" level="INFO">******[eutA] check card 1/2 In Service, contain=yes******</msg>
<status status="PASS" endtime="20190113 22:04:59.238" starttime="20190113 22:04:59.236"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show card</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:04:59.240" level="INFO">send session_command, cmd=show card, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:04:59.761" level="INFO">session_command result=show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL     SERIAL NO     VERSION   
----------------------------------------------------------------------------------------------------------
1/1   NGPON2-4   In Service  Controller 4 10G, 4 NGPON ports (Standby)  NGPON2-4  211709602412  N/A       

      PROVISION                                                                       SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                         MODEL    SERIAL NO     VERSION   
------------------------------------------------------------------------------------------------
1/2   10GE-12    In Service  Controller 14 10G ports (Active)  10GE-12  211804602067  N/A       

NGPON2X4</msg>
<msg timestamp="20190113 22:04:59.761" level="INFO">${res} = show card
      PROVISION                                                                                 SOFTWARE  
CARD  TYPE       CARD STATE  CARD TYPE                                  MODEL    ...</msg>
<status status="PASS" endtime="20190113 22:04:59.762" starttime="20190113 22:04:59.238"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'Active'=='${check_item}' or 'Standby'=='${check_item}'</arg>
<arg>(?i)${card_num}\\s+.*\\(${check_item}\\)\\s+.*</arg>
<arg>(?i)${card_num}\\s+.*${check_item}\\s+.*</arg>
</arguments>
<assign>
<var>${pattern}</var>
</assign>
<msg timestamp="20190113 22:04:59.765" level="INFO">${pattern} = (?i)1/2\s+.*In Service\s+.*</msg>
<status status="PASS" endtime="20190113 22:04:59.766" starttime="20190113 22:04:59.764"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"yes"=="${contain}"</arg>
<arg>should match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
<arg>ELSE</arg>
<arg>should not match regexp</arg>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${pattern}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:04:59.769" starttime="20190113 22:04:59.768"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:59.770" starttime="20190113 22:04:59.766"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:59.771" starttime="20190113 22:04:59.235"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:59.773" starttime="20190113 22:04:59.234"></status>
</kw>
<status status="PASS" endtime="20190113 22:04:59.774" starttime="20190113 22:04:58.705"></status>
</kw>
<doc>1 Provision ip address for craft 1 and login the device login successful
2 Perform switchover through CLI connection can work again after seconds interrupt.</doc>
<tags>
<tag>@author=Min Gu</tag>
<tag>@eut=10GE-12</tag>
<tag>@eut=DualCard</tag>
<tag>@eut=GPON-8r2</tag>
<tag>@feature=Management</tag>
<tag>@globalid=2509257</tag>
<tag>@priority=P2</tag>
<tag>@require=1eut</tag>
<tag>@subFeature=Local Craft Interface Support</tag>
<tag>@tcid=AXOS_E72_PARENT-TC-3747</tag>
<tag>@user_interface=CLI</tag>
</tags>
<status status="PASS" endtime="20190113 22:04:59.832" critical="yes" starttime="20190113 22:04:06.331"></status>
</test>
<status status="PASS" endtime="20190113 22:04:59.976" starttime="20190113 22:04:06.160"></status>
</suite>
<doc>Initialization file of feature_x test suites
It is for putting suite level setup and teardown keywords
And setting the forced tags for all the test cases in "feature_x" folder and its subfolder</doc>
<status status="PASS" endtime="20190113 22:05:00.045" starttime="20190113 21:53:58.867"></status>
</suite>
<status status="PASS" endtime="20190113 22:05:00.052" starttime="20190113 21:53:58.863"></status>
</suite>
<status status="PASS" endtime="20190113 22:05:00.060" starttime="20190113 21:53:58.860"></status>
</suite>
<status status="PASS" endtime="20190113 22:05:00.066" starttime="20190113 21:53:58.857"></status>
</suite>
<status status="PASS" endtime="20190113 22:05:00.072" starttime="20190113 21:53:58.853"></status>
</suite>
<status status="PASS" endtime="20190113 22:05:00.085" starttime="20190113 21:53:58.850"></status>
</suite>
<status status="PASS" endtime="20190113 22:05:00.097" starttime="20190113 21:53:58.846"></status>
</suite>
<status status="PASS" endtime="20190113 22:05:00.103" starttime="20190113 21:53:58.745"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="3">@author=Min Gu</stat>
<stat fail="0" pass="3">@eut=10GE-12</stat>
<stat fail="0" pass="3">@eut=DualCard</stat>
<stat fail="0" pass="3">@eut=GPON-8r2</stat>
<stat fail="0" pass="3">@feature=Management</stat>
<stat fail="0" pass="1">@globalid=2509257</stat>
<stat fail="0" pass="1">@globalid=2509259</stat>
<stat fail="0" pass="1">@globalid=2509260</stat>
<stat fail="0" pass="3">@priority=P2</stat>
<stat fail="0" pass="3">@require=1eut</stat>
<stat fail="0" pass="3">@subFeature=Local Craft Interface Support</stat>
<stat fail="0" pass="1">@tcid=AXOS_E72_PARENT-TC-3747</stat>
<stat fail="0" pass="1">@tcid=AXOS_E72_PARENT-TC-3749</stat>
<stat fail="0" pass="1">@tcid=AXOS_E72_PARENT-TC-3750</stat>
<stat fail="0" pass="3">@user_interface=CLI</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="AXOS" pass="3">AXOS</stat>
<stat fail="0" id="s1-s1" name="AXOS-automation" pass="3">AXOS.AXOS-automation</stat>
<stat fail="0" id="s1-s1-s1" name="Milan" pass="3">AXOS.AXOS-automation.Milan</stat>
<stat fail="0" id="s1-s1-s1-s1" name="ST Test Cases" pass="3">AXOS.AXOS-automation.Milan.ST Test Cases</stat>
<stat fail="0" id="s1-s1-s1-s1-s1" name="System" pass="3">AXOS.AXOS-automation.Milan.ST Test Cases.System</stat>
<stat fail="0" id="s1-s1-s1-s1-s1-s1" name="Management" pass="3">AXOS.AXOS-automation.Milan.ST Test Cases.System.Management</stat>
<stat fail="0" id="s1-s1-s1-s1-s1-s1-s1" name="Local Craft Interface Support" pass="3">AXOS.AXOS-automation.Milan.ST Test Cases.System.Management.Local Craft Interface Support</stat>
<stat fail="0" id="s1-s1-s1-s1-s1-s1-s1-s1" name="Test Cases 10Ge" pass="3">AXOS.AXOS-automation.Milan.ST Test Cases.System.Management.Local Craft Interface Support.Test Cases 10Ge</stat>
<stat fail="0" id="s1-s1-s1-s1-s1-s1-s1-s1-s1" name="tc Verify craft connection after reboot the standby card" pass="1">AXOS.AXOS-automation.Milan.ST Test Cases.System.Management.Local Craft Interface Support.Test Cases 10Ge.tc Verify craft connection after reboot the standby card</stat>
<stat fail="0" id="s1-s1-s1-s1-s1-s1-s1-s1-s2" name="tc Verify craft connection after reboot the system" pass="1">AXOS.AXOS-automation.Milan.ST Test Cases.System.Management.Local Craft Interface Support.Test Cases 10Ge.tc Verify craft connection after reboot the system</stat>
<stat fail="0" id="s1-s1-s1-s1-s1-s1-s1-s1-s3" name="tc Verify craft connection after switchover through CLI dualcard" pass="1">AXOS.AXOS-automation.Milan.ST Test Cases.System.Management.Local Craft Interface Support.Test Cases 10Ge.tc Verify craft connection after switchover through CLI dualcard</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
