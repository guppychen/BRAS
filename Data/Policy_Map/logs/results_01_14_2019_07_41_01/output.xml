<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20190113 23:41:40.142" generator="Robot 3.0.4 (Python 2.7.14 on linux2)">
<suite source="/home/guchen/workspace/AXOS" id="s1" name="AXOS">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation" id="s1-s1" name="AXOS-automation">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan" id="s1-s1-s1" name="Milan">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases" id="s1-s1-s1-s1" name="ST Test Cases">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data" id="s1-s1-s1-s1-s1" name="Data">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/Policy_Map" id="s1-s1-s1-s1-s1-s1" name="Policy Map">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/Policy_Map/testcase" id="s1-s1-s1-s1-s1-s1-s1" name="Testcase">
<kw type="setup" name="eth_policy_map_suite_provision">
<doc>suite provision for sub_feature</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>suite provision for sub_feature</arg>
</arguments>
<msg timestamp="20190113 23:42:11.436" level="INFO">suite provision for sub_feature</msg>
<status status="PASS" endtime="20190113 23:42:11.436" starttime="20190113 23:42:11.435"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>set eut version and release</arg>
</arguments>
<msg timestamp="20190113 23:42:11.437" level="INFO">set eut version and release</msg>
<status status="PASS" endtime="20190113 23:42:11.437" starttime="20190113 23:42:11.437"></status>
</kw>
<kw name="set_eut_version" library="release_adapter">
<doc>set EUT build and release attribution</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>If device is not specified, get it from topo.yaml ${DEVICES} list</arg>
</arguments>
<msg timestamp="20190113 23:42:11.440" level="INFO">If device is not specified, get it from topo.yaml &lt;cafe.core.utils.Param object at 0x7faaf4781fd0&gt; list</msg>
<status status="PASS" endtime="20190113 23:42:11.440" starttime="20190113 23:42:11.439"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${device}'</arg>
<arg>Create List</arg>
<arg>${device}</arg>
<arg>ELSE</arg>
<arg>get dictionary keys</arg>
<arg>${DEVICES}</arg>
</arguments>
<assign>
<var>${keys}</var>
</assign>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${DEVICES}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:11.442" starttime="20190113 23:42:11.442"></status>
</kw>
<msg timestamp="20190113 23:42:11.443" level="INFO">${keys} = ['eutA', 'tg1']</msg>
<status status="PASS" endtime="20190113 23:42:11.443" starttime="20190113 23:42:11.440"></status>
</kw>
<kw type="for" name="${eut} IN [ @{keys} ]">
<kw type="foritem" name="${eut} = eutA">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current eut is ${eut}, type is ${DEVICES.${eut}.type}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:11.445" starttime="20190113 23:42:11.444"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${DEVICES.${eut}.type}'!='AXOS'</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:11.447" starttime="20190113 23:42:11.446"></status>
</kw>
<kw name="get_eut_version" library="release_adapter">
<tags>
<tag>@author=llin</tag>
</tags>
<doc>this is the keyword used to get single device's build information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>cli</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:15.478" level="INFO">Created ShellDevice(eutA)</msg>
<msg timestamp="20190113 23:42:15.479" level="INFO">send session_command, cmd=cli, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:16.250" level="INFO">session_command result=cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG state persistence control commands
  clear                 - Clear object data
  clock                 - Modify clock
  configure             - Manipulate software configuration information
  copy                  - Copy files
  cpe-upgrade:cpe       - CPE operation
  debug                 - 
  delete                - Delete files
  devtools              - Enable/disable development tools
  download              - Download files
  enable                - Enable EXEC commands
  exit                  - Exit the management session
  folder                - 
  generate              - Generate files
  idle-timeout          - Configure idle timeout
  install               - 
  lock                  - lock a datastore
  logout                - Logout a user
  manual                - Manual operation with alarms
  no                    - Negate a command or set its defaults
  ofa-connect           - Open Flow Connect
  ofa-listener          - Open Flow Listener
  ofa-port              - Open Flow port
  ont-eth               - ONT-ETH efm-loopback-status mode
  ont-firmware-upgrade  - Start software download
  ont-simulation        - ONT simulation commands
  ont-upgrade           - ONT upgrade commands
  paginate              - Paginate output from CLI commands
  perform               - Perform an operation
  ping                  - Ping IP address
  ping6                 - Ping IPv6 address
  quit                  - Exit the management session
  redundancy            - redundancy switchover commands
  reload                - Reboot the current card
  remove-dynamic-policy - 
  replay                - Replay card-config
  restart               - Restart Diameter daemon
  run                   - 
  send                  - Send message to terminal of one or all users
  session               - 
  show                  - Show information about the system
  ssh                   - ssh command
  start                 - Start an operation
  stop                  - Stop an operation
  switch                - Switch network clock
  tcpdump               - tcpdump command
  telnet                - telnet command
  templatize            - Find patterns in subtree.
  terminal              - Set terminal type
  timestamp             - Enable/disable the display of timestamp
  traceroute            - Traceroute IP address
  uninstall             - 
  unlock                - unlock a datastore
  upgrade               - Upgrade commands
  upload                - Upload files
  verify                - 
NGPON2X4</msg>
<msg timestamp="20190113 23:42:16.251" level="INFO">${res} = cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG s...</msg>
<status status="PASS" endtime="20190113 23:42:16.251" starttime="20190113 23:42:11.449"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:16.255" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:16.716" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 23:42:16.717" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 23:42:16.717" starttime="20190113 23:42:16.253"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>(description|details)\\s*(.*)\r</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 23:42:16.720" level="INFO">${matches} = ['IBAXOS191-CI-330', 'IBAXOS191-CI-330']</msg>
<status status="PASS" endtime="20190113 23:42:16.721" starttime="20190113 23:42:16.719"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:16.722" starttime="20190113 23:42:16.721"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 23:42:16.724" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 23:42:16.724" starttime="20190113 23:42:16.723"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${build}</arg>
</arguments>
<msg timestamp="20190113 23:42:16.725" level="INFO">we've got the build informations : IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 23:42:16.725" starttime="20190113 23:42:16.724"></status>
</kw>
<msg timestamp="20190113 23:42:16.726" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 23:42:16.726" starttime="20190113 23:42:11.448"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>build</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:16.729" starttime="20190113 23:42:16.728"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s build is ${DEVICES.${eut}.build}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:16.731" starttime="20190113 23:42:16.730"></status>
</kw>
<kw name="get_eut_distro" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to get single device's distro information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:16.736" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:17.193" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 23:42:17.194" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 23:42:17.194" starttime="20190113 23:42:16.733"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>distro\\s*"(.*)"\r</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 23:42:17.199" level="INFO">${matches} = ['IB-AXOS-19.1 2019.01.12 02:16:30', 'IB-AXOS-19.1 2019.01.12 02:16:30']</msg>
<status status="PASS" endtime="20190113 23:42:17.199" starttime="20190113 23:42:17.197"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.201" starttime="20190113 23:42:17.200"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<msg timestamp="20190113 23:42:17.203" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 23:42:17.204" starttime="20190113 23:42:17.202"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${distro}</arg>
</arguments>
<msg timestamp="20190113 23:42:17.206" level="INFO">we've got the build informations : IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 23:42:17.206" starttime="20190113 23:42:17.204"></status>
</kw>
<msg timestamp="20190113 23:42:17.207" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 23:42:17.207" starttime="20190113 23:42:16.731"></status>
</kw>
<kw name="mapping_distro_to_release" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to mapping build id to release name</doc>
<arguments>
<arg>${distro}</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${distro}</arg>
<arg>\\s+.*$</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 23:42:17.211" level="INFO">${build} = IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 23:42:17.212" starttime="20190113 23:42:17.210"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the branch of the build is : ${build}</arg>
</arguments>
<msg timestamp="20190113 23:42:17.213" level="INFO">the branch of the build is : IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 23:42:17.213" starttime="20190113 23:42:17.212"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>open('${map}').readlines()</arg>
</arguments>
<assign>
<var>${fileHandler}</var>
</assign>
<msg timestamp="20190113 23:42:17.216" level="INFO">${fileHandler} = ['Release, Branch\n', 'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2\n', 'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-...</msg>
<status status="PASS" endtime="20190113 23:42:17.216" starttime="20190113 23:42:17.214"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the mapping file content : ${fileHandler}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.218" starttime="20190113 23:42:17.217"></status>
</kw>
<kw name="Convert To List" library="Collections">
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.219" starttime="20190113 23:42:17.218"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 23:42:17.221" level="INFO">${rowIndex} = 0</msg>
<status status="PASS" endtime="20190113 23:42:17.221" starttime="20190113 23:42:17.220"></status>
</kw>
<kw type="for" name="${rowitem} IN [ @{fileHandler} ]">
<kw type="foritem" name="${rowitem} = Release, Branch&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.224" starttime="20190113 23:42:17.223"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 23:42:17.227" level="FAIL">'Release, Branch
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 23:42:17.227" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 23:42:17.227" starttime="20190113 23:42:17.226"></status>
</kw>
<msg timestamp="20190113 23:42:17.228" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 23:42:17.228" starttime="20190113 23:42:17.224"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 23:42:17.230" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 23:42:17.230" starttime="20190113 23:42:17.229"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.231" starttime="20190113 23:42:17.231"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 23:42:17.233" level="INFO">${rowIndex} = 1</msg>
<status status="PASS" endtime="20190113 23:42:17.233" starttime="20190113 23:42:17.232"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:17.234" starttime="20190113 23:42:17.222"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.236" starttime="20190113 23:42:17.235"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 23:42:17.241" level="FAIL">'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 23:42:17.241" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 23:42:17.241" starttime="20190113 23:42:17.238"></status>
</kw>
<msg timestamp="20190113 23:42:17.242" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 23:42:17.242" starttime="20190113 23:42:17.237"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 23:42:17.243" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 23:42:17.243" starttime="20190113 23:42:17.242"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.245" starttime="20190113 23:42:17.244"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 23:42:17.246" level="INFO">${rowIndex} = 2</msg>
<status status="PASS" endtime="20190113 23:42:17.246" starttime="20190113 23:42:17.245"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:17.247" starttime="20190113 23:42:17.234"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.249" starttime="20190113 23:42:17.248"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 23:42:17.251" level="FAIL">'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 23:42:17.252" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 23:42:17.252" starttime="20190113 23:42:17.250"></status>
</kw>
<msg timestamp="20190113 23:42:17.252" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 23:42:17.252" starttime="20190113 23:42:17.249"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 23:42:17.254" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 23:42:17.254" starttime="20190113 23:42:17.253"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.255" starttime="20190113 23:42:17.254"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 23:42:17.257" level="INFO">${rowIndex} = 3</msg>
<status status="PASS" endtime="20190113 23:42:17.257" starttime="20190113 23:42:17.256"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:17.258" starttime="20190113 23:42:17.247"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.260" starttime="20190113 23:42:17.259"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 23:42:17.263" level="FAIL">'AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 23:42:17.263" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 23:42:17.263" starttime="20190113 23:42:17.262"></status>
</kw>
<msg timestamp="20190113 23:42:17.263" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 23:42:17.263" starttime="20190113 23:42:17.261"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 23:42:17.265" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 23:42:17.265" starttime="20190113 23:42:17.264"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.266" starttime="20190113 23:42:17.266"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 23:42:17.268" level="INFO">${rowIndex} = 4</msg>
<status status="PASS" endtime="20190113 23:42:17.268" starttime="20190113 23:42:17.267"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:17.268" starttime="20190113 23:42:17.258"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.271" starttime="20190113 23:42:17.270"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 23:42:17.273" level="FAIL">'AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 23:42:17.273" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 23:42:17.274" starttime="20190113 23:42:17.272"></status>
</kw>
<msg timestamp="20190113 23:42:17.274" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 23:42:17.274" starttime="20190113 23:42:17.271"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 23:42:17.275" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 23:42:17.276" starttime="20190113 23:42:17.275"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.277" starttime="20190113 23:42:17.276"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 23:42:17.278" level="INFO">${rowIndex} = 5</msg>
<status status="PASS" endtime="20190113 23:42:17.279" starttime="20190113 23:42:17.278"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:17.279" starttime="20190113 23:42:17.269"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_19_1, IB-AXOS-19.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.281" starttime="20190113 23:42:17.280"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.284" starttime="20190113 23:42:17.283"></status>
</kw>
<msg timestamp="20190113 23:42:17.284" level="INFO">${contain_build} = True</msg>
<status status="PASS" endtime="20190113 23:42:17.284" starttime="20190113 23:42:17.282"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 23:42:17.286" level="INFO">build IB-AXOS-19.1 search result is True</msg>
<status status="PASS" endtime="20190113 23:42:17.286" starttime="20190113 23:42:17.285"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<msg timestamp="20190113 23:42:17.288" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20190113 23:42:17.288" starttime="20190113 23:42:17.287"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:17.288" starttime="20190113 23:42:17.279"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:17.289" starttime="20190113 23:42:17.221"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${contain_build}'!='True'</arg>
<arg>NONE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.290" starttime="20190113 23:42:17.289"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we find the release info in ${rowIndex} row</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.292" starttime="20190113 23:42:17.291"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<assign>
<var>${len}</var>
</assign>
<msg timestamp="20190113 23:42:17.295" level="INFO">Length is 6</msg>
<msg timestamp="20190113 23:42:17.295" level="INFO">${len} = 6</msg>
<status status="PASS" endtime="20190113 23:42:17.295" starttime="20190113 23:42:17.293"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>@{fileHandler}[${rowIndex}]</arg>
</arguments>
<assign>
<var>${releaseStr}</var>
</assign>
<msg timestamp="20190113 23:42:17.297" level="DEBUG">Argument types are:
&lt;type 'str'&gt;</msg>
<msg timestamp="20190113 23:42:17.297" level="INFO">${releaseStr} = AXOS_19_1, IB-AXOS-19.1
</msg>
<status status="PASS" endtime="20190113 23:42:17.297" starttime="20190113 23:42:17.296"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>release=${releaseStr}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.299" starttime="20190113 23:42:17.298"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${releaseStr}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>@{matches}</var>
</assign>
<msg timestamp="20190113 23:42:17.301" level="INFO">@{matches} = [ AXOS_19_1 |  IB-AXOS-19.1
 ]</msg>
<status status="PASS" endtime="20190113 23:42:17.301" starttime="20190113 23:42:17.300"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.303" starttime="20190113 23:42:17.302"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 23:42:17.305" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 23:42:17.305" starttime="20190113 23:42:17.304"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the release information: ${release}.</arg>
</arguments>
<msg timestamp="20190113 23:42:17.307" level="INFO">we've got the release information: AXOS_19_1.</msg>
<status status="PASS" endtime="20190113 23:42:17.307" starttime="20190113 23:42:17.306"></status>
</kw>
<msg timestamp="20190113 23:42:17.308" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 23:42:17.308" starttime="20190113 23:42:17.209"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'NONE'=='${release}'</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.310" starttime="20190113 23:42:17.309"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>release</arg>
<arg>${release}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.312" starttime="20190113 23:42:17.310"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s release is ${DEVICES.${eut}.release}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.314" starttime="20190113 23:42:17.312"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:17.314" starttime="20190113 23:42:11.444"></status>
</kw>
<kw type="foritem" name="${eut} = tg1">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current eut is ${eut}, type is ${DEVICES.${eut}.type}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.320" starttime="20190113 23:42:17.319"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${DEVICES.${eut}.type}'!='AXOS'</arg>
</arguments>
<msg timestamp="20190113 23:42:17.323" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20190113 23:42:17.323" starttime="20190113 23:42:17.321"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:17.324" starttime="20190113 23:42:17.318"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:17.324" starttime="20190113 23:42:11.443"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:17.326" starttime="20190113 23:42:11.438"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>service_point_provision for uplink side</arg>
</arguments>
<msg timestamp="20190113 23:42:17.328" level="INFO">service_point_provision for uplink side</msg>
<status status="PASS" endtime="20190113 23:42:17.328" starttime="20190113 23:42:17.327"></status>
</kw>
<kw name="service_point_prov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision for service_point</doc>
<arguments>
<arg>service_point_list1</arg>
</arguments>
<kw type="for" name="${service_point} IN [ @{service_model.${service_point_list}} ]">
<kw type="foritem" name="${service_point} = service_point1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:42:17.333" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:42:17.333" starttime="20190113 23:42:17.332"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** uplink service provision for ${device} ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:42:17.335" level="INFO">****** uplink service provision for eutA service_point1 ******</msg>
<status status="PASS" endtime="20190113 23:42:17.335" starttime="20190113 23:42:17.334"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>service_point_${service_model.${service_point}.type}_prov</arg>
<arg>${device}</arg>
<arg>${service_point}</arg>
</arguments>
<kw name="service_point_eth_prov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision for eth type service point (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${service_point}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] ethernet port basic provision for ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:42:17.339" level="INFO">****** [eutA] ethernet port basic provision for service_point1 ******</msg>
<status status="PASS" endtime="20190113 23:42:17.339" starttime="20190113 23:42:17.338"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${service_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 23:42:17.343" level="INFO">${port} = 1/2/x2</msg>
<status status="PASS" endtime="20190113 23:42:17.343" starttime="20190113 23:42:17.342"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** provision port ${port} role and parameter ******</arg>
</arguments>
<msg timestamp="20190113 23:42:17.345" level="INFO">****** provision port 1/2/x2 role and parameter ******</msg>
<status status="PASS" endtime="20190113 23:42:17.345" starttime="20190113 23:42:17.344"></status>
</kw>
<kw name="prov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>${service_model.${service_point}.attribute.interface_role}</arg>
<arg>ENABLED</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:17.352" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:17.585" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:42:17.586" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:42:17.586" starttime="20190113 23:42:17.350"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.590" starttime="20190113 23:42:17.588"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:17.590" starttime="20190113 23:42:17.348"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:17.597" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:17.919" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:42:17.920" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:42:17.920" starttime="20190113 23:42:17.594"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:17.924" starttime="20190113 23:42:17.922"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:17.925" starttime="20190113 23:42:17.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${switchport}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>switchport ${switchport}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>switchport ${switchport}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:17.934" level="INFO">send session_command, cmd=switchport ENABLED, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:18.244" level="INFO">session_command result=switchport ENABLED
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:42:18.245" level="INFO">${res} = switchport ENABLED
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:42:18.245" starttime="20190113 23:42:17.931"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:18.248" starttime="20190113 23:42:18.247"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:18.249" starttime="20190113 23:42:17.929"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:18.250" starttime="20190113 23:42:17.927"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${interface_role}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>role ${interface_role}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>role ${interface_role}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:18.257" level="INFO">send session_command, cmd=role inni, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:19.075" level="INFO">session_command result=role inni
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:42:19.075" level="INFO">${res} = role inni
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:42:19.075" starttime="20190113 23:42:18.255"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:19.078" starttime="20190113 23:42:19.077"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:19.079" starttime="20190113 23:42:18.253"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:19.084" starttime="20190113 23:42:18.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:19.087" starttime="20190113 23:42:19.086"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:42:19.093" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:42:19.093" starttime="20190113 23:42:19.092"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 23:42:19.095" starttime="20190113 23:42:19.094"></status>
</kw>
<msg timestamp="20190113 23:42:19.095" level="INFO">${cmd_string} = </msg>
<status status="PASS" endtime="20190113 23:42:19.095" starttime="20190113 23:42:19.090"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:19.097" starttime="20190113 23:42:19.096"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:19.111" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:19.323" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:42:19.324" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:42:19.324" starttime="20190113 23:42:19.100"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:19.327" starttime="20190113 23:42:19.326"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:19.327" starttime="20190113 23:42:19.098"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:19.329" starttime="20190113 23:42:17.345"></status>
</kw>
<kw name="no_shutdown_port" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Puts an interface in shutdown mode</doc>
<arguments>
<arg>${device}</arg>
<arg>ethernet</arg>
<arg>${port}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:19.338" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:19.546" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:42:19.547" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:42:19.547" starttime="20190113 23:42:19.335"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:19.550" starttime="20190113 23:42:19.549"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:19.550" starttime="20190113 23:42:19.333"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port-type} ${port}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:19.555" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:19.756" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:42:19.756" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:42:19.757" starttime="20190113 23:42:19.553"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:19.761" starttime="20190113 23:42:19.759"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:19.761" starttime="20190113 23:42:19.551"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no shutdown</arg>
<arg>30</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:19.769" level="INFO">send session_command, cmd=no shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:20.348" level="INFO">session_command result=no shutdown
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:42:20.348" level="INFO">${res} = no shutdown
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:42:20.348" starttime="20190113 23:42:19.765"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:20.351" starttime="20190113 23:42:20.350"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:20.352" starttime="20190113 23:42:19.763"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:20.357" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:20.565" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:42:20.566" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:42:20.566" starttime="20190113 23:42:20.355"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:20.569" starttime="20190113 23:42:20.568"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:20.569" starttime="20190113 23:42:20.353"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:20.571" starttime="20190113 23:42:19.331"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:20.572" starttime="20190113 23:42:17.341"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:20.573" starttime="20190113 23:42:17.340"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:20.574" starttime="20190113 23:42:17.337"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:20.575" starttime="20190113 23:42:17.335"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:20.576" starttime="20190113 23:42:17.331"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:20.577" starttime="20190113 23:42:17.330"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:20.578" starttime="20190113 23:42:17.329"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>service_point add svc</arg>
</arguments>
<msg timestamp="20190113 23:42:20.580" level="INFO">service_point add svc</msg>
<status status="PASS" endtime="20190113 23:42:20.580" starttime="20190113 23:42:20.579"></status>
</kw>
<kw name="prov_vlan" library="keyword_command">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description: provision vlan</doc>
<arguments>
<arg>eutA</arg>
<arg>${service_vlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>vlan ${vlan}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 23:42:20.583" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 23:42:20.583" starttime="20190113 23:42:20.583"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${l2-dhcp-profile}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} l2-dhcp-profile ${l2-dhcp-profile}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 23:42:20.585" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 23:42:20.585" starttime="20190113 23:42:20.584"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${igmp-profile}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} igmp-profile ${igmp-profile}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 23:42:20.587" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 23:42:20.587" starttime="20190113 23:42:20.586"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${pppoe-ia-id-profile}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} pppoe-ia-id-profile ${pppoe-ia-id-profile}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 23:42:20.588" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 23:42:20.588" starttime="20190113 23:42:20.587"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${mac-learning}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} mac-learning ${mac-learning}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 23:42:20.590" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 23:42:20.590" starttime="20190113 23:42:20.589"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${mode}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} mode ${mode}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 23:42:20.592" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 23:42:20.592" starttime="20190113 23:42:20.591"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${source-verify}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} source-verify ${source-verify}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 23:42:20.593" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 23:42:20.593" starttime="20190113 23:42:20.592"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${mff}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} mff ${mff}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 23:42:20.595" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 23:42:20.595" starttime="20190113 23:42:20.594"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:42:20.597" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:20.798" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:42:20.798" starttime="20190113 23:42:20.595"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_str}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:20.823" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:22.138" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:42:22.138" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:42:22.138" starttime="20190113 23:42:20.820"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:22.141" starttime="20190113 23:42:22.140"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:22.141" starttime="20190113 23:42:20.819"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:42:22.147" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:42:22.148" starttime="20190113 23:42:22.147"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 23:42:22.149" starttime="20190113 23:42:22.148"></status>
</kw>
<msg timestamp="20190113 23:42:22.149" level="INFO">${cmd_str} = </msg>
<status status="PASS" endtime="20190113 23:42:22.149" starttime="20190113 23:42:22.145"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${cmd_str}'!='${EMPTY}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_str}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:22.151" starttime="20190113 23:42:22.150"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:42:22.153" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:22.353" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:42:22.353" starttime="20190113 23:42:22.151"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:22.363" starttime="20190113 23:42:20.581"></status>
</kw>
<kw name="service_point_add_vlan" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: add vlan for service_point</doc>
<arguments>
<arg>service_point_list1</arg>
<arg>${service_vlan}</arg>
</arguments>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${vlan_list}</arg>
</arguments>
<assign>
<var>${vlan_list_str}</var>
</assign>
<msg timestamp="20190113 23:42:22.373" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20190113 23:42:22.374" level="INFO">${vlan_list_str} = 4002</msg>
<status status="PASS" endtime="20190113 23:42:22.374" starttime="20190113 23:42:22.372"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${vlan_list_str}</arg>
<arg>,</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${vlan_list_str}</var>
</assign>
<msg timestamp="20190113 23:42:22.375" level="INFO">${vlan_list_str} = 4002</msg>
<status status="PASS" endtime="20190113 23:42:22.375" starttime="20190113 23:42:22.374"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_TransVlan_${vlan_list_str}</arg>
</arguments>
<assign>
<var>${transport_prf}</var>
</assign>
<msg timestamp="20190113 23:42:22.377" level="INFO">${transport_prf} = auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 23:42:22.377" starttime="20190113 23:42:22.376"></status>
</kw>
<kw type="for" name="${service_point} IN [ @{service_model.${service_point_list}} ]">
<kw type="foritem" name="${service_point} = service_point1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:42:22.380" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:42:22.380" starttime="20190113 23:42:22.379"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** uplink service add vlan ${vlan_list} for ${device} ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:42:22.381" level="INFO">****** uplink service add vlan 4002 for eutA service_point1 ******</msg>
<status status="PASS" endtime="20190113 23:42:22.381" starttime="20190113 23:42:22.380"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create transport-service-profile</arg>
</arguments>
<msg timestamp="20190113 23:42:22.383" level="INFO">create transport-service-profile</msg>
<status status="PASS" endtime="20190113 23:42:22.383" starttime="20190113 23:42:22.382"></status>
</kw>
<kw name="prov_transport_service_profile" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Puts an interface in shutdown mode</doc>
<arguments>
<arg>${device}</arg>
<arg>${transport_prf}</arg>
<arg>${vlan_list}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:22.393" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:22.589" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:42:22.590" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:42:22.590" starttime="20190113 23:42:22.386"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:22.593" starttime="20190113 23:42:22.591"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:22.593" starttime="20190113 23:42:22.384"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>transport-service-profile ${transport-service-profile}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:22.599" level="INFO">send session_command, cmd=transport-service-profile auto_TransVlan_4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:22.897" level="INFO">session_command result=transport-service-profile auto_TransVlan_4002
NGPON2X4(config-transport-service-profile-auto_TransVlan_4002)</msg>
<msg timestamp="20190113 23:42:22.897" level="INFO">${res} = transport-service-profile auto_TransVlan_4002
NGPON2X4(config-transport-service-profile-auto_TransVlan_4002)</msg>
<status status="PASS" endtime="20190113 23:42:22.898" starttime="20190113 23:42:22.597"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:22.920" starttime="20190113 23:42:22.919"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:22.921" starttime="20190113 23:42:22.595"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan-list ${vlan-list}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:22.927" level="INFO">send session_command, cmd=vlan-list 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:23.209" level="INFO">session_command result=vlan-list 4002
NGPON2X4(config-transport-service-profile-auto_TransVlan_4002)</msg>
<msg timestamp="20190113 23:42:23.209" level="INFO">${res} = vlan-list 4002
NGPON2X4(config-transport-service-profile-auto_TransVlan_4002)</msg>
<status status="PASS" endtime="20190113 23:42:23.209" starttime="20190113 23:42:22.925"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:23.213" starttime="20190113 23:42:23.212"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:23.214" starttime="20190113 23:42:22.923"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:23.219" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:23.416" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:42:23.416" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:42:23.416" starttime="20190113 23:42:23.217"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:23.418" starttime="20190113 23:42:23.418"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:23.419" starttime="20190113 23:42:23.215"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:23.420" starttime="20190113 23:42:22.383"></status>
</kw>
<kw name="service_point_add_transport_profile" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: add transport_profile to service_point interface (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${service_point}</arg>
<arg>${transport_prf}</arg>
</arguments>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>'lag'=='${service_model.${service_point}.type}'</arg>
<arg>prov_interface</arg>
<arg>${device}</arg>
<arg>lag</arg>
<arg>${service_model.${service_point}.name}</arg>
<arg>transport-service-profile=${transport_prf}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:23.423" starttime="20190113 23:42:23.422"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add transport-service-profile to interface</arg>
</arguments>
<msg timestamp="20190113 23:42:23.424" level="INFO">add transport-service-profile to interface</msg>
<status status="PASS" endtime="20190113 23:42:23.424" starttime="20190113 23:42:23.424"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${service_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 23:42:23.427" level="INFO">${port} = 1/2/x2</msg>
<status status="PASS" endtime="20190113 23:42:23.428" starttime="20190113 23:42:23.426"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** provision port ${port} transport-service-profile ******</arg>
</arguments>
<msg timestamp="20190113 23:42:23.429" level="INFO">****** provision port 1/2/x2 transport-service-profile ******</msg>
<status status="PASS" endtime="20190113 23:42:23.429" starttime="20190113 23:42:23.428"></status>
</kw>
<kw name="prov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>transport-service-profile=${transport_prf}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:23.435" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:23.631" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:42:23.632" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:42:23.632" starttime="20190113 23:42:23.433"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:23.634" starttime="20190113 23:42:23.633"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:23.634" starttime="20190113 23:42:23.431"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:23.639" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:23.883" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:42:23.884" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:42:23.884" starttime="20190113 23:42:23.637"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:23.913" starttime="20190113 23:42:23.912"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:23.913" starttime="20190113 23:42:23.636"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${switchport}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>switchport ${switchport}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:23.917" starttime="20190113 23:42:23.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${interface_role}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>role ${interface_role}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:23.919" starttime="20190113 23:42:23.918"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:23.921" starttime="20190113 23:42:23.920"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:42:23.928" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:42:23.928" starttime="20190113 23:42:23.927"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = transport-service-profile">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:42:23.931" level="INFO">${value} = auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 23:42:23.932" starttime="20190113 23:42:23.930"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:42:23.933" level="INFO">${result_string} =  transport-service-profile auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 23:42:23.933" starttime="20190113 23:42:23.932"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:23.934" starttime="20190113 23:42:23.930"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:23.934" starttime="20190113 23:42:23.929"></status>
</kw>
<msg timestamp="20190113 23:42:23.935" level="INFO">${cmd_string} =  transport-service-profile auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 23:42:23.935" starttime="20190113 23:42:23.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:23.944" level="INFO">send session_command, cmd= transport-service-profile auto_TransVlan_4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:24.349" level="INFO">session_command result= transport-service-profile auto_TransVlan_4002
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:42:24.349" level="INFO">${res} =  transport-service-profile auto_TransVlan_4002
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:42:24.350" starttime="20190113 23:42:23.939"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:24.352" starttime="20190113 23:42:24.351"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:24.352" starttime="20190113 23:42:23.937"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:24.353" starttime="20190113 23:42:23.935"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:24.359" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:24.552" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:42:24.552" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:42:24.552" starttime="20190113 23:42:24.356"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:24.555" starttime="20190113 23:42:24.554"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:24.555" starttime="20190113 23:42:24.355"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:24.556" starttime="20190113 23:42:23.429"></status>
</kw>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ${port_type} ${port_name} ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>ethernet</arg>
<arg>${port}</arg>
<arg>transport-service-profile=${transport_prf}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:24.572" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x2 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:26.159" level="INFO">session_command result=show running-config interface ethernet 1/2/x2 
interface ethernet 1/2/x2
 no shutdown
 role                      inni
 transport-service-profile auto_TransVlan_4002
!
NGPON2X4</msg>
<msg timestamp="20190113 23:42:26.160" level="INFO">${res} = show running-config interface ethernet 1/2/x2 
interface ethernet 1/2/x2
 no shutdown
 role                      inni
 transport-service-profile auto_TransVlan_4002
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:42:26.160" starttime="20190113 23:42:24.569"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:26.162" starttime="20190113 23:42:26.161"></status>
</kw>
<msg timestamp="20190113 23:42:26.163" level="INFO">${res} = show running-config interface ethernet 1/2/x2 
interface ethernet 1/2/x2
 no shutdown
 role                      inni
 transport-service-profile auto_TransVlan_4002
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:42:26.163" starttime="20190113 23:42:24.568"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 23:42:26.169" level="INFO">@{list_key} = [ transport-service-profile ]</msg>
<status status="PASS" endtime="20190113 23:42:26.169" starttime="20190113 23:42:26.167"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<kw type="foritem" name="${check_item} = transport-service-profile">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 23:42:26.172" level="INFO">${exp_value} = auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 23:42:26.172" starttime="20190113 23:42:26.171"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:26.174" starttime="20190113 23:42:26.173"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:26.175" starttime="20190113 23:42:26.170"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:26.175" starttime="20190113 23:42:26.169"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:26.176" starttime="20190113 23:42:24.566"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:26.177" starttime="20190113 23:42:23.426"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:26.178" starttime="20190113 23:42:23.425"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:26.179" starttime="20190113 23:42:23.421"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:26.180" starttime="20190113 23:42:22.378"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:26.181" starttime="20190113 23:42:22.377"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:26.182" starttime="20190113 23:42:22.371"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>subscriber_point_operation for subscriber side</arg>
</arguments>
<msg timestamp="20190113 23:42:26.184" level="INFO">subscriber_point_operation for subscriber side</msg>
<status status="PASS" endtime="20190113 23:42:26.185" starttime="20190113 23:42:26.183"></status>
</kw>
<kw name="subscriber_point_prov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision for subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** subscriber service provision for ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:42:26.187" level="INFO">****** subscriber service provision for subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:42:26.187" starttime="20190113 23:42:26.186"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:42:26.189" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:42:26.189" starttime="20190113 23:42:26.188"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>subscriber_point_${service_model.${subscriber_point}.type}_prov</arg>
<arg>${device}</arg>
<arg>${subscriber_point}</arg>
</arguments>
<kw name="subscriber_point_eth_prov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: ethernet port subscriber provision (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${subscriber_point}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] ethernet port subscriber provision for ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:42:26.194" level="INFO">****** [eutA] ethernet port subscriber provision for subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:42:26.195" starttime="20190113 23:42:26.193"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${subscriber_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 23:42:26.198" level="INFO">${port} = 1/2/x3</msg>
<status status="PASS" endtime="20190113 23:42:26.198" starttime="20190113 23:42:26.197"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** provision port ${port} role and parameter ******</arg>
</arguments>
<msg timestamp="20190113 23:42:26.199" level="INFO">****** provision port 1/2/x3 role and parameter ******</msg>
<status status="PASS" endtime="20190113 23:42:26.200" starttime="20190113 23:42:26.199"></status>
</kw>
<kw name="prov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_role}</arg>
<arg>ENABLED</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:26.206" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:26.394" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:42:26.395" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:42:26.395" starttime="20190113 23:42:26.204"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:26.397" starttime="20190113 23:42:26.396"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:26.398" starttime="20190113 23:42:26.202"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:26.402" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:26.615" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:42:26.616" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:42:26.616" starttime="20190113 23:42:26.400"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:26.618" starttime="20190113 23:42:26.617"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:26.620" starttime="20190113 23:42:26.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${switchport}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>switchport ${switchport}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>switchport ${switchport}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:26.628" level="INFO">send session_command, cmd=switchport ENABLED, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:26.979" level="INFO">session_command result=switchport ENABLED
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:42:26.979" level="INFO">${res} = switchport ENABLED
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:42:26.980" starttime="20190113 23:42:26.625"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:26.982" starttime="20190113 23:42:26.981"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:26.982" starttime="20190113 23:42:26.623"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:26.983" starttime="20190113 23:42:26.622"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${interface_role}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>role ${interface_role}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>role ${interface_role}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:26.989" level="INFO">send session_command, cmd=role uni, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:27.726" level="INFO">session_command result=role uni
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:42:27.727" level="INFO">${res} = role uni
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:42:27.727" starttime="20190113 23:42:26.987"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:27.729" starttime="20190113 23:42:27.728"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:27.730" starttime="20190113 23:42:26.986"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:27.731" starttime="20190113 23:42:26.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:27.733" starttime="20190113 23:42:27.732"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:42:27.738" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:42:27.738" starttime="20190113 23:42:27.737"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 23:42:27.739" starttime="20190113 23:42:27.738"></status>
</kw>
<msg timestamp="20190113 23:42:27.739" level="INFO">${cmd_string} = </msg>
<status status="PASS" endtime="20190113 23:42:27.739" starttime="20190113 23:42:27.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:27.741" starttime="20190113 23:42:27.740"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:27.745" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:27.938" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:42:27.939" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:42:27.939" starttime="20190113 23:42:27.743"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:27.941" starttime="20190113 23:42:27.940"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:27.942" starttime="20190113 23:42:27.741"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:27.943" starttime="20190113 23:42:26.200"></status>
</kw>
<kw name="no_shutdown_port" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Puts an interface in shutdown mode</doc>
<arguments>
<arg>${device}</arg>
<arg>ethernet</arg>
<arg>${port}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:27.949" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:28.162" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:42:28.162" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:42:28.163" starttime="20190113 23:42:27.948"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:28.165" starttime="20190113 23:42:28.164"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:28.166" starttime="20190113 23:42:27.946"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port-type} ${port}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:28.173" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:28.372" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:42:28.373" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:42:28.373" starttime="20190113 23:42:28.168"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:28.378" starttime="20190113 23:42:28.377"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:28.379" starttime="20190113 23:42:28.167"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no shutdown</arg>
<arg>30</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:28.400" level="INFO">send session_command, cmd=no shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:29.019" level="INFO">session_command result=no shutdown
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:42:29.019" level="INFO">${res} = no shutdown
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:42:29.019" starttime="20190113 23:42:28.390"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:29.023" starttime="20190113 23:42:29.021"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:29.025" starttime="20190113 23:42:28.389"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:29.032" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:29.240" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:42:29.240" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:42:29.240" starttime="20190113 23:42:29.029"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:29.243" starttime="20190113 23:42:29.242"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:29.243" starttime="20190113 23:42:29.027"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:29.244" starttime="20190113 23:42:27.945"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:29.245" starttime="20190113 23:42:26.196"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:29.247" starttime="20190113 23:42:26.195"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:29.248" starttime="20190113 23:42:26.192"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:29.249" starttime="20190113 23:42:26.190"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:29.250" starttime="20190113 23:42:26.185"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:29.251" starttime="20190113 23:42:11.433"></status>
</kw>
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/Policy_Map/testcase/tc_add_cevlan_tag.robot" id="s1-s1-s1-s1-s1-s1-s1-s1" name="Tc Add Cevlan Tag">
<test id="s1-s1-s1-s1-s1-s1-s1-s1-t1" name="tc_add_cevlan_tag">
<kw type="setup" name="case setup">
<doc>setup</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:1 create a class-map to match untag in flow 1</arg>
</arguments>
<msg timestamp="20190113 23:42:29.568" level="INFO">STEP:1 create a class-map to match untag in flow 1</msg>
<status status="PASS" endtime="20190113 23:42:29.568" starttime="20190113 23:42:29.567"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:2 create a policy-map to bind the class-map and add cevlan tag x</arg>
</arguments>
<msg timestamp="20190113 23:42:29.569" level="INFO">STEP:2 create a policy-map to bind the class-map and add cevlan tag x</msg>
<status status="PASS" endtime="20190113 23:42:29.569" starttime="20190113 23:42:29.568"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:3 add eth-port1 to s-tag with transport-service-profile (done in suite_setup)</arg>
</arguments>
<msg timestamp="20190113 23:42:29.570" level="INFO">STEP:3 add eth-port1 to s-tag with transport-service-profile (done in suite_setup)</msg>
<status status="PASS" endtime="20190113 23:42:29.570" starttime="20190113 23:42:29.570"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:4 apply the s-tag and policy-map to ethernet uni</arg>
</arguments>
<msg timestamp="20190113 23:42:29.572" level="INFO">STEP:4 apply the s-tag and policy-map to ethernet uni</msg>
<status status="PASS" endtime="20190113 23:42:29.572" starttime="20190113 23:42:29.571"></status>
</kw>
<kw name="subscriber_point_add_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create l2 basic class-map and policy-map, add service to subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>untagged</arg>
<arg>${service_vlan}</arg>
<arg>add-ctag</arg>
<arg>${cvlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:42:29.582" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:42:29.582" starttime="20190113 23:42:29.581"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] create and add l2 basic service to ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:42:29.583" level="INFO">****** [eutA] create and add l2 basic service to subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:42:29.583" starttime="20190113 23:42:29.582"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:29.587" starttime="20190113 23:42:29.586"></status>
</kw>
<msg timestamp="20190113 23:42:29.587" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 23:42:29.588" starttime="20190113 23:42:29.585"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 23:42:29.589" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 23:42:29.589" starttime="20190113 23:42:29.588"></status>
</kw>
<msg timestamp="20190113 23:42:29.590" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 23:42:29.590" starttime="20190113 23:42:29.584"></status>
</kw>
<kw name="l2_setting_prov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${ctag_action}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan_action}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<assign>
<var>&amp;{dict_prf}</var>
</assign>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] add l2 basic service to ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:42:29.600" level="INFO">****** [eutA] add l2 basic service to ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 23:42:29.600" starttime="20190113 23:42:29.599"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 23:42:29.602" level="INFO">${class_map} = auto_ClassMap_vuntagged</msg>
<status status="PASS" endtime="20190113 23:42:29.602" starttime="20190113 23:42:29.601"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 23:42:29.604" level="INFO">${policy_map} = auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 23:42:29.604" starttime="20190113 23:42:29.603"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>classmap=${class_map}</arg>
<arg>policymap=${policy_map}</arg>
</arguments>
<assign>
<var>&amp;{dic_prf}</var>
</assign>
<msg timestamp="20190113 23:42:29.606" level="INFO">&amp;{dic_prf} = { classmap=auto_ClassMap_vuntagged | policymap=auto_PolicyMap_v1000 }</msg>
<status status="PASS" endtime="20190113 23:42:29.606" starttime="20190113 23:42:29.604"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create class-map</arg>
</arguments>
<msg timestamp="20190113 23:42:29.607" level="INFO">create class-map</msg>
<status status="PASS" endtime="20190113 23:42:29.607" starttime="20190113 23:42:29.606"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'untagged'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>untagged=${EMPTY}</arg>
<arg>ELSE IF</arg>
<arg>'any'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>any=${EMPTY}</arg>
<arg>ELSE</arg>
<arg>create dictionary</arg>
<arg>vlan=${match_vlan}</arg>
</arguments>
<assign>
<var>&amp;{dict_match_rule}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>untagged=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:29.610" starttime="20190113 23:42:29.609"></status>
</kw>
<msg timestamp="20190113 23:42:29.611" level="INFO">&amp;{dict_match_rule} = { untagged= }</msg>
<status status="PASS" endtime="20190113 23:42:29.611" starttime="20190113 23:42:29.608"></status>
</kw>
<kw name="prov_class_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision class-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map}</arg>
<arg>ethernet</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>1</arg>
<arg>&amp;{dict_match_rule}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:42:29.620" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:29.858" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:42:29.859" starttime="20190113 23:42:29.613"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ${class_map_type} ${class_map_name}</arg>
</arguments>
<msg timestamp="20190113 23:42:29.862" level="INFO">send session_command, cmd=class-map ethernet auto_ClassMap_vuntagged, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:30.258" level="INFO">session_command result=class-map ethernet auto_ClassMap_vuntagged
NGPON2X4(config-ethernet-auto_ClassMap_vuntagged)</msg>
<status status="PASS" endtime="20190113 23:42:30.259" starttime="20190113 23:42:29.860"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${flow_type} ${flow_index}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:30.271" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:30.632" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:42:30.633" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:42:30.633" starttime="20190113 23:42:30.269"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:30.635" starttime="20190113 23:42:30.634"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:30.636" starttime="20190113 23:42:30.267"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:42:30.643" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:42:30.643" starttime="20190113 23:42:30.642"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = untagged">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:42:30.646" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190113 23:42:30.646" starttime="20190113 23:42:30.645"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:42:30.647" level="INFO">${result_string} =  untagged </msg>
<status status="PASS" endtime="20190113 23:42:30.647" starttime="20190113 23:42:30.646"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:30.648" starttime="20190113 23:42:30.644"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:30.648" starttime="20190113 23:42:30.643"></status>
</kw>
<msg timestamp="20190113 23:42:30.648" level="INFO">${cmd_string} =  untagged </msg>
<status status="PASS" endtime="20190113 23:42:30.648" starttime="20190113 23:42:30.640"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>rule ${rule_index} match ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:30.654" level="INFO">send session_command, cmd=rule 1 match  untagged , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:31.062" level="INFO">session_command result=rule 1 match  untagged 
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:42:31.062" level="INFO">${res} = rule 1 match  untagged 
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:42:31.063" starttime="20190113 23:42:30.651"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:31.066" starttime="20190113 23:42:31.065"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:31.067" starttime="20190113 23:42:30.649"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:42:31.084" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:31.367" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:42:31.367" starttime="20190113 23:42:31.071"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:31.369" starttime="20190113 23:42:29.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create policy-map</arg>
</arguments>
<msg timestamp="20190113 23:42:31.371" level="INFO">create policy-map</msg>
<status status="PASS" endtime="20190113 23:42:31.371" starttime="20190113 23:42:31.370"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ctag_action}'=='add-ctag' or '${ctag_action}'=='add-cevlan-tag' or '${cevlan_action}'=='add-cevlan-tag'</arg>
<arg>release_cmd_adapter</arg>
<arg>${device}</arg>
<arg>${prov_policy_map_config_add_tag}</arg>
<arg>ELSE</arg>
<arg>set variable</arg>
<arg>${ctag_action}</arg>
</arguments>
<assign>
<var>${ctag_action}</var>
</assign>
<kw name="release_cmd_adapter" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: cmd adapter in different release</doc>
<arguments>
<arg>${device}</arg>
<arg>${prov_policy_map_config_add_tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>if no 'release' item in topo.yaml set it to DEFAULT</arg>
</arguments>
<msg timestamp="20190113 23:42:31.379" level="INFO">if no 'release' item in topo.yaml set it to DEFAULT</msg>
<status status="PASS" endtime="20190113 23:42:31.379" starttime="20190113 23:42:31.378"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${DEVICES.${device}}</arg>
<arg>release</arg>
</arguments>
<assign>
<var>${passed}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${device}}</arg>
<arg>release</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:31.383" starttime="20190113 23:42:31.382"></status>
</kw>
<msg timestamp="20190113 23:42:31.383" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20190113 23:42:31.383" starttime="20190113 23:42:31.380"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${passed}</arg>
<arg>${DEVICES.${device}.release}</arg>
<arg>DEFAULT</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 23:42:31.385" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 23:42:31.385" starttime="20190113 23:42:31.384"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>get release ${release}</arg>
</arguments>
<msg timestamp="20190113 23:42:31.386" level="INFO">get release AXOS_19_1</msg>
<status status="PASS" endtime="20190113 23:42:31.386" starttime="20190113 23:42:31.385"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>set release to 'DEFAULT' if release is not key in cmd_key dictionary</arg>
</arguments>
<msg timestamp="20190113 23:42:31.387" level="INFO">set release to 'DEFAULT' if release is not key in cmd_key dictionary</msg>
<status status="PASS" endtime="20190113 23:42:31.388" starttime="20190113 23:42:31.387"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${cmd_param}</arg>
<arg>${release}</arg>
</arguments>
<assign>
<var>${passed}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${cmd_param}</arg>
<arg>${release}</arg>
</arguments>
<msg timestamp="20190113 23:42:31.391" level="FAIL">Dictionary does not contain key 'AXOS_19_1'.</msg>
<msg timestamp="20190113 23:42:31.391" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 23:42:31.392" starttime="20190113 23:42:31.389"></status>
</kw>
<msg timestamp="20190113 23:42:31.392" level="INFO">${passed} = False</msg>
<status status="PASS" endtime="20190113 23:42:31.392" starttime="20190113 23:42:31.388"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${passed}</arg>
<arg>${release}</arg>
<arg>DEFAULT</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 23:42:31.394" level="INFO">${release} = DEFAULT</msg>
<status status="PASS" endtime="20190113 23:42:31.394" starttime="20190113 23:42:31.393"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${cmd_var_item}</arg>
</arguments>
<msg timestamp="20190113 23:42:31.396" level="INFO">List is empty.</msg>
<status status="PASS" endtime="20190113 23:42:31.396" starttime="20190113 23:42:31.395"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=','</arg>
<arg>@{cmd_var_item}</arg>
</arguments>
<assign>
<var>${item}</var>
</assign>
<msg timestamp="20190113 23:42:31.397" level="INFO">${item} = </msg>
<status status="PASS" endtime="20190113 23:42:31.398" starttime="20190113 23:42:31.397"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${cmd_param}</arg>
</arguments>
<msg timestamp="20190113 23:42:31.399" level="INFO">Dictionary size is 2 and it contains following items:
AXOS_4_1: add-ctag
DEFAULT: add-cevlan-tag</msg>
<status status="PASS" endtime="20190113 23:42:31.399" starttime="20190113 23:42:31.398"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${item}"=="${EMPTY}"</arg>
<arg>Set Variable</arg>
<arg>&amp;{cmd_param}[${release}]</arg>
<arg>ELSE</arg>
<arg>evaluate</arg>
<arg>'&amp;{cmd_param}[${release}]'%('${item}')</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>&amp;{cmd_param}[${release}]</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:31.403" starttime="20190113 23:42:31.402"></status>
</kw>
<msg timestamp="20190113 23:42:31.403" level="INFO">${cmd_str} = add-cevlan-tag</msg>
<status status="PASS" endtime="20190113 23:42:31.403" starttime="20190113 23:42:31.400"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>return string is "${cmd_str}" for release ${release}</arg>
</arguments>
<msg timestamp="20190113 23:42:31.404" level="INFO">return string is "add-cevlan-tag" for release DEFAULT</msg>
<status status="PASS" endtime="20190113 23:42:31.405" starttime="20190113 23:42:31.404"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:31.405" starttime="20190113 23:42:31.377"></status>
</kw>
<msg timestamp="20190113 23:42:31.405" level="INFO">${ctag_action} = add-cevlan-tag</msg>
<status status="PASS" endtime="20190113 23:42:31.406" starttime="20190113 23:42:31.372"></status>
</kw>
<kw name="prov_policy_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision policy-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>${ctag_action}=${cvlan}</arg>
<arg>${cevlan_action}=${cevlan}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:42:31.410" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:31.707" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:42:31.707" starttime="20190113 23:42:31.408"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<msg timestamp="20190113 23:42:31.710" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v1000, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:32.072" level="INFO">session_command result=policy-map auto_PolicyMap_v1000
NGPON2X4(config-policy-map-auto_PolicyMap_v1000)</msg>
<status status="PASS" endtime="20190113 23:42:32.072" starttime="20190113 23:42:31.709"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:32.079" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_vuntagged, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:32.601" level="INFO">session_command result=class-map-ethernet auto_ClassMap_vuntagged
NGPON2X4(config-class-map-ethernet-auto_ClassMap_vuntagged)</msg>
<msg timestamp="20190113 23:42:32.602" level="INFO">${res} = class-map-ethernet auto_ClassMap_vuntagged
NGPON2X4(config-class-map-ethernet-auto_ClassMap_vuntagged)</msg>
<status status="PASS" endtime="20190113 23:42:32.602" starttime="20190113 23:42:32.076"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:32.605" starttime="20190113 23:42:32.604"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:32.606" starttime="20190113 23:42:32.074"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:32.612" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:32.974" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:42:32.974" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:42:32.974" starttime="20190113 23:42:32.610"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:32.977" starttime="20190113 23:42:32.976"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:32.978" starttime="20190113 23:42:32.608"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:32.979" starttime="20190113 23:42:32.607"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:42:32.986" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:42:32.986" starttime="20190113 23:42:32.985"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = add-cevlan-tag">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:42:32.989" level="INFO">${value} = 1000</msg>
<status status="PASS" endtime="20190113 23:42:32.990" starttime="20190113 23:42:32.988"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:42:32.991" level="INFO">${result_string} =  add-cevlan-tag 1000</msg>
<status status="PASS" endtime="20190113 23:42:32.991" starttime="20190113 23:42:32.990"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:32.992" starttime="20190113 23:42:32.988"></status>
</kw>
<kw type="foritem" name="${key} = ">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:42:32.995" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190113 23:42:32.995" starttime="20190113 23:42:32.993"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:42:32.997" level="INFO">${result_string} =  add-cevlan-tag 1000  </msg>
<status status="PASS" endtime="20190113 23:42:32.997" starttime="20190113 23:42:32.996"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:32.998" starttime="20190113 23:42:32.992"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:32.998" starttime="20190113 23:42:32.987"></status>
</kw>
<msg timestamp="20190113 23:42:32.998" level="INFO">${cmd_string} =  add-cevlan-tag 1000  </msg>
<status status="PASS" endtime="20190113 23:42:32.998" starttime="20190113 23:42:32.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:33.005" level="INFO">send session_command, cmd= add-cevlan-tag 1000  , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:33.375" level="INFO">session_command result= add-cevlan-tag 1000  
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:42:33.376" level="INFO">${res} =  add-cevlan-tag 1000  
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:42:33.376" starttime="20190113 23:42:33.002"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:33.378" starttime="20190113 23:42:33.377"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:33.378" starttime="20190113 23:42:33.001"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:33.379" starttime="20190113 23:42:32.999"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:42:33.382" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:33.669" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:42:33.670" starttime="20190113 23:42:33.381"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:33.671" starttime="20190113 23:42:31.406"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add policy-map to interface</arg>
</arguments>
<msg timestamp="20190113 23:42:33.674" level="INFO">add policy-map to interface</msg>
<status status="PASS" endtime="20190113 23:42:33.674" starttime="20190113 23:42:33.673"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:33.692" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:35.348" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 23:42:35.348" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:42:35.348" starttime="20190113 23:42:33.683"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:35.351" starttime="20190113 23:42:35.350"></status>
</kw>
<msg timestamp="20190113 23:42:35.351" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:42:35.351" starttime="20190113 23:42:33.681"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 23:42:35.353" level="INFO">@{list_key} = [ ]</msg>
<status status="PASS" endtime="20190113 23:42:35.353" starttime="20190113 23:42:35.352"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<status status="PASS" endtime="20190113 23:42:35.354" starttime="20190113 23:42:35.354"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:35.355" starttime="20190113 23:42:33.679"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:35.358" starttime="20190113 23:42:33.675"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>no=shutdown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:42:35.363" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map= ******</msg>
<status status="PASS" endtime="20190113 23:42:35.363" starttime="20190113 23:42:35.362"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:42:35.365" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:35.706" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:42:35.707" starttime="20190113 23:42:35.363"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:35.713" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:36.031" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:42:36.032" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:42:36.032" starttime="20190113 23:42:35.710"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:36.035" starttime="20190113 23:42:36.033"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:36.035" starttime="20190113 23:42:35.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:36.042" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:36.797" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:42:36.798" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:42:36.798" starttime="20190113 23:42:36.040"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:36.809" starttime="20190113 23:42:36.807"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:36.809" starttime="20190113 23:42:36.038"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:36.817" starttime="20190113 23:42:36.037"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:36.823" starttime="20190113 23:42:36.822"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:36.826" starttime="20190113 23:42:36.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:36.828" starttime="20190113 23:42:36.826"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:42:36.835" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:42:36.835" starttime="20190113 23:42:36.834"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = no">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:42:36.840" level="INFO">${value} = shutdown</msg>
<status status="PASS" endtime="20190113 23:42:36.840" starttime="20190113 23:42:36.838"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:42:36.842" level="INFO">${result_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 23:42:36.842" starttime="20190113 23:42:36.840"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:36.842" starttime="20190113 23:42:36.837"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:36.842" starttime="20190113 23:42:36.836"></status>
</kw>
<msg timestamp="20190113 23:42:36.843" level="INFO">${cmd_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 23:42:36.843" starttime="20190113 23:42:36.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:36.853" level="INFO">send session_command, cmd= no shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:37.267" level="INFO">session_command result= no shutdown
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:42:37.267" level="INFO">${res} =  no shutdown
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:42:37.267" starttime="20190113 23:42:36.850"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:37.269" starttime="20190113 23:42:37.269"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:37.270" starttime="20190113 23:42:36.847"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:37.271" starttime="20190113 23:42:36.844"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:42:37.273" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:37.538" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:42:37.539" starttime="20190113 23:42:37.272"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:37.540" starttime="20190113 23:42:35.360"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:42:37.546" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map=auto_PolicyMap_v1000 ******</msg>
<status status="PASS" endtime="20190113 23:42:37.546" starttime="20190113 23:42:37.544"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:42:37.548" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:37.872" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:42:37.873" starttime="20190113 23:42:37.547"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:37.882" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:38.193" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:42:38.194" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:42:38.194" starttime="20190113 23:42:37.878"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:38.196" starttime="20190113 23:42:38.196"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:38.197" starttime="20190113 23:42:37.875"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:38.203" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:38.506" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:42:38.506" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:42:38.506" starttime="20190113 23:42:38.201"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:38.508" starttime="20190113 23:42:38.508"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:38.509" starttime="20190113 23:42:38.199"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:38.516" starttime="20190113 23:42:38.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:38.530" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v1000, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:39.095" level="INFO">session_command result=policy-map auto_PolicyMap_v1000
NGPON2X4(config-policy-map-auto_PolicyMap_v1000)</msg>
<msg timestamp="20190113 23:42:39.095" level="INFO">${res} = policy-map auto_PolicyMap_v1000
NGPON2X4(config-policy-map-auto_PolicyMap_v1000)</msg>
<status status="PASS" endtime="20190113 23:42:39.095" starttime="20190113 23:42:38.528"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:39.098" starttime="20190113 23:42:39.097"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:39.099" starttime="20190113 23:42:38.526"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:39.100" starttime="20190113 23:42:38.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:39.106" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_vuntagged, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:39.425" level="INFO">session_command result=class-map-ethernet auto_ClassMap_vuntagged
NGPON2X4(config-class-map-ethernet-auto_ClassMap_vuntagged)</msg>
<msg timestamp="20190113 23:42:39.425" level="INFO">${res} = class-map-ethernet auto_ClassMap_vuntagged
NGPON2X4(config-class-map-ethernet-auto_ClassMap_vuntagged)</msg>
<status status="PASS" endtime="20190113 23:42:39.425" starttime="20190113 23:42:39.104"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:39.429" starttime="20190113 23:42:39.427"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:39.429" starttime="20190113 23:42:39.102"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:39.430" starttime="20190113 23:42:39.101"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:39.433" starttime="20190113 23:42:39.432"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:42:39.439" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:42:39.439" starttime="20190113 23:42:39.438"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 23:42:39.440" starttime="20190113 23:42:39.439"></status>
</kw>
<msg timestamp="20190113 23:42:39.440" level="INFO">${cmd_string} = </msg>
<status status="PASS" endtime="20190113 23:42:39.440" starttime="20190113 23:42:39.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:39.442" starttime="20190113 23:42:39.441"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:42:39.444" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:39.717" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:42:39.718" starttime="20190113 23:42:39.442"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:39.736" starttime="20190113 23:42:37.542"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add multicast-profile to interface</arg>
</arguments>
<msg timestamp="20190113 23:42:39.739" level="INFO">add multicast-profile to interface</msg>
<status status="PASS" endtime="20190113 23:42:39.739" starttime="20190113 23:42:39.738"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>prov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:39.740" starttime="20190113 23:42:39.739"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:42:39.742" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:42:39.742" starttime="20190113 23:42:39.741"></status>
</kw>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>policy-map=${policy_map}</arg>
<arg>class-map-ethernet=${class_map}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:42:39.781" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:42:41.584" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v1000
   class-map-ethernet auto_ClassMap_vuntagged
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 23:42:41.585" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v1000
   class-map-ethernet auto_ClassMap_vuntagged
  ...</msg>
<status status="PASS" endtime="20190113 23:42:41.585" starttime="20190113 23:42:39.770"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:41.588" starttime="20190113 23:42:41.587"></status>
</kw>
<msg timestamp="20190113 23:42:41.589" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v1000
   class-map-ethernet auto_ClassMap_vuntagged
  ...</msg>
<status status="PASS" endtime="20190113 23:42:41.589" starttime="20190113 23:42:39.747"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 23:42:41.592" level="INFO">@{list_key} = [ class-map-ethernet | policy-map ]</msg>
<status status="PASS" endtime="20190113 23:42:41.592" starttime="20190113 23:42:41.591"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<kw type="foritem" name="${check_item} = class-map-ethernet">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 23:42:41.596" level="INFO">${exp_value} = auto_ClassMap_vuntagged</msg>
<status status="PASS" endtime="20190113 23:42:41.596" starttime="20190113 23:42:41.595"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:41.598" starttime="20190113 23:42:41.596"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:41.598" starttime="20190113 23:42:41.594"></status>
</kw>
<kw type="foritem" name="${check_item} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 23:42:41.600" level="INFO">${exp_value} = auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 23:42:41.601" starttime="20190113 23:42:41.599"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:41.603" starttime="20190113 23:42:41.601"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:41.603" starttime="20190113 23:42:41.598"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:41.603" starttime="20190113 23:42:41.593"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:41.604" starttime="20190113 23:42:39.745"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:41.608" starttime="20190113 23:42:41.607"></status>
</kw>
<msg timestamp="20190113 23:42:41.609" level="INFO">&amp;{dict_prf} = { classmap=auto_ClassMap_vuntagged | policymap=auto_PolicyMap_v1000 }</msg>
<status status="PASS" endtime="20190113 23:42:41.609" starttime="20190113 23:42:29.596"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:41.614" starttime="20190113 23:42:29.579"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:41.623" starttime="20190113 23:42:29.566"></status>
</kw>
<kw name="template_bidirection_raw_traffic_and_check" library="template_bidirection_raw_traffic_and_check">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>create bidirection raw traffic, send traffic and check packet loss, analyze packet with filter</doc>
<arguments>
<arg>${tg_us_param}</arg>
<arg>${tg_ds_param}</arg>
<arg>${us_traffic_filter}</arg>
<arg>${ds_traffic_filter}</arg>
<arg>${traffic_loss_rate}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create upstream traffic</arg>
</arguments>
<msg timestamp="20190113 23:42:41.712" level="INFO">create upstream traffic</msg>
<status status="PASS" endtime="20190113 23:42:41.712" starttime="20190113 23:42:41.711"></status>
</kw>
<kw name="create_raw_traffic_udp" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create bound traffic with udp head on traffic generater</doc>
<arguments>
<arg>tg1</arg>
<arg>upstream</arg>
<arg>service_p1</arg>
<arg>subscriber_p1</arg>
<arg>&amp;{tg_us_param}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${tg} port ${src_port} to ${dst_port}] create raw traffic with mac_dst:${mac_dst} mac_src:${mac_src} ip_dst:${ip_dst} ip_src:${ip_src} ovlan:${ovlan} ivlan:${ivlan}******</arg>
</arguments>
<msg timestamp="20190113 23:42:41.731" level="INFO">****** [tg1 port subscriber_p1 to service_p1] create raw traffic with mac_dst:00:00:00:67:00:01 mac_src:00:00:00:11:11:11 ip_dst:10.1.67.100 ip_src:10.1.67.10 ovlan: ivlan:******</msg>
<status status="PASS" endtime="20190113 23:42:41.731" starttime="20190113 23:42:41.730"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>mac_dst=${mac_dst}</arg>
<arg>mac_src=${mac_src}</arg>
<arg>l3_protocol=ipv4</arg>
<arg>ip_dst_addr=${ip_dst}</arg>
<arg>ip_src_addr=${ip_src}</arg>
<arg>l4_protocol=udp</arg>
<arg>udp_dst_port=${udp_dst_port}</arg>
<arg>udp_src_port=${udp_src_port}</arg>
<arg>length_mode=fixed</arg>
<arg>frame_size=${frame_size}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:41.733" starttime="20190113 23:42:41.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>evaluate</arg>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<assign>
<var>${rate_bps}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:41.736" starttime="20190113 23:42:41.735"></status>
</kw>
<msg timestamp="20190113 23:42:41.736" level="INFO">${rate_bps} = 10000000</msg>
<status status="PASS" endtime="20190113 23:42:41.736" starttime="20190113 23:42:41.734"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'!='${rate_pps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_pps=${rate_pps}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:42:41.739" starttime="20190113 23:42:41.738"></status>
</kw>
<status status="PASS" endtime="20190113 23:42:41.740" starttime="20190113 23:42:41.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'=='${ovlan}'</arg>
<arg>TG Create Untagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'=='${ivlan}'</arg>
<arg>TG Create Single Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE</arg>
<arg>TG Create Double Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ivlan}</arg>
<arg>${ivlan_pbit}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<kw name="Tg Create Untagged Stream On Port" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Create untag stream by name on traffic generator port.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<msg timestamp="20190113 23:43:10.402" level="INFO">11/9 11/8
CsHLT::traffic_conf create 11/8 { -mac_src 00:00:00:11:11:11 -l4_protocol udp -name upstream -ip_dst_addr 10.1.67.100 -mac_dst 00:00:00:67:00:01 -udp_src_port 6000 -ip_src_addr 10.1.67.10 -length_mode fixed -rate_bps 10000000 -frame_size 512 -l3_protocol ipv4 -udp_dst_port 6000}
create traffic is in process...
create traffic is done!
SUCCESS
streamblock1</msg>
<status status="PASS" endtime="20190113 23:43:10.403" starttime="20190113 23:42:41.742"></status>
</kw>
<status status="PASS" endtime="20190113 23:43:10.404" starttime="20190113 23:42:41.740"></status>
</kw>
<status status="PASS" endtime="20190113 23:43:10.405" starttime="20190113 23:42:41.728"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create downstream traffic</arg>
</arguments>
<msg timestamp="20190113 23:43:10.408" level="INFO">create downstream traffic</msg>
<status status="PASS" endtime="20190113 23:43:10.408" starttime="20190113 23:43:10.407"></status>
</kw>
<kw name="create_raw_traffic_udp" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create bound traffic with udp head on traffic generater</doc>
<arguments>
<arg>tg1</arg>
<arg>downstream</arg>
<arg>subscriber_p1</arg>
<arg>service_p1</arg>
<arg>&amp;{tg_ds_param}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${tg} port ${src_port} to ${dst_port}] create raw traffic with mac_dst:${mac_dst} mac_src:${mac_src} ip_dst:${ip_dst} ip_src:${ip_src} ovlan:${ovlan} ivlan:${ivlan}******</arg>
</arguments>
<msg timestamp="20190113 23:43:10.433" level="INFO">****** [tg1 port service_p1 to subscriber_p1] create raw traffic with mac_dst:00:00:00:11:11:11 mac_src:00:00:00:67:00:01 ip_dst:10.1.67.10 ip_src:10.1.67.100 ovlan:4002 ivlan:1000******</msg>
<status status="PASS" endtime="20190113 23:43:10.433" starttime="20190113 23:43:10.431"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>mac_dst=${mac_dst}</arg>
<arg>mac_src=${mac_src}</arg>
<arg>l3_protocol=ipv4</arg>
<arg>ip_dst_addr=${ip_dst}</arg>
<arg>ip_src_addr=${ip_src}</arg>
<arg>l4_protocol=udp</arg>
<arg>udp_dst_port=${udp_dst_port}</arg>
<arg>udp_src_port=${udp_src_port}</arg>
<arg>length_mode=fixed</arg>
<arg>frame_size=${frame_size}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:43:10.436" starttime="20190113 23:43:10.434"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>evaluate</arg>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<assign>
<var>${rate_bps}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<status status="PASS" endtime="20190113 23:43:10.442" starttime="20190113 23:43:10.440"></status>
</kw>
<msg timestamp="20190113 23:43:10.443" level="INFO">${rate_bps} = 10000000</msg>
<status status="PASS" endtime="20190113 23:43:10.443" starttime="20190113 23:43:10.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'!='${rate_pps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_pps=${rate_pps}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:43:10.447" starttime="20190113 23:43:10.446"></status>
</kw>
<status status="PASS" endtime="20190113 23:43:10.448" starttime="20190113 23:43:10.444"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'=='${ovlan}'</arg>
<arg>TG Create Untagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'=='${ivlan}'</arg>
<arg>TG Create Single Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE</arg>
<arg>TG Create Double Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ivlan}</arg>
<arg>${ivlan_pbit}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<kw name="Tg Create Double Tagged Stream On Port" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Create double tag stream by name on traffic generator port.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ivlan}</arg>
<arg>${ivlan_pbit}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<msg timestamp="20190113 23:43:11.827" level="INFO">CsHLT::traffic_conf create 11/9 { -vlan_user_priority 0 -vlan_id_outer 4002 -mac_dst 00:00:00:11:11:11 -ip_dst_addr 10.1.67.10 -ip_src_addr 10.1.67.100 -frame_size 512 -l2_encap ethernet_ii_vlan -l3_protocol ipv4 -vlan_outer_user_priority 0 -udp_dst_port 6000 -vlan_id 1000 -mac_src 00:00:00:67:00:01 -l4_protocol udp -name downstream -length_mode fixed -udp_src_port 6000 -rate_bps 10000000}
create traffic is in process...
create traffic is done!
SUCCESS
streamblock2</msg>
<status status="PASS" endtime="20190113 23:43:11.827" starttime="20190113 23:43:10.451"></status>
</kw>
<status status="PASS" endtime="20190113 23:43:11.829" starttime="20190113 23:43:10.449"></status>
</kw>
<status status="PASS" endtime="20190113 23:43:11.830" starttime="20190113 23:43:10.428"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>send traffic and capture</arg>
</arguments>
<msg timestamp="20190113 23:43:11.833" level="INFO">send traffic and capture</msg>
<status status="PASS" endtime="20190113 23:43:11.833" starttime="20190113 23:43:11.832"></status>
</kw>
<kw name="Tg Clear Traffic Stats" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Clear Traffic statistics.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:43:18.917" starttime="20190113 23:43:11.834"></status>
</kw>
<kw name="start_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:start capture before start traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Config Packet Buffers" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Define how the buffers will be managed for packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<msg timestamp="20190113 23:43:18.963" level="INFO">[CsHLT::packetConfigBuffers port1 stop {}
stop capture buffer is in process...
response info: ====&gt; {status 1}
stop capture buffer is done!
SUCCESS
]</msg>
<status status="PASS" endtime="20190113 23:43:18.964" starttime="20190113 23:43:18.921"></status>
</kw>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>start</arg>
</arguments>
<status status="PASS" endtime="20190113 23:43:20.931" starttime="20190113 23:43:18.965"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after start_capture</arg>
</arguments>
<msg timestamp="20190113 23:43:20.937" level="INFO">wait 1s after start_capture</msg>
<status status="PASS" endtime="20190113 23:43:20.938" starttime="20190113 23:43:20.936"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:43:21.940" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:43:21.940" starttime="20190113 23:43:20.939"></status>
</kw>
<status status="PASS" endtime="20190113 23:43:21.941" starttime="20190113 23:43:18.919"></status>
</kw>
<kw name="start_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:start capture before start traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Config Packet Buffers" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Define how the buffers will be managed for packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<msg timestamp="20190113 23:43:21.983" level="INFO">[CsHLT::packetConfigBuffers port2 stop {}
stop capture buffer is in process...
response info: ====&gt; {status 1}
stop capture buffer is done!
SUCCESS
]</msg>
<status status="PASS" endtime="20190113 23:43:21.983" starttime="20190113 23:43:21.945"></status>
</kw>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>start</arg>
</arguments>
<status status="PASS" endtime="20190113 23:43:23.849" starttime="20190113 23:43:21.985"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after start_capture</arg>
</arguments>
<msg timestamp="20190113 23:43:23.852" level="INFO">wait 1s after start_capture</msg>
<status status="PASS" endtime="20190113 23:43:23.852" starttime="20190113 23:43:23.851"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:43:24.855" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:43:24.855" starttime="20190113 23:43:23.853"></status>
</kw>
<status status="PASS" endtime="20190113 23:43:24.856" starttime="20190113 23:43:21.944"></status>
</kw>
<kw name="Tg Start All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Start All the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:43:34.734" starttime="20190113 23:43:24.858"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${traffic_run_time}</arg>
<arg>Wait for traffic run</arg>
</arguments>
<msg timestamp="20190113 23:43:44.737" level="INFO">Slept 10 seconds</msg>
<msg timestamp="20190113 23:43:44.738" level="INFO">Wait for traffic run</msg>
<status status="PASS" endtime="20190113 23:43:44.738" starttime="20190113 23:43:34.736"></status>
</kw>
<kw name="Tg Stop All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Stop all the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:43:53.945" starttime="20190113 23:43:44.739"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${stc_wait_time}</arg>
<arg>wait for stc stop</arg>
</arguments>
<msg timestamp="20190113 23:43:58.948" level="INFO">Slept 5 seconds</msg>
<msg timestamp="20190113 23:43:58.949" level="INFO">wait for stc stop</msg>
<status status="PASS" endtime="20190113 23:43:58.949" starttime="20190113 23:43:53.947"></status>
</kw>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:44:00.600" starttime="20190113 23:43:58.952"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:44:00.603" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:44:00.603" starttime="20190113 23:44:00.602"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:44:01.605" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:44:01.605" starttime="20190113 23:44:00.604"></status>
</kw>
<status status="PASS" endtime="20190113 23:44:01.606" starttime="20190113 23:43:58.950"></status>
</kw>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:44:03.728" starttime="20190113 23:44:01.611"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:44:03.732" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:44:03.732" starttime="20190113 23:44:03.731"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:44:04.734" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:44:04.734" starttime="20190113 23:44:03.733"></status>
</kw>
<status status="PASS" endtime="20190113 23:44:04.736" starttime="20190113 23:44:01.609"></status>
</kw>
<kw name="Tg Verify Traffic Loss Rate For All Streams Is Within" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Verify the packages loss rate of all the created stream in traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>${traffic_loss_rate}</arg>
</arguments>
<msg timestamp="20190113 23:44:05.725" level="INFO">[CsHLT::print_stats 
printing stats...
#############################################
port1:
    stream:
        streamblock2:
            rx:
                misinserted_pkts: 0
                total_pkt_bytes: 15740928
                prbs_bit_errors: 0
                ipv4_outer_present: 0
                min_delay: 5.24
                ipv6_outer_present: 0
                rx_sig_count: 31232
                max_delay: 6.18
                avg_delay: 5.829887535220287
                duplicate_pkts: 0
                out_of_sequence_pkts: 0
                total_pkts: 31232
                rx_sig_rate: 0
                dropped_pkts: 95
                first_tstamp: 0.0
                udp_present: 1
                total_pkt_bit_rate: 0
                ipv4_present: 1
                min_pkt_length: 0
                last_tstamp: 0.0
                total_pkt_rate: 0
                max_pkt_length: 0
                ipv6_present: 0
                rx_port: 10.245.252.60-11-8 //11/8  10.245.252.60-11-8 //11/8 
                tcp_present: 0
                dropped_pkts_percent: 0.3032527851374214
            tx:
                total_pkt_bytes: 16039424
                total_pkt_rate: 0
                total_pkts: 31327
                ipv4_outer_present: 0
                udp_present: 1
                ipv6_present: 0
                total_pkt_bit_rate: 0
                ipv6_outer_present: 0
                tcp_present: 0
                ipv4_present: 1
status: 1
#############################################
SUCCESS
]
[CsHLT::print_stats 
printing stats...
#############################################
port2:
    stream:
        streamblock1:
            rx:
                misinserted_pkts: 0
                total_pkt_bytes: 16302520
                prbs_bit_errors: 0
                ipv4_outer_present: 0
                min_delay: 5.215
                ipv6_outer_present: 0
                rx_sig_count: 31351
                max_delay: 6.0225
                avg_delay: 5.740457959873688
                duplicate_pkts: 0
                out_of_sequence_pkts: 0
                total_pkts: 31351
                rx_sig_rate: 0
                dropped_pkts: 0
                first_tstamp: 0.0
                udp_present: 1
                total_pkt_bit_rate: 0
                ipv4_present: 1
                min_pkt_length: 0
                last_tstamp: 0.0
                total_pkt_rate: 0
                max_pkt_length: 0
                ipv6_present: 0
                rx_port: 10.245.252.60-11-9 //11/9  10.245.252.60-11-9 //11/9 
                tcp_present: 0
                dropped_pkts_percent: 0.0
            tx:
                total_pkt_bytes: 16051712
                total_pkt_rate: 0
                total_pkts: 31351
                ipv4_outer_present: 0
                udp_present: 1
                ipv6_present: 0
                total_pkt_bit_rate: 0
                ipv6_outer_present: 0
                tcp_present: 0
                ipv4_present: 1
status: 1
#############################################
SUCCESS
]</msg>
<status status="PASS" endtime="20190113 23:44:05.725" starttime="20190113 23:44:04.739"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>save packet</arg>
</arguments>
<msg timestamp="20190113 23:44:05.728" level="INFO">save packet</msg>
<status status="PASS" endtime="20190113 23:44:05.728" starttime="20190113 23:44:05.727"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${packet_store_path}/${TEST NAME}_service_p1.pcap</arg>
</arguments>
<assign>
<var>${save_file_service_p1}</var>
</assign>
<msg timestamp="20190113 23:44:05.730" level="INFO">${save_file_service_p1} = /tmp/tc_add_cevlan_tag_service_p1.pcap</msg>
<status status="PASS" endtime="20190113 23:44:05.730" starttime="20190113 23:44:05.729"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${packet_store_path}/${TEST NAME}_subscriber_p1.pcap</arg>
</arguments>
<assign>
<var>${save_file_subscriber_p1}</var>
</assign>
<msg timestamp="20190113 23:44:05.732" level="INFO">${save_file_subscriber_p1} = /tmp/tc_add_cevlan_tag_subscriber_p1.pcap</msg>
<status status="PASS" endtime="20190113 23:44:05.732" starttime="20190113 23:44:05.731"></status>
</kw>
<kw name="Tg Store Captured Packets" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Store captured packets.</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
<arg>${save_file_service_p1}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:44:11.229" starttime="20190113 23:44:05.733"></status>
</kw>
<kw name="Tg Store Captured Packets" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Store captured packets.</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
<arg>${save_file_subscriber_p1}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:44:16.663" starttime="20190113 23:44:11.231"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
<arg>Wait for save captured packets to ${save_file_service_p1} and ${save_file_subscriber_p1}</arg>
</arguments>
<msg timestamp="20190113 23:44:26.667" level="INFO">Slept 10 seconds</msg>
<msg timestamp="20190113 23:44:26.667" level="INFO">Wait for save captured packets to /tmp/tc_add_cevlan_tag_service_p1.pcap and /tmp/tc_add_cevlan_tag_subscriber_p1.pcap</msg>
<status status="PASS" endtime="20190113 23:44:26.667" starttime="20190113 23:44:16.665"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>analyze upstream packet</arg>
</arguments>
<msg timestamp="20190113 23:44:26.669" level="INFO">analyze upstream packet</msg>
<status status="PASS" endtime="20190113 23:44:26.669" starttime="20190113 23:44:26.668"></status>
</kw>
<kw name="analyze_packet_count_greater_than" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: analyze filter packet count &gt;${value}</doc>
<arguments>
<arg>${save_file_service_p1}</arg>
<arg>${us_traffic_filter}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>********packet:[${save_file}] filter:[${filter}]***************</arg>
</arguments>
<msg timestamp="20190113 23:44:26.677" level="INFO">********packet:[/tmp/tc_add_cevlan_tag_service_p1.pcap] filter:[(vlan.id==4002) &amp;&amp; (vlan.id==1000) &amp;&amp; (eth.src==00:00:00:11:11:11) &amp;&amp; (eth.dst==00:00:00:67:00:01) &amp;&amp; (ip.src == 10.1.67.10) &amp;&amp; (ip.dst == 10.1.67.100)]***************</msg>
<status status="PASS" endtime="20190113 23:44:26.677" starttime="20190113 23:44:26.676"></status>
</kw>
<kw name="Wsk Load File" library="caferobot.trafficgen.tsharkadapter.TSharkAdapter">
<doc>Load wirshark recognizable cap file. filename is the cap file name ,</doc>
<arguments>
<arg>${save_file}</arg>
<arg>${filter}</arg>
</arguments>
<msg timestamp="20190113 23:44:26.753" level="DEBUG">Using selector: EpollSelector</msg>
<msg timestamp="20190113 23:45:05.737" level="INFO">DEBUG: Current FD count is 19</msg>
<status status="PASS" endtime="20190113 23:45:05.737" starttime="20190113 23:44:26.678"></status>
</kw>
<kw name="Wsk Get Total Packet Count" library="caferobot.trafficgen.tsharkadapter.TSharkAdapter">
<doc>Get total packet count of loaded cap file.</doc>
<assign>
<var>${cnt}</var>
</assign>
<msg timestamp="20190113 23:45:05.740" level="INFO">${cnt} = 13106</msg>
<status status="PASS" endtime="20190113 23:45:05.740" starttime="20190113 23:45:05.739"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>get packet is ${cnt}, expect more than ${value}</arg>
</arguments>
<msg timestamp="20190113 23:45:05.742" level="INFO">get packet is 13106, expect more than 0</msg>
<status status="PASS" endtime="20190113 23:45:05.742" starttime="20190113 23:45:05.740"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${cnt}&gt;${value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:45:05.744" starttime="20190113 23:45:05.743"></status>
</kw>
<status status="PASS" endtime="20190113 23:45:05.745" starttime="20190113 23:44:26.675"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>analyze downstream packet</arg>
</arguments>
<msg timestamp="20190113 23:45:05.746" level="INFO">analyze downstream packet</msg>
<status status="PASS" endtime="20190113 23:45:05.746" starttime="20190113 23:45:05.745"></status>
</kw>
<kw name="analyze_packet_count_greater_than" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: analyze filter packet count &gt;${value}</doc>
<arguments>
<arg>${save_file_subscriber_p1}</arg>
<arg>${ds_traffic_filter}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>********packet:[${save_file}] filter:[${filter}]***************</arg>
</arguments>
<msg timestamp="20190113 23:45:05.757" level="INFO">********packet:[/tmp/tc_add_cevlan_tag_subscriber_p1.pcap] filter:[eth.type == 0x0800 &amp;&amp; (eth.src==00:00:00:67:00:01) &amp;&amp; (eth.dst==00:00:00:11:11:11) &amp;&amp; (ip.src == 10.1.67.100) &amp;&amp; (ip.dst == 10.1.67.10)]***************</msg>
<status status="PASS" endtime="20190113 23:45:05.757" starttime="20190113 23:45:05.756"></status>
</kw>
<kw name="Wsk Load File" library="caferobot.trafficgen.tsharkadapter.TSharkAdapter">
<doc>Load wirshark recognizable cap file. filename is the cap file name ,</doc>
<arguments>
<arg>${save_file}</arg>
<arg>${filter}</arg>
</arguments>
<msg timestamp="20190113 23:45:07.026" level="DEBUG">Using selector: EpollSelector</msg>
<msg timestamp="20190113 23:45:42.676" level="INFO">DEBUG: Current FD count is 22</msg>
<status status="PASS" endtime="20190113 23:45:42.676" starttime="20190113 23:45:05.758"></status>
</kw>
<kw name="Wsk Get Total Packet Count" library="caferobot.trafficgen.tsharkadapter.TSharkAdapter">
<doc>Get total packet count of loaded cap file.</doc>
<assign>
<var>${cnt}</var>
</assign>
<msg timestamp="20190113 23:45:42.679" level="INFO">${cnt} = 13106</msg>
<status status="PASS" endtime="20190113 23:45:42.679" starttime="20190113 23:45:42.678"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>get packet is ${cnt}, expect more than ${value}</arg>
</arguments>
<msg timestamp="20190113 23:45:42.680" level="INFO">get packet is 13106, expect more than 0</msg>
<status status="PASS" endtime="20190113 23:45:42.681" starttime="20190113 23:45:42.679"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${cnt}&gt;${value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:45:42.682" starttime="20190113 23:45:42.681"></status>
</kw>
<status status="PASS" endtime="20190113 23:45:42.683" starttime="20190113 23:45:05.755"></status>
</kw>
<kw type="teardown" name="traffic_teardown" library="template_bidirection_raw_traffic_and_check">
<doc>teardown</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>stop_capture</arg>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:45:44.066" starttime="20190113 23:45:42.689"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:45:44.068" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:45:44.069" starttime="20190113 23:45:44.067"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:45:45.071" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:45:45.071" starttime="20190113 23:45:44.069"></status>
</kw>
<status status="PASS" endtime="20190113 23:45:45.072" starttime="20190113 23:45:42.688"></status>
</kw>
<status status="PASS" endtime="20190113 23:45:45.079" starttime="20190113 23:45:42.685"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>stop_capture</arg>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:45:45.663" starttime="20190113 23:45:45.083"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:45:45.666" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:45:45.666" starttime="20190113 23:45:45.665"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:45:46.667" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:45:46.668" starttime="20190113 23:45:45.666"></status>
</kw>
<status status="PASS" endtime="20190113 23:45:46.669" starttime="20190113 23:45:45.081"></status>
</kw>
<status status="PASS" endtime="20190113 23:45:46.670" starttime="20190113 23:45:45.080"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Tg Stop All Traffic</arg>
<arg>tg1</arg>
</arguments>
<kw name="Tg Stop All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Stop all the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:45:54.945" starttime="20190113 23:45:46.673"></status>
</kw>
<status status="PASS" endtime="20190113 23:45:54.946" starttime="20190113 23:45:46.672"></status>
</kw>
<kw name="Tg Delete All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Delete all the traffic in given traffic generator.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<msg timestamp="20190113 23:46:10.667" level="INFO">###############################
res is: CsHLT::traffic_conf reset None {}
reset traffic is in process...
reset traffic is done!
SUCCESS

###############################</msg>
<status status="PASS" endtime="20190113 23:46:10.667" starttime="20190113 23:45:54.948"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:10.669" starttime="20190113 23:45:42.683"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:10.672" starttime="20190113 23:42:41.709"></status>
</kw>
<kw type="teardown" name="case teardown">
<doc>teardown</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>svc teardown</arg>
</arguments>
<msg timestamp="20190113 23:46:10.692" level="INFO">svc teardown</msg>
<status status="PASS" endtime="20190113 23:46:10.692" starttime="20190113 23:46:10.691"></status>
</kw>
<kw name="subscriber_point_remove_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: delete l2 basic class-map and policy-map, remove service from subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>untagged</arg>
<arg>${service_vlan}</arg>
<arg>${cvlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:46:10.697" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:46:10.697" starttime="20190113 23:46:10.695"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove and delete l2 basic service from ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:46:10.698" level="INFO">****** [eutA] remove and delete l2 basic service from subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:46:10.699" starttime="20190113 23:46:10.697"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:10.703" starttime="20190113 23:46:10.702"></status>
</kw>
<msg timestamp="20190113 23:46:10.704" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 23:46:10.704" starttime="20190113 23:46:10.701"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 23:46:10.706" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 23:46:10.706" starttime="20190113 23:46:10.705"></status>
</kw>
<msg timestamp="20190113 23:46:10.707" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 23:46:10.707" starttime="20190113 23:46:10.699"></status>
</kw>
<kw name="l2_setting_dprov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove l2 basic service from ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:46:10.712" level="INFO">****** [eutA] remove l2 basic service from ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 23:46:10.712" starttime="20190113 23:46:10.711"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 23:46:10.714" level="INFO">${class_map} = auto_ClassMap_vuntagged</msg>
<status status="PASS" endtime="20190113 23:46:10.714" starttime="20190113 23:46:10.713"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 23:46:10.716" level="INFO">${policy_map} = auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 23:46:10.717" starttime="20190113 23:46:10.715"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:46:10.718" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:46:10.718" starttime="20190113 23:46:10.717"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:10.721" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:12.592" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v1000
   class-map-ethernet auto_ClassMap_vuntagged
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 23:46:12.593" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v1000
   class-map-ethernet auto_ClassMap_vuntagged
   ...</msg>
<status status="PASS" endtime="20190113 23:46:12.593" starttime="20190113 23:46:10.719"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove multicast-profile from interface</arg>
</arguments>
<msg timestamp="20190113 23:46:12.597" level="INFO">remove multicast-profile from interface</msg>
<status status="PASS" endtime="20190113 23:46:12.597" starttime="20190113 23:46:12.595"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:12.599" starttime="20190113 23:46:12.597"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove policy-map from interface</arg>
</arguments>
<msg timestamp="20190113 23:46:12.600" level="INFO">remove policy-map from interface</msg>
<status status="PASS" endtime="20190113 23:46:12.600" starttime="20190113 23:46:12.599"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:46:12.607" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:12.897" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:46:12.897" starttime="20190113 23:46:12.605"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:12.909" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:13.422" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:46:13.422" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:46:13.422" starttime="20190113 23:46:12.902"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:13.426" starttime="20190113 23:46:13.425"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:13.427" starttime="20190113 23:46:12.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:13.440" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:13.769" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:46:13.770" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:46:13.770" starttime="20190113 23:46:13.437"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:13.773" starttime="20190113 23:46:13.772"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:13.774" starttime="20190113 23:46:13.435"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:13.775" starttime="20190113 23:46:13.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:13.778" starttime="20190113 23:46:13.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:13.780" starttime="20190113 23:46:13.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:13.782" starttime="20190113 23:46:13.780"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:46:13.788" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:46:13.788" starttime="20190113 23:46:13.787"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:46:13.792" level="INFO">${value} = auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 23:46:13.792" starttime="20190113 23:46:13.790"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:46:13.794" level="INFO">${result_string} =  policy-map auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 23:46:13.794" starttime="20190113 23:46:13.792"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:13.794" starttime="20190113 23:46:13.789"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:13.794" starttime="20190113 23:46:13.788"></status>
</kw>
<msg timestamp="20190113 23:46:13.795" level="INFO">${cmd_string} =  policy-map auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 23:46:13.795" starttime="20190113 23:46:13.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:13.803" level="INFO">send session_command, cmd=no  policy-map auto_PolicyMap_v1000, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:14.385" level="INFO">session_command result=no  policy-map auto_PolicyMap_v1000
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:46:14.385" level="INFO">${res} = no  policy-map auto_PolicyMap_v1000
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:46:14.385" starttime="20190113 23:46:13.800"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:14.388" starttime="20190113 23:46:14.387"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:14.389" starttime="20190113 23:46:13.798"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:14.390" starttime="20190113 23:46:13.796"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:46:14.393" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:14.682" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:46:14.683" starttime="20190113 23:46:14.392"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:14.684" starttime="20190113 23:46:12.602"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:14.685" starttime="20190113 23:46:12.601"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove svlan from interface</arg>
</arguments>
<msg timestamp="20190113 23:46:14.688" level="INFO">remove svlan from interface</msg>
<status status="PASS" endtime="20190113 23:46:14.688" starttime="20190113 23:46:14.687"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:46:14.695" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:14.948" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:46:14.948" starttime="20190113 23:46:14.693"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:14.955" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:15.239" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:46:15.240" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:46:15.240" starttime="20190113 23:46:14.952"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:15.243" starttime="20190113 23:46:15.242"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:15.243" starttime="20190113 23:46:14.950"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:15.247" starttime="20190113 23:46:15.245"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:15.249" starttime="20190113 23:46:15.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:15.250" starttime="20190113 23:46:15.249"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:15.252" starttime="20190113 23:46:15.251"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:46:15.259" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:46:15.259" starttime="20190113 23:46:15.258"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = vlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:46:15.263" level="INFO">${value} = 4002</msg>
<status status="PASS" endtime="20190113 23:46:15.263" starttime="20190113 23:46:15.262"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:46:15.265" level="INFO">${result_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 23:46:15.265" starttime="20190113 23:46:15.264"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:15.265" starttime="20190113 23:46:15.261"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:15.266" starttime="20190113 23:46:15.260"></status>
</kw>
<msg timestamp="20190113 23:46:15.266" level="INFO">${cmd_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 23:46:15.267" starttime="20190113 23:46:15.256"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:15.273" level="INFO">send session_command, cmd=no  vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:15.817" level="INFO">session_command result=no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:46:15.818" level="INFO">${res} = no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:46:15.818" starttime="20190113 23:46:15.271"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:15.821" starttime="20190113 23:46:15.820"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:15.821" starttime="20190113 23:46:15.269"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:15.823" starttime="20190113 23:46:15.267"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:46:15.827" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:16.097" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:46:16.098" starttime="20190113 23:46:15.824"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:16.099" starttime="20190113 23:46:14.690"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:16.100" starttime="20190113 23:46:14.689"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:46:16.103" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:46:16.103" starttime="20190113 23:46:16.102"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:16.106" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:17.755" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 23:46:17.755" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:46:17.756" starttime="20190113 23:46:16.104"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete policy-map</arg>
</arguments>
<msg timestamp="20190113 23:46:17.758" level="INFO">delete policy-map</msg>
<status status="PASS" endtime="20190113 23:46:17.759" starttime="20190113 23:46:17.757"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map</arg>
<arg>${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:46:17.763" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:18.060" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:46:18.061" starttime="20190113 23:46:17.761"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:18.067" level="INFO">send session_command, cmd=no policy-map auto_PolicyMap_v1000, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:19.099" level="INFO">session_command result=no policy-map auto_PolicyMap_v1000
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:46:19.100" level="INFO">${res} = no policy-map auto_PolicyMap_v1000
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:46:19.100" starttime="20190113 23:46:18.065"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:19.107" starttime="20190113 23:46:19.105"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:19.107" starttime="20190113 23:46:18.062"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:46:19.110" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:19.389" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:46:19.390" starttime="20190113 23:46:19.109"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:19.392" starttime="20190113 23:46:17.759"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete class-map</arg>
</arguments>
<msg timestamp="20190113 23:46:19.394" level="INFO">delete class-map</msg>
<status status="PASS" endtime="20190113 23:46:19.395" starttime="20190113 23:46:19.394"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:46:19.399" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:19.674" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:46:19.674" starttime="20190113 23:46:19.397"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:19.688" level="INFO">send session_command, cmd=no class-map ethernet auto_ClassMap_vuntagged, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:20.070" level="INFO">session_command result=no class-map ethernet auto_ClassMap_vuntagged
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:46:20.071" level="INFO">${res} = no class-map ethernet auto_ClassMap_vuntagged
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:46:20.071" starttime="20190113 23:46:19.679"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:20.074" starttime="20190113 23:46:20.073"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:20.075" starttime="20190113 23:46:19.677"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:46:20.079" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:20.353" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:46:20.353" starttime="20190113 23:46:20.077"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:20.354" starttime="20190113 23:46:19.395"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:20.356" starttime="20190113 23:46:10.708"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:20.357" starttime="20190113 23:46:10.693"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:20.358" starttime="20190113 23:46:10.690"></status>
</kw>
<doc>1 create a class-map to match untag in flow 1 succesfully
2 create a policy-map to bind the class-map and add cevlan tag x succesfully
3 add eth-port1 to s-tag with transport-service-profile succesfully
4 apply the s-tag and policy-map to ethernet uni succesfully
5 send untag upstream traffic to ethernet uni and downstream with s-tag and c-tag to eth-port1 eth-port1 can pass the upstream traffic with right double tag; client can receive the downstream traffic with untag.</doc>
<tags>
<tag>@author=MinGu</tag>
<tag>@eut=10GE-12</tag>
<tag>@feature=Policy Map</tag>
<tag>@globalid=2532599</tag>
<tag>@priority=P1</tag>
<tag>@subFeature=10GE-12: Policy Map support</tag>
<tag>@tcid=AXOS_E72_PARENT-TC-4350</tag>
<tag>@user_interface=CLI</tag>
</tags>
<status status="PASS" endtime="20190113 23:46:20.374" critical="yes" starttime="20190113 23:42:29.486"></status>
</test>
<status status="PASS" endtime="20190113 23:46:20.458" starttime="20190113 23:42:29.263"></status>
</suite>
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/Policy_Map/testcase/tc_remove_cevlan.robot" id="s1-s1-s1-s1-s1-s1-s1-s2" name="Tc Remove Cevlan">
<test id="s1-s1-s1-s1-s1-s1-s1-s2-t1" name="tc_remove_cevlan">
<kw type="setup" name="case setup">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:1 create a class-map to match VLAN x in flow 1</arg>
</arguments>
<msg timestamp="20190113 23:46:20.817" level="INFO">STEP:1 create a class-map to match VLAN x in flow 1</msg>
<status status="PASS" endtime="20190113 23:46:20.818" starttime="20190113 23:46:20.816"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:2 create a policy-map to bind the class-map with the action of remove cevlan</arg>
</arguments>
<msg timestamp="20190113 23:46:20.821" level="INFO">STEP:2 create a policy-map to bind the class-map with the action of remove cevlan</msg>
<status status="PASS" endtime="20190113 23:46:20.821" starttime="20190113 23:46:20.819"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:3 add eth-port1 to s-tag with transport-service-profile</arg>
</arguments>
<msg timestamp="20190113 23:46:20.824" level="INFO">STEP:3 add eth-port1 to s-tag with transport-service-profile</msg>
<status status="PASS" endtime="20190113 23:46:20.825" starttime="20190113 23:46:20.822"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:4 apply the s-tag and policy-map to ethernet uni</arg>
</arguments>
<msg timestamp="20190113 23:46:20.827" level="INFO">STEP:4 apply the s-tag and policy-map to ethernet uni</msg>
<status status="PASS" endtime="20190113 23:46:20.827" starttime="20190113 23:46:20.826"></status>
</kw>
<kw name="subscriber_point_add_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create l2 basic class-map and policy-map, add service to subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>${match_vlan}</arg>
<arg>${service_vlan}</arg>
<arg>remove-cevlan</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:46:20.839" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:46:20.839" starttime="20190113 23:46:20.838"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] create and add l2 basic service to ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:46:20.841" level="INFO">****** [eutA] create and add l2 basic service to subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:46:20.841" starttime="20190113 23:46:20.840"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:20.847" starttime="20190113 23:46:20.845"></status>
</kw>
<msg timestamp="20190113 23:46:20.847" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 23:46:20.847" starttime="20190113 23:46:20.844"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 23:46:20.849" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 23:46:20.849" starttime="20190113 23:46:20.848"></status>
</kw>
<msg timestamp="20190113 23:46:20.850" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 23:46:20.850" starttime="20190113 23:46:20.842"></status>
</kw>
<kw name="l2_setting_prov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${ctag_action}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan_action}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<assign>
<var>&amp;{dict_prf}</var>
</assign>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] add l2 basic service to ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:46:20.862" level="INFO">****** [eutA] add l2 basic service to ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 23:46:20.862" starttime="20190113 23:46:20.861"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 23:46:20.864" level="INFO">${class_map} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 23:46:20.864" starttime="20190113 23:46:20.863"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 23:46:20.867" level="INFO">${policy_map} = auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 23:46:20.867" starttime="20190113 23:46:20.865"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>classmap=${class_map}</arg>
<arg>policymap=${policy_map}</arg>
</arguments>
<assign>
<var>&amp;{dic_prf}</var>
</assign>
<msg timestamp="20190113 23:46:20.869" level="INFO">&amp;{dic_prf} = { classmap=auto_ClassMap_v4008 | policymap=auto_PolicyMap_v }</msg>
<status status="PASS" endtime="20190113 23:46:20.870" starttime="20190113 23:46:20.868"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create class-map</arg>
</arguments>
<msg timestamp="20190113 23:46:20.871" level="INFO">create class-map</msg>
<status status="PASS" endtime="20190113 23:46:20.871" starttime="20190113 23:46:20.870"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'untagged'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>untagged=${EMPTY}</arg>
<arg>ELSE IF</arg>
<arg>'any'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>any=${EMPTY}</arg>
<arg>ELSE</arg>
<arg>create dictionary</arg>
<arg>vlan=${match_vlan}</arg>
</arguments>
<assign>
<var>&amp;{dict_match_rule}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>vlan=${match_vlan}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:20.876" starttime="20190113 23:46:20.875"></status>
</kw>
<msg timestamp="20190113 23:46:20.876" level="INFO">&amp;{dict_match_rule} = { vlan=4008 }</msg>
<status status="PASS" endtime="20190113 23:46:20.877" starttime="20190113 23:46:20.872"></status>
</kw>
<kw name="prov_class_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision class-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map}</arg>
<arg>ethernet</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>1</arg>
<arg>&amp;{dict_match_rule}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:46:20.883" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:21.176" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:46:21.176" starttime="20190113 23:46:20.880"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ${class_map_type} ${class_map_name}</arg>
</arguments>
<msg timestamp="20190113 23:46:21.180" level="INFO">send session_command, cmd=class-map ethernet auto_ClassMap_v4008, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:21.662" level="INFO">session_command result=class-map ethernet auto_ClassMap_v4008
NGPON2X4(config-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 23:46:21.663" starttime="20190113 23:46:21.178"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${flow_type} ${flow_index}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:21.669" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:22.024" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:46:22.024" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:46:22.025" starttime="20190113 23:46:21.666"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:22.028" starttime="20190113 23:46:22.027"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:22.029" starttime="20190113 23:46:21.664"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:46:22.037" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:46:22.037" starttime="20190113 23:46:22.036"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = vlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:46:22.041" level="INFO">${value} = 4008</msg>
<status status="PASS" endtime="20190113 23:46:22.041" starttime="20190113 23:46:22.039"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:46:22.043" level="INFO">${result_string} =  vlan 4008</msg>
<status status="PASS" endtime="20190113 23:46:22.043" starttime="20190113 23:46:22.041"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:22.043" starttime="20190113 23:46:22.038"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:22.043" starttime="20190113 23:46:22.038"></status>
</kw>
<msg timestamp="20190113 23:46:22.044" level="INFO">${cmd_string} =  vlan 4008</msg>
<status status="PASS" endtime="20190113 23:46:22.044" starttime="20190113 23:46:22.034"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>rule ${rule_index} match ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:22.049" level="INFO">send session_command, cmd=rule 1 match  vlan 4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:22.461" level="INFO">session_command result=rule 1 match  vlan 4008
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:46:22.461" level="INFO">${res} = rule 1 match  vlan 4008
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:46:22.462" starttime="20190113 23:46:22.046"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:22.465" starttime="20190113 23:46:22.463"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:22.465" starttime="20190113 23:46:22.045"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:46:22.469" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:22.768" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:46:22.768" starttime="20190113 23:46:22.468"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:22.770" starttime="20190113 23:46:20.878"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create policy-map</arg>
</arguments>
<msg timestamp="20190113 23:46:22.773" level="INFO">create policy-map</msg>
<status status="PASS" endtime="20190113 23:46:22.773" starttime="20190113 23:46:22.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ctag_action}'=='add-ctag' or '${ctag_action}'=='add-cevlan-tag' or '${cevlan_action}'=='add-cevlan-tag'</arg>
<arg>release_cmd_adapter</arg>
<arg>${device}</arg>
<arg>${prov_policy_map_config_add_tag}</arg>
<arg>ELSE</arg>
<arg>set variable</arg>
<arg>${ctag_action}</arg>
</arguments>
<assign>
<var>${ctag_action}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${ctag_action}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:22.778" starttime="20190113 23:46:22.777"></status>
</kw>
<msg timestamp="20190113 23:46:22.778" level="INFO">${ctag_action} = remove-cevlan</msg>
<status status="PASS" endtime="20190113 23:46:22.778" starttime="20190113 23:46:22.774"></status>
</kw>
<kw name="prov_policy_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision policy-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>${ctag_action}=${cvlan}</arg>
<arg>${cevlan_action}=${cevlan}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:46:22.785" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:23.079" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:46:23.080" starttime="20190113 23:46:22.782"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<msg timestamp="20190113 23:46:23.085" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:23.431" level="INFO">session_command result=policy-map auto_PolicyMap_v
NGPON2X4(config-policy-map-auto_PolicyMap_v)</msg>
<status status="PASS" endtime="20190113 23:46:23.431" starttime="20190113 23:46:23.082"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:23.438" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:23.911" level="INFO">session_command result=class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<msg timestamp="20190113 23:46:23.912" level="INFO">${res} = class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 23:46:23.912" starttime="20190113 23:46:23.435"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:23.915" starttime="20190113 23:46:23.914"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:23.916" starttime="20190113 23:46:23.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:23.923" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:24.306" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:46:24.306" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:46:24.307" starttime="20190113 23:46:23.920"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:24.310" starttime="20190113 23:46:24.308"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:24.310" starttime="20190113 23:46:23.919"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:24.312" starttime="20190113 23:46:23.917"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:46:24.319" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:46:24.319" starttime="20190113 23:46:24.318"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = remove-cevlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:46:24.323" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190113 23:46:24.323" starttime="20190113 23:46:24.322"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:46:24.326" level="INFO">${result_string} =  remove-cevlan </msg>
<status status="PASS" endtime="20190113 23:46:24.326" starttime="20190113 23:46:24.324"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:24.326" starttime="20190113 23:46:24.321"></status>
</kw>
<kw type="foritem" name="${key} = ">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:46:24.329" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190113 23:46:24.329" starttime="20190113 23:46:24.328"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:46:24.331" level="INFO">${result_string} =  remove-cevlan   </msg>
<status status="PASS" endtime="20190113 23:46:24.331" starttime="20190113 23:46:24.330"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:24.331" starttime="20190113 23:46:24.327"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:24.332" starttime="20190113 23:46:24.320"></status>
</kw>
<msg timestamp="20190113 23:46:24.332" level="INFO">${cmd_string} =  remove-cevlan   </msg>
<status status="PASS" endtime="20190113 23:46:24.332" starttime="20190113 23:46:24.316"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:24.346" level="INFO">send session_command, cmd= remove-cevlan   , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:24.791" level="INFO">session_command result= remove-cevlan   
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:46:24.792" level="INFO">${res} =  remove-cevlan   
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:46:24.792" starttime="20190113 23:46:24.336"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:24.795" starttime="20190113 23:46:24.794"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:24.796" starttime="20190113 23:46:24.334"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:24.798" starttime="20190113 23:46:24.333"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:46:24.802" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:25.046" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:46:25.046" starttime="20190113 23:46:24.799"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:25.048" starttime="20190113 23:46:22.779"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add policy-map to interface</arg>
</arguments>
<msg timestamp="20190113 23:46:25.050" level="INFO">add policy-map to interface</msg>
<status status="PASS" endtime="20190113 23:46:25.050" starttime="20190113 23:46:25.049"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:25.067" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:26.888" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 23:46:26.888" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:46:26.888" starttime="20190113 23:46:25.061"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:26.892" starttime="20190113 23:46:26.891"></status>
</kw>
<msg timestamp="20190113 23:46:26.893" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:46:26.893" starttime="20190113 23:46:25.059"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 23:46:26.896" level="INFO">@{list_key} = [ ]</msg>
<status status="PASS" endtime="20190113 23:46:26.896" starttime="20190113 23:46:26.895"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<status status="PASS" endtime="20190113 23:46:26.898" starttime="20190113 23:46:26.897"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:26.899" starttime="20190113 23:46:25.056"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:26.902" starttime="20190113 23:46:25.051"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>no=shutdown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:46:26.908" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map= ******</msg>
<status status="PASS" endtime="20190113 23:46:26.908" starttime="20190113 23:46:26.907"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:46:26.912" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:27.298" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:46:27.298" starttime="20190113 23:46:26.909"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:27.305" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:27.623" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:46:27.624" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:46:27.624" starttime="20190113 23:46:27.302"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:27.627" starttime="20190113 23:46:27.626"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:27.628" starttime="20190113 23:46:27.300"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:27.636" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:28.466" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:46:28.467" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:46:28.467" starttime="20190113 23:46:27.633"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:28.470" starttime="20190113 23:46:28.469"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:28.470" starttime="20190113 23:46:27.631"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:28.474" starttime="20190113 23:46:27.629"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:28.477" starttime="20190113 23:46:28.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:28.479" starttime="20190113 23:46:28.478"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:28.481" starttime="20190113 23:46:28.480"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:46:28.488" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:46:28.488" starttime="20190113 23:46:28.487"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = no">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:46:28.492" level="INFO">${value} = shutdown</msg>
<status status="PASS" endtime="20190113 23:46:28.493" starttime="20190113 23:46:28.491"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:46:28.495" level="INFO">${result_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 23:46:28.495" starttime="20190113 23:46:28.493"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:28.495" starttime="20190113 23:46:28.490"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:28.496" starttime="20190113 23:46:28.489"></status>
</kw>
<msg timestamp="20190113 23:46:28.496" level="INFO">${cmd_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 23:46:28.497" starttime="20190113 23:46:28.485"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:28.511" level="INFO">send session_command, cmd= no shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:28.938" level="INFO">session_command result= no shutdown
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:46:28.938" level="INFO">${res} =  no shutdown
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:46:28.938" starttime="20190113 23:46:28.501"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:28.942" starttime="20190113 23:46:28.940"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:28.942" starttime="20190113 23:46:28.499"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:28.943" starttime="20190113 23:46:28.497"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:46:28.947" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:29.240" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:46:29.240" starttime="20190113 23:46:28.945"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:29.242" starttime="20190113 23:46:26.904"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:46:29.247" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map=auto_PolicyMap_v ******</msg>
<status status="PASS" endtime="20190113 23:46:29.247" starttime="20190113 23:46:29.246"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:46:29.250" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:29.479" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:46:29.479" starttime="20190113 23:46:29.248"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:29.486" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:29.760" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:46:29.760" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:46:29.760" starttime="20190113 23:46:29.483"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:29.763" starttime="20190113 23:46:29.762"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:29.764" starttime="20190113 23:46:29.481"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:29.772" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:30.057" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:46:30.058" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:46:30.058" starttime="20190113 23:46:29.769"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:30.061" starttime="20190113 23:46:30.060"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:30.062" starttime="20190113 23:46:29.767"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:30.063" starttime="20190113 23:46:29.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:30.071" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:30.577" level="INFO">session_command result=policy-map auto_PolicyMap_v
NGPON2X4(config-policy-map-auto_PolicyMap_v)</msg>
<msg timestamp="20190113 23:46:30.578" level="INFO">${res} = policy-map auto_PolicyMap_v
NGPON2X4(config-policy-map-auto_PolicyMap_v)</msg>
<status status="PASS" endtime="20190113 23:46:30.578" starttime="20190113 23:46:30.068"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:30.581" starttime="20190113 23:46:30.580"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:30.581" starttime="20190113 23:46:30.066"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:30.584" starttime="20190113 23:46:30.064"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:30.592" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:30.897" level="INFO">session_command result=class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<msg timestamp="20190113 23:46:30.898" level="INFO">${res} = class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 23:46:30.898" starttime="20190113 23:46:30.590"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:30.901" starttime="20190113 23:46:30.900"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:30.902" starttime="20190113 23:46:30.587"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:30.906" starttime="20190113 23:46:30.586"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:30.910" starttime="20190113 23:46:30.908"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:46:30.917" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:46:30.917" starttime="20190113 23:46:30.916"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 23:46:30.919" starttime="20190113 23:46:30.917"></status>
</kw>
<msg timestamp="20190113 23:46:30.919" level="INFO">${cmd_string} = </msg>
<status status="PASS" endtime="20190113 23:46:30.919" starttime="20190113 23:46:30.913"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:30.921" starttime="20190113 23:46:30.920"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:46:30.924" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:31.211" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:46:31.212" starttime="20190113 23:46:30.922"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:31.213" starttime="20190113 23:46:29.244"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add multicast-profile to interface</arg>
</arguments>
<msg timestamp="20190113 23:46:31.216" level="INFO">add multicast-profile to interface</msg>
<status status="PASS" endtime="20190113 23:46:31.216" starttime="20190113 23:46:31.215"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>prov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:31.218" starttime="20190113 23:46:31.217"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:46:31.219" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:46:31.220" starttime="20190113 23:46:31.219"></status>
</kw>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>policy-map=${policy_map}</arg>
<arg>class-map-ethernet=${class_map}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:46:31.232" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:46:33.096" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v
   class-map-ethernet auto_ClassMap_v4008
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 23:46:33.097" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v
   class-map-ethernet auto_ClassMap_v4008
    flow 1...</msg>
<status status="PASS" endtime="20190113 23:46:33.097" starttime="20190113 23:46:31.229"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:33.100" starttime="20190113 23:46:33.099"></status>
</kw>
<msg timestamp="20190113 23:46:33.101" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v
   class-map-ethernet auto_ClassMap_v4008
    flow 1...</msg>
<status status="PASS" endtime="20190113 23:46:33.101" starttime="20190113 23:46:31.227"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 23:46:33.104" level="INFO">@{list_key} = [ class-map-ethernet | policy-map ]</msg>
<status status="PASS" endtime="20190113 23:46:33.104" starttime="20190113 23:46:33.103"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<kw type="foritem" name="${check_item} = class-map-ethernet">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 23:46:33.108" level="INFO">${exp_value} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 23:46:33.108" starttime="20190113 23:46:33.106"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:33.110" starttime="20190113 23:46:33.108"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:33.110" starttime="20190113 23:46:33.105"></status>
</kw>
<kw type="foritem" name="${check_item} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 23:46:33.113" level="INFO">${exp_value} = auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 23:46:33.113" starttime="20190113 23:46:33.112"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:33.115" starttime="20190113 23:46:33.114"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:33.115" starttime="20190113 23:46:33.111"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:33.115" starttime="20190113 23:46:33.105"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:33.116" starttime="20190113 23:46:31.225"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:33.119" starttime="20190113 23:46:33.118"></status>
</kw>
<msg timestamp="20190113 23:46:33.120" level="INFO">&amp;{dict_prf} = { classmap=auto_ClassMap_v4008 | policymap=auto_PolicyMap_v }</msg>
<status status="PASS" endtime="20190113 23:46:33.120" starttime="20190113 23:46:20.858"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:33.130" starttime="20190113 23:46:20.835"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:33.138" starttime="20190113 23:46:20.814"></status>
</kw>
<kw name="template_bidirection_raw_traffic_and_check" library="template_bidirection_raw_traffic_and_check">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>create bidirection raw traffic, send traffic and check packet loss, analyze packet with filter</doc>
<arguments>
<arg>${tg_us_param}</arg>
<arg>${tg_ds_param}</arg>
<arg>${us_traffic_filter}</arg>
<arg>${ds_traffic_filter}</arg>
<arg>${traffic_loss_rate}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create upstream traffic</arg>
</arguments>
<msg timestamp="20190113 23:46:33.172" level="INFO">create upstream traffic</msg>
<status status="PASS" endtime="20190113 23:46:33.172" starttime="20190113 23:46:33.171"></status>
</kw>
<kw name="create_raw_traffic_udp" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create bound traffic with udp head on traffic generater</doc>
<arguments>
<arg>tg1</arg>
<arg>upstream</arg>
<arg>service_p1</arg>
<arg>subscriber_p1</arg>
<arg>&amp;{tg_us_param}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${tg} port ${src_port} to ${dst_port}] create raw traffic with mac_dst:${mac_dst} mac_src:${mac_src} ip_dst:${ip_dst} ip_src:${ip_src} ovlan:${ovlan} ivlan:${ivlan}******</arg>
</arguments>
<msg timestamp="20190113 23:46:33.195" level="INFO">****** [tg1 port subscriber_p1 to service_p1] create raw traffic with mac_dst:00:00:00:67:00:01 mac_src:00:00:00:11:11:11 ip_dst:10.1.67.100 ip_src:10.1.67.10 ovlan:4008 ivlan:******</msg>
<status status="PASS" endtime="20190113 23:46:33.195" starttime="20190113 23:46:33.193"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>mac_dst=${mac_dst}</arg>
<arg>mac_src=${mac_src}</arg>
<arg>l3_protocol=ipv4</arg>
<arg>ip_dst_addr=${ip_dst}</arg>
<arg>ip_src_addr=${ip_src}</arg>
<arg>l4_protocol=udp</arg>
<arg>udp_dst_port=${udp_dst_port}</arg>
<arg>udp_src_port=${udp_src_port}</arg>
<arg>length_mode=fixed</arg>
<arg>frame_size=${frame_size}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:33.197" starttime="20190113 23:46:33.196"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>evaluate</arg>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<assign>
<var>${rate_bps}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:33.201" starttime="20190113 23:46:33.200"></status>
</kw>
<msg timestamp="20190113 23:46:33.201" level="INFO">${rate_bps} = 10000000</msg>
<status status="PASS" endtime="20190113 23:46:33.201" starttime="20190113 23:46:33.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'!='${rate_pps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_pps=${rate_pps}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:33.205" starttime="20190113 23:46:33.203"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:33.205" starttime="20190113 23:46:33.202"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'=='${ovlan}'</arg>
<arg>TG Create Untagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'=='${ivlan}'</arg>
<arg>TG Create Single Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE</arg>
<arg>TG Create Double Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ivlan}</arg>
<arg>${ivlan_pbit}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<kw name="Tg Create Single Tagged Stream On Port" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Create single tagged stream by name on traffic generator port.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<msg timestamp="20190113 23:46:34.296" level="INFO">CsHLT::traffic_conf create 11/8 { -vlan_user_priority 0 -mac_src 00:00:00:11:11:11 -l4_protocol udp -name upstream -ip_dst_addr 10.1.67.100 -mac_dst 00:00:00:67:00:01 -frame_size 512 -udp_src_port 6000 -ip_src_addr 10.1.67.10 -rate_bps 10000000 -length_mode fixed -l2_encap ethernet_ii_vlan -l3_protocol ipv4 -udp_dst_port 6000 -vlan_id 4008}
create traffic is in process...
create traffic is done!
SUCCESS
streamblock3</msg>
<status status="PASS" endtime="20190113 23:46:34.297" starttime="20190113 23:46:33.208"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:34.298" starttime="20190113 23:46:33.206"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:34.299" starttime="20190113 23:46:33.191"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create downstream traffic</arg>
</arguments>
<msg timestamp="20190113 23:46:34.302" level="INFO">create downstream traffic</msg>
<status status="PASS" endtime="20190113 23:46:34.302" starttime="20190113 23:46:34.301"></status>
</kw>
<kw name="create_raw_traffic_udp" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create bound traffic with udp head on traffic generater</doc>
<arguments>
<arg>tg1</arg>
<arg>downstream</arg>
<arg>subscriber_p1</arg>
<arg>service_p1</arg>
<arg>&amp;{tg_ds_param}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${tg} port ${src_port} to ${dst_port}] create raw traffic with mac_dst:${mac_dst} mac_src:${mac_src} ip_dst:${ip_dst} ip_src:${ip_src} ovlan:${ovlan} ivlan:${ivlan}******</arg>
</arguments>
<msg timestamp="20190113 23:46:34.323" level="INFO">****** [tg1 port service_p1 to subscriber_p1] create raw traffic with mac_dst:00:00:00:11:11:11 mac_src:00:00:00:67:00:01 ip_dst:10.1.67.10 ip_src:10.1.67.100 ovlan:4002 ivlan:******</msg>
<status status="PASS" endtime="20190113 23:46:34.323" starttime="20190113 23:46:34.321"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>mac_dst=${mac_dst}</arg>
<arg>mac_src=${mac_src}</arg>
<arg>l3_protocol=ipv4</arg>
<arg>ip_dst_addr=${ip_dst}</arg>
<arg>ip_src_addr=${ip_src}</arg>
<arg>l4_protocol=udp</arg>
<arg>udp_dst_port=${udp_dst_port}</arg>
<arg>udp_src_port=${udp_src_port}</arg>
<arg>length_mode=fixed</arg>
<arg>frame_size=${frame_size}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:34.325" starttime="20190113 23:46:34.324"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>evaluate</arg>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<assign>
<var>${rate_bps}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:34.328" starttime="20190113 23:46:34.327"></status>
</kw>
<msg timestamp="20190113 23:46:34.329" level="INFO">${rate_bps} = 10000000</msg>
<status status="PASS" endtime="20190113 23:46:34.329" starttime="20190113 23:46:34.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'!='${rate_pps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_pps=${rate_pps}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:34.332" starttime="20190113 23:46:34.331"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:34.332" starttime="20190113 23:46:34.329"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'=='${ovlan}'</arg>
<arg>TG Create Untagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'=='${ivlan}'</arg>
<arg>TG Create Single Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE</arg>
<arg>TG Create Double Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ivlan}</arg>
<arg>${ivlan_pbit}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<kw name="Tg Create Single Tagged Stream On Port" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Create single tagged stream by name on traffic generator port.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<msg timestamp="20190113 23:46:35.534" level="INFO">CsHLT::traffic_conf create 11/9 { -vlan_user_priority 0 -mac_src 00:00:00:67:00:01 -l4_protocol udp -name downstream -ip_dst_addr 10.1.67.10 -mac_dst 00:00:00:11:11:11 -frame_size 512 -udp_src_port 6000 -ip_src_addr 10.1.67.100 -rate_bps 10000000 -length_mode fixed -l2_encap ethernet_ii_vlan -l3_protocol ipv4 -udp_dst_port 6000 -vlan_id 4002}
create traffic is in process...
create traffic is done!
SUCCESS
streamblock4</msg>
<status status="PASS" endtime="20190113 23:46:35.534" starttime="20190113 23:46:34.335"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:35.536" starttime="20190113 23:46:34.333"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:35.537" starttime="20190113 23:46:34.319"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>send traffic and capture</arg>
</arguments>
<msg timestamp="20190113 23:46:35.540" level="INFO">send traffic and capture</msg>
<status status="PASS" endtime="20190113 23:46:35.540" starttime="20190113 23:46:35.539"></status>
</kw>
<kw name="Tg Clear Traffic Stats" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Clear Traffic statistics.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:42.600" starttime="20190113 23:46:35.541"></status>
</kw>
<kw name="start_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:start capture before start traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Config Packet Buffers" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Define how the buffers will be managed for packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<msg timestamp="20190113 23:46:42.656" level="INFO">[CsHLT::packetConfigBuffers port1 stop {}
stop capture buffer is in process...
response info: ====&gt; {status 1}
stop capture buffer is done!
SUCCESS
]</msg>
<status status="PASS" endtime="20190113 23:46:42.656" starttime="20190113 23:46:42.603"></status>
</kw>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>start</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:44.060" starttime="20190113 23:46:42.658"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after start_capture</arg>
</arguments>
<msg timestamp="20190113 23:46:44.068" level="INFO">wait 1s after start_capture</msg>
<status status="PASS" endtime="20190113 23:46:44.068" starttime="20190113 23:46:44.067"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:46:45.070" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:46:45.070" starttime="20190113 23:46:44.069"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:45.071" starttime="20190113 23:46:42.601"></status>
</kw>
<kw name="start_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:start capture before start traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Config Packet Buffers" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Define how the buffers will be managed for packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<msg timestamp="20190113 23:46:45.115" level="INFO">[CsHLT::packetConfigBuffers port2 stop {}
stop capture buffer is in process...
response info: ====&gt; {status 1}
stop capture buffer is done!
SUCCESS
]</msg>
<status status="PASS" endtime="20190113 23:46:45.115" starttime="20190113 23:46:45.080"></status>
</kw>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>start</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:47.170" starttime="20190113 23:46:45.117"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after start_capture</arg>
</arguments>
<msg timestamp="20190113 23:46:47.173" level="INFO">wait 1s after start_capture</msg>
<status status="PASS" endtime="20190113 23:46:47.173" starttime="20190113 23:46:47.172"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:46:48.175" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:46:48.175" starttime="20190113 23:46:47.174"></status>
</kw>
<status status="PASS" endtime="20190113 23:46:48.176" starttime="20190113 23:46:45.078"></status>
</kw>
<kw name="Tg Start All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Start All the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:46:58.611" starttime="20190113 23:46:48.178"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${traffic_run_time}</arg>
<arg>Wait for traffic run</arg>
</arguments>
<msg timestamp="20190113 23:47:08.614" level="INFO">Slept 10 seconds</msg>
<msg timestamp="20190113 23:47:08.614" level="INFO">Wait for traffic run</msg>
<status status="PASS" endtime="20190113 23:47:08.615" starttime="20190113 23:46:58.612"></status>
</kw>
<kw name="Tg Stop All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Stop all the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:47:17.836" starttime="20190113 23:47:08.616"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${stc_wait_time}</arg>
<arg>wait for stc stop</arg>
</arguments>
<msg timestamp="20190113 23:47:22.850" level="INFO">Slept 5 seconds</msg>
<msg timestamp="20190113 23:47:22.851" level="INFO">wait for stc stop</msg>
<status status="PASS" endtime="20190113 23:47:22.851" starttime="20190113 23:47:17.849"></status>
</kw>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:47:24.373" starttime="20190113 23:47:22.853"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:47:24.376" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:47:24.376" starttime="20190113 23:47:24.375"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:47:25.377" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:47:25.378" starttime="20190113 23:47:24.376"></status>
</kw>
<status status="PASS" endtime="20190113 23:47:25.379" starttime="20190113 23:47:22.852"></status>
</kw>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:47:27.688" starttime="20190113 23:47:25.395"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:47:27.706" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:47:27.706" starttime="20190113 23:47:27.705"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:47:28.708" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:47:28.708" starttime="20190113 23:47:27.706"></status>
</kw>
<status status="PASS" endtime="20190113 23:47:28.709" starttime="20190113 23:47:25.393"></status>
</kw>
<kw name="Tg Verify Traffic Loss Rate For All Streams Is Within" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Verify the packages loss rate of all the created stream in traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>${traffic_loss_rate}</arg>
</arguments>
<msg timestamp="20190113 23:47:31.449" level="INFO">[CsHLT::print_stats 
printing stats...
#############################################
port1:
    stream:
        streamblock4:
            rx:
                misinserted_pkts: 0
                total_pkt_bytes: 16125952
                prbs_bit_errors: 0
                ipv4_outer_present: 0
                min_delay: 5.1875
                ipv6_outer_present: 0
                rx_sig_count: 31496
                max_delay: 6.18
                avg_delay: 5.827983474091948
                duplicate_pkts: 0
                out_of_sequence_pkts: 0
                total_pkts: 31496
                rx_sig_rate: 0
                dropped_pkts: 57
                first_tstamp: 0.0
                udp_present: 1
                total_pkt_bit_rate: 0
                ipv4_present: 1
                min_pkt_length: 0
                last_tstamp: 0.0
                total_pkt_rate: 0
                max_pkt_length: 0
                ipv6_present: 0
                rx_port: 10.245.252.60-11-8 //11/8  10.245.252.60-11-8 //11/8 
                tcp_present: 0
                dropped_pkts_percent: 0.18064843279561374
            tx:
                total_pkt_bytes: 16155136
                total_pkt_rate: 0
                total_pkts: 31553
                ipv4_outer_present: 0
                udp_present: 1
                ipv6_present: 0
                total_pkt_bit_rate: 0
                ipv6_outer_present: 0
                tcp_present: 0
                ipv4_present: 1
status: 1
#############################################
SUCCESS
]
[CsHLT::print_stats 
printing stats...
#############################################
port2:
    stream:
        streamblock3:
            rx:
                misinserted_pkts: 0
                total_pkt_bytes: 16077312
                prbs_bit_errors: 0
                ipv4_outer_present: 0
                min_delay: 5.2
                ipv6_outer_present: 0
                rx_sig_count: 31401
                max_delay: 6.0125
                avg_delay: 5.729402168720742
                duplicate_pkts: 0
                out_of_sequence_pkts: 0
                total_pkts: 31401
                rx_sig_rate: 0
                dropped_pkts: 0
                first_tstamp: 0.0
                udp_present: 1
                total_pkt_bit_rate: 0
                ipv4_present: 1
                min_pkt_length: 0
                last_tstamp: 0.0
                total_pkt_rate: 0
                max_pkt_length: 0
                ipv6_present: 0
                rx_port: 10.245.252.60-11-9 //11/9  10.245.252.60-11-9 //11/9 
                tcp_present: 0
                dropped_pkts_percent: 0.0
            tx:
                total_pkt_bytes: 16077312
                total_pkt_rate: 0
                total_pkts: 31401
                ipv4_outer_present: 0
                udp_present: 1
                ipv6_present: 0
                total_pkt_bit_rate: 0
                ipv6_outer_present: 0
                tcp_present: 0
                ipv4_present: 1
status: 1
#############################################
SUCCESS
]</msg>
<status status="PASS" endtime="20190113 23:47:31.450" starttime="20190113 23:47:28.712"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>save packet</arg>
</arguments>
<msg timestamp="20190113 23:47:31.452" level="INFO">save packet</msg>
<status status="PASS" endtime="20190113 23:47:31.452" starttime="20190113 23:47:31.451"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${packet_store_path}/${TEST NAME}_service_p1.pcap</arg>
</arguments>
<assign>
<var>${save_file_service_p1}</var>
</assign>
<msg timestamp="20190113 23:47:31.454" level="INFO">${save_file_service_p1} = /tmp/tc_remove_cevlan_service_p1.pcap</msg>
<status status="PASS" endtime="20190113 23:47:31.454" starttime="20190113 23:47:31.453"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${packet_store_path}/${TEST NAME}_subscriber_p1.pcap</arg>
</arguments>
<assign>
<var>${save_file_subscriber_p1}</var>
</assign>
<msg timestamp="20190113 23:47:31.456" level="INFO">${save_file_subscriber_p1} = /tmp/tc_remove_cevlan_subscriber_p1.pcap</msg>
<status status="PASS" endtime="20190113 23:47:31.456" starttime="20190113 23:47:31.455"></status>
</kw>
<kw name="Tg Store Captured Packets" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Store captured packets.</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
<arg>${save_file_service_p1}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:47:37.536" starttime="20190113 23:47:31.456"></status>
</kw>
<kw name="Tg Store Captured Packets" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Store captured packets.</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
<arg>${save_file_subscriber_p1}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:47:43.628" starttime="20190113 23:47:37.549"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
<arg>Wait for save captured packets to ${save_file_service_p1} and ${save_file_subscriber_p1}</arg>
</arguments>
<msg timestamp="20190113 23:47:53.651" level="INFO">Slept 10 seconds</msg>
<msg timestamp="20190113 23:47:53.651" level="INFO">Wait for save captured packets to /tmp/tc_remove_cevlan_service_p1.pcap and /tmp/tc_remove_cevlan_subscriber_p1.pcap</msg>
<status status="PASS" endtime="20190113 23:47:53.651" starttime="20190113 23:47:43.640"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>analyze upstream packet</arg>
</arguments>
<msg timestamp="20190113 23:47:53.653" level="INFO">analyze upstream packet</msg>
<status status="PASS" endtime="20190113 23:47:53.653" starttime="20190113 23:47:53.652"></status>
</kw>
<kw name="analyze_packet_count_greater_than" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: analyze filter packet count &gt;${value}</doc>
<arguments>
<arg>${save_file_service_p1}</arg>
<arg>${us_traffic_filter}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>********packet:[${save_file}] filter:[${filter}]***************</arg>
</arguments>
<msg timestamp="20190113 23:47:53.661" level="INFO">********packet:[/tmp/tc_remove_cevlan_service_p1.pcap] filter:[(vlan.id==4002) &amp;&amp; (eth.src==00:00:00:11:11:11) &amp;&amp; (eth.dst==00:00:00:67:00:01) &amp;&amp; (ip.src == 10.1.67.10) &amp;&amp; (ip.dst == 10.1.67.100)]***************</msg>
<status status="PASS" endtime="20190113 23:47:53.661" starttime="20190113 23:47:53.660"></status>
</kw>
<kw name="Wsk Load File" library="caferobot.trafficgen.tsharkadapter.TSharkAdapter">
<doc>Load wirshark recognizable cap file. filename is the cap file name ,</doc>
<arguments>
<arg>${save_file}</arg>
<arg>${filter}</arg>
</arguments>
<msg timestamp="20190113 23:47:56.265" level="DEBUG">Using selector: EpollSelector</msg>
<msg timestamp="20190113 23:48:32.260" level="INFO">DEBUG: Current FD count is 22</msg>
<status status="PASS" endtime="20190113 23:48:32.260" starttime="20190113 23:47:53.661"></status>
</kw>
<kw name="Wsk Get Total Packet Count" library="caferobot.trafficgen.tsharkadapter.TSharkAdapter">
<doc>Get total packet count of loaded cap file.</doc>
<assign>
<var>${cnt}</var>
</assign>
<msg timestamp="20190113 23:48:32.263" level="INFO">${cnt} = 13107</msg>
<status status="PASS" endtime="20190113 23:48:32.263" starttime="20190113 23:48:32.261"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>get packet is ${cnt}, expect more than ${value}</arg>
</arguments>
<msg timestamp="20190113 23:48:32.264" level="INFO">get packet is 13107, expect more than 0</msg>
<status status="PASS" endtime="20190113 23:48:32.264" starttime="20190113 23:48:32.263"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${cnt}&gt;${value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:48:32.266" starttime="20190113 23:48:32.265"></status>
</kw>
<status status="PASS" endtime="20190113 23:48:32.267" starttime="20190113 23:47:53.659"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>analyze downstream packet</arg>
</arguments>
<msg timestamp="20190113 23:48:32.268" level="INFO">analyze downstream packet</msg>
<status status="PASS" endtime="20190113 23:48:32.268" starttime="20190113 23:48:32.267"></status>
</kw>
<kw name="analyze_packet_count_greater_than" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: analyze filter packet count &gt;${value}</doc>
<arguments>
<arg>${save_file_subscriber_p1}</arg>
<arg>${ds_traffic_filter}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>********packet:[${save_file}] filter:[${filter}]***************</arg>
</arguments>
<msg timestamp="20190113 23:48:32.277" level="INFO">********packet:[/tmp/tc_remove_cevlan_subscriber_p1.pcap] filter:[(vlan.id==4008) &amp;&amp; (eth.src==00:00:00:67:00:01) &amp;&amp; (eth.dst==00:00:00:11:11:11) &amp;&amp; (ip.src == 10.1.67.100) &amp;&amp; (ip.dst == 10.1.67.10)]***************</msg>
<status status="PASS" endtime="20190113 23:48:32.277" starttime="20190113 23:48:32.276"></status>
</kw>
<kw name="Wsk Load File" library="caferobot.trafficgen.tsharkadapter.TSharkAdapter">
<doc>Load wirshark recognizable cap file. filename is the cap file name ,</doc>
<arguments>
<arg>${save_file}</arg>
<arg>${filter}</arg>
</arguments>
<msg timestamp="20190113 23:48:33.242" level="DEBUG">Using selector: EpollSelector</msg>
<msg timestamp="20190113 23:49:05.387" level="INFO">DEBUG: Current FD count is 22</msg>
<status status="PASS" endtime="20190113 23:49:05.387" starttime="20190113 23:48:32.278"></status>
</kw>
<kw name="Wsk Get Total Packet Count" library="caferobot.trafficgen.tsharkadapter.TSharkAdapter">
<doc>Get total packet count of loaded cap file.</doc>
<assign>
<var>${cnt}</var>
</assign>
<msg timestamp="20190113 23:49:05.389" level="INFO">${cnt} = 13107</msg>
<status status="PASS" endtime="20190113 23:49:05.389" starttime="20190113 23:49:05.388"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>get packet is ${cnt}, expect more than ${value}</arg>
</arguments>
<msg timestamp="20190113 23:49:05.391" level="INFO">get packet is 13107, expect more than 0</msg>
<status status="PASS" endtime="20190113 23:49:05.391" starttime="20190113 23:49:05.390"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${cnt}&gt;${value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:05.392" starttime="20190113 23:49:05.392"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:05.393" starttime="20190113 23:48:32.275"></status>
</kw>
<kw type="teardown" name="traffic_teardown" library="template_bidirection_raw_traffic_and_check">
<doc>teardown</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>stop_capture</arg>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:06.802" starttime="20190113 23:49:05.397"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:49:06.805" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:49:06.806" starttime="20190113 23:49:06.805"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:49:07.808" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:49:07.808" starttime="20190113 23:49:06.806"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:07.809" starttime="20190113 23:49:05.396"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:07.811" starttime="20190113 23:49:05.395"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>stop_capture</arg>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:08.416" starttime="20190113 23:49:07.818"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:49:08.419" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:49:08.419" starttime="20190113 23:49:08.418"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:49:09.423" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:49:09.424" starttime="20190113 23:49:08.420"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:09.424" starttime="20190113 23:49:07.816"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:09.426" starttime="20190113 23:49:07.814"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Tg Stop All Traffic</arg>
<arg>tg1</arg>
</arguments>
<kw name="Tg Stop All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Stop all the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:17.678" starttime="20190113 23:49:09.429"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:17.680" starttime="20190113 23:49:09.428"></status>
</kw>
<kw name="Tg Delete All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Delete all the traffic in given traffic generator.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<msg timestamp="20190113 23:49:32.489" level="INFO">###############################
res is: CsHLT::traffic_conf reset None {}
reset traffic is in process...
reset traffic is done!
SUCCESS

###############################</msg>
<status status="PASS" endtime="20190113 23:49:32.490" starttime="20190113 23:49:17.682"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:32.491" starttime="20190113 23:49:05.393"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:32.492" starttime="20190113 23:46:33.168"></status>
</kw>
<kw type="teardown" name="case teardown">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>svc teardown</arg>
</arguments>
<msg timestamp="20190113 23:49:32.552" level="INFO">svc teardown</msg>
<status status="PASS" endtime="20190113 23:49:32.552" starttime="20190113 23:49:32.551"></status>
</kw>
<kw name="subscriber_point_remove_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: delete l2 basic class-map and policy-map, remove service from subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>${match_vlan}</arg>
<arg>${service_vlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:49:32.556" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:49:32.556" starttime="20190113 23:49:32.555"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove and delete l2 basic service from ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:49:32.557" level="INFO">****** [eutA] remove and delete l2 basic service from subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:49:32.557" starttime="20190113 23:49:32.556"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:32.569" starttime="20190113 23:49:32.568"></status>
</kw>
<msg timestamp="20190113 23:49:32.570" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 23:49:32.570" starttime="20190113 23:49:32.559"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 23:49:32.571" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 23:49:32.571" starttime="20190113 23:49:32.570"></status>
</kw>
<msg timestamp="20190113 23:49:32.572" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 23:49:32.572" starttime="20190113 23:49:32.558"></status>
</kw>
<kw name="l2_setting_dprov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove l2 basic service from ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:49:32.576" level="INFO">****** [eutA] remove l2 basic service from ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 23:49:32.576" starttime="20190113 23:49:32.575"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 23:49:32.577" level="INFO">${class_map} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 23:49:32.578" starttime="20190113 23:49:32.576"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 23:49:32.580" level="INFO">${policy_map} = auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 23:49:32.580" starttime="20190113 23:49:32.578"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:49:32.581" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:49:32.581" starttime="20190113 23:49:32.580"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:32.591" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:34.589" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v
   class-map-ethernet auto_ClassMap_v4008
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 23:49:34.589" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v
   class-map-ethernet auto_ClassMap_v4008
    flow 1...</msg>
<status status="PASS" endtime="20190113 23:49:34.590" starttime="20190113 23:49:32.582"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove multicast-profile from interface</arg>
</arguments>
<msg timestamp="20190113 23:49:34.592" level="INFO">remove multicast-profile from interface</msg>
<status status="PASS" endtime="20190113 23:49:34.592" starttime="20190113 23:49:34.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:34.593" starttime="20190113 23:49:34.592"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove policy-map from interface</arg>
</arguments>
<msg timestamp="20190113 23:49:34.595" level="INFO">remove policy-map from interface</msg>
<status status="PASS" endtime="20190113 23:49:34.595" starttime="20190113 23:49:34.594"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:49:34.601" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:34.905" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:49:34.906" starttime="20190113 23:49:34.599"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:34.912" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:35.304" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:49:35.305" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:49:35.305" starttime="20190113 23:49:34.910"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:35.307" starttime="20190113 23:49:35.306"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:35.308" starttime="20190113 23:49:34.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:35.314" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:35.660" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:49:35.660" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:49:35.661" starttime="20190113 23:49:35.312"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:35.664" starttime="20190113 23:49:35.663"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:35.664" starttime="20190113 23:49:35.311"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:35.665" starttime="20190113 23:49:35.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:35.671" starttime="20190113 23:49:35.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:35.673" starttime="20190113 23:49:35.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:35.674" starttime="20190113 23:49:35.673"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:49:35.680" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:49:35.680" starttime="20190113 23:49:35.679"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:49:35.682" level="INFO">${value} = auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 23:49:35.682" starttime="20190113 23:49:35.681"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:49:35.684" level="INFO">${result_string} =  policy-map auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 23:49:35.684" starttime="20190113 23:49:35.683"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:35.684" starttime="20190113 23:49:35.681"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:35.684" starttime="20190113 23:49:35.680"></status>
</kw>
<msg timestamp="20190113 23:49:35.685" level="INFO">${cmd_string} =  policy-map auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 23:49:35.685" starttime="20190113 23:49:35.677"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:35.690" level="INFO">send session_command, cmd=no  policy-map auto_PolicyMap_v, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:36.279" level="INFO">session_command result=no  policy-map auto_PolicyMap_v
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:49:36.279" level="INFO">${res} = no  policy-map auto_PolicyMap_v
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:49:36.279" starttime="20190113 23:49:35.688"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:36.293" starttime="20190113 23:49:36.291"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:36.293" starttime="20190113 23:49:35.687"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:36.295" starttime="20190113 23:49:35.685"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:49:36.298" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:36.570" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:49:36.570" starttime="20190113 23:49:36.296"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:36.579" starttime="20190113 23:49:34.597"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:36.580" starttime="20190113 23:49:34.595"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove svlan from interface</arg>
</arguments>
<msg timestamp="20190113 23:49:36.588" level="INFO">remove svlan from interface</msg>
<status status="PASS" endtime="20190113 23:49:36.589" starttime="20190113 23:49:36.588"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:49:36.595" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:36.857" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:49:36.857" starttime="20190113 23:49:36.593"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:36.864" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:37.124" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:49:37.125" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:49:37.125" starttime="20190113 23:49:36.862"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:37.129" starttime="20190113 23:49:37.127"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:37.129" starttime="20190113 23:49:36.859"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:37.132" starttime="20190113 23:49:37.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:37.135" starttime="20190113 23:49:37.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:37.137" starttime="20190113 23:49:37.135"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:37.139" starttime="20190113 23:49:37.137"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:49:37.145" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:49:37.145" starttime="20190113 23:49:37.144"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = vlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:49:37.149" level="INFO">${value} = 4002</msg>
<status status="PASS" endtime="20190113 23:49:37.149" starttime="20190113 23:49:37.148"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:49:37.152" level="INFO">${result_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 23:49:37.152" starttime="20190113 23:49:37.150"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:37.152" starttime="20190113 23:49:37.147"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:37.154" starttime="20190113 23:49:37.146"></status>
</kw>
<msg timestamp="20190113 23:49:37.155" level="INFO">${cmd_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 23:49:37.155" starttime="20190113 23:49:37.142"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:37.161" level="INFO">send session_command, cmd=no  vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:37.693" level="INFO">session_command result=no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:49:37.693" level="INFO">${res} = no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:49:37.694" starttime="20190113 23:49:37.159"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:37.697" starttime="20190113 23:49:37.696"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:37.698" starttime="20190113 23:49:37.157"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:37.700" starttime="20190113 23:49:37.155"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:49:37.705" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:38.006" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:49:38.007" starttime="20190113 23:49:37.702"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:38.009" starttime="20190113 23:49:36.590"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:38.011" starttime="20190113 23:49:36.589"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:49:38.014" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:49:38.014" starttime="20190113 23:49:38.013"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:38.018" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:39.720" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 23:49:39.721" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:49:39.721" starttime="20190113 23:49:38.015"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete policy-map</arg>
</arguments>
<msg timestamp="20190113 23:49:39.723" level="INFO">delete policy-map</msg>
<status status="PASS" endtime="20190113 23:49:39.724" starttime="20190113 23:49:39.723"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map</arg>
<arg>${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:49:39.727" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:39.983" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:49:39.983" starttime="20190113 23:49:39.726"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:39.989" level="INFO">send session_command, cmd=no policy-map auto_PolicyMap_v, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:41.064" level="INFO">session_command result=no policy-map auto_PolicyMap_v
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:49:41.064" level="INFO">${res} = no policy-map auto_PolicyMap_v
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:49:41.065" starttime="20190113 23:49:39.986"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:41.067" starttime="20190113 23:49:41.066"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:41.068" starttime="20190113 23:49:39.985"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:49:41.072" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:41.356" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:49:41.356" starttime="20190113 23:49:41.070"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:41.358" starttime="20190113 23:49:39.724"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete class-map</arg>
</arguments>
<msg timestamp="20190113 23:49:41.360" level="INFO">delete class-map</msg>
<status status="PASS" endtime="20190113 23:49:41.360" starttime="20190113 23:49:41.359"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:49:41.366" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:41.575" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:49:41.575" starttime="20190113 23:49:41.363"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:41.581" level="INFO">send session_command, cmd=no class-map ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:41.977" level="INFO">session_command result=no class-map ethernet auto_ClassMap_v4008
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:49:41.977" level="INFO">${res} = no class-map ethernet auto_ClassMap_v4008
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:49:41.977" starttime="20190113 23:49:41.579"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:41.986" starttime="20190113 23:49:41.985"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:41.987" starttime="20190113 23:49:41.578"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:49:41.992" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:42.244" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:49:42.244" starttime="20190113 23:49:41.990"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:42.245" starttime="20190113 23:49:41.361"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:42.246" starttime="20190113 23:49:32.573"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:42.248" starttime="20190113 23:49:32.553"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:42.249" starttime="20190113 23:49:32.550"></status>
</kw>
<doc>1 create a class-map to match VLAN x in flow 1 succesfully
2 create a policy-map to bind the class-map with the action of remove cevlan succesfully
3 add eth-port1 to s-tag with transport-service-profile succesfully
4 apply the s-tag and policy-map to ethernet uni succesfully
5 send upstream traffic with VLAN x to ethernet uni and downstream with s-tag to eth-port1 eth-port1 can pass the upstream traffic with right tag; client can receive the downstream traffic with tag x</doc>
<tags>
<tag>@author=MinGu</tag>
<tag>@eut=10GE-12</tag>
<tag>@feature=Policy Map</tag>
<tag>@globalid=2532600</tag>
<tag>@priority=P1</tag>
<tag>@subFeature=10GE-12: Policy Map support</tag>
<tag>@tcid=AXOS_E72_PARENT-TC-4351</tag>
<tag>@user_interface=CLI</tag>
</tags>
<status status="PASS" endtime="20190113 23:49:42.277" critical="yes" starttime="20190113 23:46:20.699"></status>
</test>
<status status="PASS" endtime="20190113 23:49:42.335" starttime="20190113 23:46:20.540"></status>
</suite>
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/Policy_Map/testcase/tc_translate_cevlan_tag.robot" id="s1-s1-s1-s1-s1-s1-s1-s3" name="Tc Translate Cevlan Tag">
<test id="s1-s1-s1-s1-s1-s1-s1-s3-t1" name="tc_translate_cevlan_tag">
<kw type="setup" name="case setup">
<doc>setup</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:1 create a class-map to match VLAN x in flow 1</arg>
</arguments>
<msg timestamp="20190113 23:49:42.906" level="INFO">STEP:1 create a class-map to match VLAN x in flow 1</msg>
<status status="PASS" endtime="20190113 23:49:42.907" starttime="20190113 23:49:42.905"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:2 create a policy-map to bind the class-map with the action of translate-cevlan-tag</arg>
</arguments>
<msg timestamp="20190113 23:49:42.909" level="INFO">STEP:2 create a policy-map to bind the class-map with the action of translate-cevlan-tag</msg>
<status status="PASS" endtime="20190113 23:49:42.910" starttime="20190113 23:49:42.908"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:3 add eth-port1 to s-tag with transport-service-profile</arg>
</arguments>
<msg timestamp="20190113 23:49:42.911" level="INFO">STEP:3 add eth-port1 to s-tag with transport-service-profile</msg>
<status status="PASS" endtime="20190113 23:49:42.912" starttime="20190113 23:49:42.910"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:4 apply the s-tag and policy-map to ethernet uni</arg>
</arguments>
<msg timestamp="20190113 23:49:42.916" level="INFO">STEP:4 apply the s-tag and policy-map to ethernet uni</msg>
<status status="PASS" endtime="20190113 23:49:42.916" starttime="20190113 23:49:42.913"></status>
</kw>
<kw name="subscriber_point_add_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create l2 basic class-map and policy-map, add service to subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>${match_vlan}</arg>
<arg>${service_vlan}</arg>
<arg>translate-cevlan-tag</arg>
<arg>${translate_cvlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:49:42.926" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:49:42.926" starttime="20190113 23:49:42.925"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] create and add l2 basic service to ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:49:42.929" level="INFO">****** [eutA] create and add l2 basic service to subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:49:42.929" starttime="20190113 23:49:42.928"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:42.934" starttime="20190113 23:49:42.933"></status>
</kw>
<msg timestamp="20190113 23:49:42.935" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 23:49:42.935" starttime="20190113 23:49:42.932"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 23:49:42.936" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 23:49:42.937" starttime="20190113 23:49:42.935"></status>
</kw>
<msg timestamp="20190113 23:49:42.937" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 23:49:42.937" starttime="20190113 23:49:42.930"></status>
</kw>
<kw name="l2_setting_prov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${ctag_action}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan_action}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<assign>
<var>&amp;{dict_prf}</var>
</assign>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] add l2 basic service to ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:49:42.949" level="INFO">****** [eutA] add l2 basic service to ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 23:49:42.950" starttime="20190113 23:49:42.948"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 23:49:42.951" level="INFO">${class_map} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 23:49:42.951" starttime="20190113 23:49:42.950"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 23:49:42.953" level="INFO">${policy_map} = auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 23:49:42.956" starttime="20190113 23:49:42.952"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>classmap=${class_map}</arg>
<arg>policymap=${policy_map}</arg>
</arguments>
<assign>
<var>&amp;{dic_prf}</var>
</assign>
<msg timestamp="20190113 23:49:42.966" level="INFO">&amp;{dic_prf} = { classmap=auto_ClassMap_v4008 | policymap=auto_PolicyMap_v4009 }</msg>
<status status="PASS" endtime="20190113 23:49:42.966" starttime="20190113 23:49:42.957"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create class-map</arg>
</arguments>
<msg timestamp="20190113 23:49:42.968" level="INFO">create class-map</msg>
<status status="PASS" endtime="20190113 23:49:42.968" starttime="20190113 23:49:42.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'untagged'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>untagged=${EMPTY}</arg>
<arg>ELSE IF</arg>
<arg>'any'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>any=${EMPTY}</arg>
<arg>ELSE</arg>
<arg>create dictionary</arg>
<arg>vlan=${match_vlan}</arg>
</arguments>
<assign>
<var>&amp;{dict_match_rule}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>vlan=${match_vlan}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:42.972" starttime="20190113 23:49:42.970"></status>
</kw>
<msg timestamp="20190113 23:49:42.972" level="INFO">&amp;{dict_match_rule} = { vlan=4008 }</msg>
<status status="PASS" endtime="20190113 23:49:42.972" starttime="20190113 23:49:42.969"></status>
</kw>
<kw name="prov_class_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision class-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map}</arg>
<arg>ethernet</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>1</arg>
<arg>&amp;{dict_match_rule}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:49:42.988" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:43.276" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:49:43.276" starttime="20190113 23:49:42.976"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ${class_map_type} ${class_map_name}</arg>
</arguments>
<msg timestamp="20190113 23:49:43.280" level="INFO">send session_command, cmd=class-map ethernet auto_ClassMap_v4008, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:43.865" level="INFO">session_command result=class-map ethernet auto_ClassMap_v4008
NGPON2X4(config-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 23:49:43.866" starttime="20190113 23:49:43.278"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${flow_type} ${flow_index}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:43.875" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:44.251" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:49:44.252" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:49:44.252" starttime="20190113 23:49:43.871"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:44.255" starttime="20190113 23:49:44.254"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:44.256" starttime="20190113 23:49:43.868"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:49:44.264" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:49:44.264" starttime="20190113 23:49:44.263"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = vlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:49:44.267" level="INFO">${value} = 4008</msg>
<status status="PASS" endtime="20190113 23:49:44.267" starttime="20190113 23:49:44.266"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:49:44.269" level="INFO">${result_string} =  vlan 4008</msg>
<status status="PASS" endtime="20190113 23:49:44.269" starttime="20190113 23:49:44.268"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:44.269" starttime="20190113 23:49:44.265"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:44.269" starttime="20190113 23:49:44.265"></status>
</kw>
<msg timestamp="20190113 23:49:44.275" level="INFO">${cmd_string} =  vlan 4008</msg>
<status status="PASS" endtime="20190113 23:49:44.275" starttime="20190113 23:49:44.262"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>rule ${rule_index} match ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:44.286" level="INFO">send session_command, cmd=rule 1 match  vlan 4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:44.771" level="INFO">session_command result=rule 1 match  vlan 4008
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:49:44.772" level="INFO">${res} = rule 1 match  vlan 4008
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:49:44.772" starttime="20190113 23:49:44.277"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:44.776" starttime="20190113 23:49:44.774"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:44.777" starttime="20190113 23:49:44.276"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:49:44.780" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:45.019" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:49:45.020" starttime="20190113 23:49:44.778"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:45.021" starttime="20190113 23:49:42.973"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create policy-map</arg>
</arguments>
<msg timestamp="20190113 23:49:45.024" level="INFO">create policy-map</msg>
<status status="PASS" endtime="20190113 23:49:45.024" starttime="20190113 23:49:45.023"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ctag_action}'=='add-ctag' or '${ctag_action}'=='add-cevlan-tag' or '${cevlan_action}'=='add-cevlan-tag'</arg>
<arg>release_cmd_adapter</arg>
<arg>${device}</arg>
<arg>${prov_policy_map_config_add_tag}</arg>
<arg>ELSE</arg>
<arg>set variable</arg>
<arg>${ctag_action}</arg>
</arguments>
<assign>
<var>${ctag_action}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${ctag_action}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:45.027" starttime="20190113 23:49:45.026"></status>
</kw>
<msg timestamp="20190113 23:49:45.027" level="INFO">${ctag_action} = translate-cevlan-tag</msg>
<status status="PASS" endtime="20190113 23:49:45.028" starttime="20190113 23:49:45.025"></status>
</kw>
<kw name="prov_policy_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision policy-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>${ctag_action}=${cvlan}</arg>
<arg>${cevlan_action}=${cevlan}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:49:45.033" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:45.245" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:49:45.246" starttime="20190113 23:49:45.031"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<msg timestamp="20190113 23:49:45.249" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v4009, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:45.628" level="INFO">session_command result=policy-map auto_PolicyMap_v4009
NGPON2X4(config-policy-map-auto_PolicyMap_v4009)</msg>
<status status="PASS" endtime="20190113 23:49:45.628" starttime="20190113 23:49:45.247"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:45.634" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:46.061" level="INFO">session_command result=class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<msg timestamp="20190113 23:49:46.061" level="INFO">${res} = class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 23:49:46.061" starttime="20190113 23:49:45.632"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:46.064" starttime="20190113 23:49:46.063"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:46.065" starttime="20190113 23:49:45.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:46.079" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:46.664" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:49:46.664" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:49:46.664" starttime="20190113 23:49:46.070"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:46.669" starttime="20190113 23:49:46.668"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:46.669" starttime="20190113 23:49:46.068"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:46.672" starttime="20190113 23:49:46.067"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:49:46.690" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:49:46.690" starttime="20190113 23:49:46.689"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = translate-cevlan-tag">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:49:46.695" level="INFO">${value} = 4009</msg>
<status status="PASS" endtime="20190113 23:49:46.695" starttime="20190113 23:49:46.694"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:49:46.697" level="INFO">${result_string} =  translate-cevlan-tag 4009</msg>
<status status="PASS" endtime="20190113 23:49:46.697" starttime="20190113 23:49:46.696"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:46.698" starttime="20190113 23:49:46.693"></status>
</kw>
<kw type="foritem" name="${key} = ">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:49:46.701" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190113 23:49:46.701" starttime="20190113 23:49:46.700"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:49:46.703" level="INFO">${result_string} =  translate-cevlan-tag 4009  </msg>
<status status="PASS" endtime="20190113 23:49:46.703" starttime="20190113 23:49:46.702"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:46.703" starttime="20190113 23:49:46.698"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:46.703" starttime="20190113 23:49:46.692"></status>
</kw>
<msg timestamp="20190113 23:49:46.704" level="INFO">${cmd_string} =  translate-cevlan-tag 4009  </msg>
<status status="PASS" endtime="20190113 23:49:46.704" starttime="20190113 23:49:46.687"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:46.712" level="INFO">send session_command, cmd= translate-cevlan-tag 4009  , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:47.214" level="INFO">session_command result= translate-cevlan-tag 4009  
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:49:47.214" level="INFO">${res} =  translate-cevlan-tag 4009  
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:49:47.214" starttime="20190113 23:49:46.707"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:47.217" starttime="20190113 23:49:47.216"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:47.217" starttime="20190113 23:49:46.706"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:47.219" starttime="20190113 23:49:46.704"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:49:47.223" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:47.496" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:49:47.496" starttime="20190113 23:49:47.220"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:47.498" starttime="20190113 23:49:45.029"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add policy-map to interface</arg>
</arguments>
<msg timestamp="20190113 23:49:47.500" level="INFO">add policy-map to interface</msg>
<status status="PASS" endtime="20190113 23:49:47.501" starttime="20190113 23:49:47.500"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:47.532" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:49.216" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 23:49:49.217" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:49:49.217" starttime="20190113 23:49:47.530"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:49.219" starttime="20190113 23:49:49.218"></status>
</kw>
<msg timestamp="20190113 23:49:49.220" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:49:49.220" starttime="20190113 23:49:47.508"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 23:49:49.223" level="INFO">@{list_key} = [ ]</msg>
<status status="PASS" endtime="20190113 23:49:49.223" starttime="20190113 23:49:49.222"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<status status="PASS" endtime="20190113 23:49:49.224" starttime="20190113 23:49:49.223"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:49.225" starttime="20190113 23:49:47.506"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:49.240" starttime="20190113 23:49:47.501"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>no=shutdown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:49:49.256" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map= ******</msg>
<status status="PASS" endtime="20190113 23:49:49.257" starttime="20190113 23:49:49.255"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:49:49.259" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:49.561" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:49:49.561" starttime="20190113 23:49:49.257"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:49.575" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:49.947" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:49:49.947" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:49:49.947" starttime="20190113 23:49:49.565"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:49.951" starttime="20190113 23:49:49.950"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:49.952" starttime="20190113 23:49:49.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:49.977" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:50.771" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:49:50.771" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:49:50.772" starttime="20190113 23:49:49.957"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:50.774" starttime="20190113 23:49:50.773"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:50.775" starttime="20190113 23:49:49.955"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:50.776" starttime="20190113 23:49:49.954"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:50.778" starttime="20190113 23:49:50.777"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:50.780" starttime="20190113 23:49:50.779"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:50.781" starttime="20190113 23:49:50.780"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:49:50.787" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:49:50.787" starttime="20190113 23:49:50.786"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = no">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:49:50.790" level="INFO">${value} = shutdown</msg>
<status status="PASS" endtime="20190113 23:49:50.790" starttime="20190113 23:49:50.789"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:49:50.792" level="INFO">${result_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 23:49:50.792" starttime="20190113 23:49:50.791"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:50.793" starttime="20190113 23:49:50.788"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:50.793" starttime="20190113 23:49:50.788"></status>
</kw>
<msg timestamp="20190113 23:49:50.793" level="INFO">${cmd_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 23:49:50.794" starttime="20190113 23:49:50.784"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:50.799" level="INFO">send session_command, cmd= no shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:51.219" level="INFO">session_command result= no shutdown
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:49:51.220" level="INFO">${res} =  no shutdown
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:49:51.220" starttime="20190113 23:49:50.797"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:51.223" starttime="20190113 23:49:51.222"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:51.223" starttime="20190113 23:49:50.796"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:51.225" starttime="20190113 23:49:50.794"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:49:51.238" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:51.493" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:49:51.493" starttime="20190113 23:49:51.227"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:51.496" starttime="20190113 23:49:49.253"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:49:51.500" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map=auto_PolicyMap_v4009 ******</msg>
<status status="PASS" endtime="20190113 23:49:51.501" starttime="20190113 23:49:51.499"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:49:51.503" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:51.733" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:49:51.733" starttime="20190113 23:49:51.501"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:51.740" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:52.026" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:49:52.026" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:49:52.027" starttime="20190113 23:49:51.737"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:52.029" starttime="20190113 23:49:52.028"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:52.029" starttime="20190113 23:49:51.735"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:52.038" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:52.342" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:49:52.343" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:49:52.343" starttime="20190113 23:49:52.034"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:52.345" starttime="20190113 23:49:52.344"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:52.346" starttime="20190113 23:49:52.032"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:52.347" starttime="20190113 23:49:52.031"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:52.353" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v4009, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:52.953" level="INFO">session_command result=policy-map auto_PolicyMap_v4009
NGPON2X4(config-policy-map-auto_PolicyMap_v4009)</msg>
<msg timestamp="20190113 23:49:52.953" level="INFO">${res} = policy-map auto_PolicyMap_v4009
NGPON2X4(config-policy-map-auto_PolicyMap_v4009)</msg>
<status status="PASS" endtime="20190113 23:49:52.953" starttime="20190113 23:49:52.351"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:52.961" starttime="20190113 23:49:52.960"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:52.961" starttime="20190113 23:49:52.349"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:52.963" starttime="20190113 23:49:52.348"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:52.971" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:53.240" level="INFO">session_command result=class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<msg timestamp="20190113 23:49:53.241" level="INFO">${res} = class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 23:49:53.241" starttime="20190113 23:49:52.968"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:53.244" starttime="20190113 23:49:53.243"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:53.244" starttime="20190113 23:49:52.966"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:53.247" starttime="20190113 23:49:52.964"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:53.249" starttime="20190113 23:49:53.248"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:49:53.255" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:49:53.255" starttime="20190113 23:49:53.254"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 23:49:53.256" starttime="20190113 23:49:53.255"></status>
</kw>
<msg timestamp="20190113 23:49:53.256" level="INFO">${cmd_string} = </msg>
<status status="PASS" endtime="20190113 23:49:53.256" starttime="20190113 23:49:53.252"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:53.259" starttime="20190113 23:49:53.257"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:49:53.261" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:53.614" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:49:53.615" starttime="20190113 23:49:53.259"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:53.616" starttime="20190113 23:49:51.497"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add multicast-profile to interface</arg>
</arguments>
<msg timestamp="20190113 23:49:53.618" level="INFO">add multicast-profile to interface</msg>
<status status="PASS" endtime="20190113 23:49:53.618" starttime="20190113 23:49:53.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>prov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:53.620" starttime="20190113 23:49:53.619"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:49:53.622" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:49:53.622" starttime="20190113 23:49:53.621"></status>
</kw>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>policy-map=${policy_map}</arg>
<arg>class-map-ethernet=${class_map}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:49:53.631" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:49:55.595" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v4009
   class-map-ethernet auto_ClassMap_v4008
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 23:49:55.595" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v4009
   class-map-ethernet auto_ClassMap_v4008
    fl...</msg>
<status status="PASS" endtime="20190113 23:49:55.595" starttime="20190113 23:49:53.629"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:55.598" starttime="20190113 23:49:55.597"></status>
</kw>
<msg timestamp="20190113 23:49:55.598" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v4009
   class-map-ethernet auto_ClassMap_v4008
    fl...</msg>
<status status="PASS" endtime="20190113 23:49:55.598" starttime="20190113 23:49:53.628"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 23:49:55.601" level="INFO">@{list_key} = [ class-map-ethernet | policy-map ]</msg>
<status status="PASS" endtime="20190113 23:49:55.601" starttime="20190113 23:49:55.600"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<kw type="foritem" name="${check_item} = class-map-ethernet">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 23:49:55.604" level="INFO">${exp_value} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 23:49:55.604" starttime="20190113 23:49:55.603"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:55.605" starttime="20190113 23:49:55.604"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:55.606" starttime="20190113 23:49:55.602"></status>
</kw>
<kw type="foritem" name="${check_item} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 23:49:55.608" level="INFO">${exp_value} = auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 23:49:55.608" starttime="20190113 23:49:55.607"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:55.611" starttime="20190113 23:49:55.608"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:55.611" starttime="20190113 23:49:55.606"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:55.611" starttime="20190113 23:49:55.601"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:55.612" starttime="20190113 23:49:53.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:55.615" starttime="20190113 23:49:55.614"></status>
</kw>
<msg timestamp="20190113 23:49:55.616" level="INFO">&amp;{dict_prf} = { classmap=auto_ClassMap_v4008 | policymap=auto_PolicyMap_v4009 }</msg>
<status status="PASS" endtime="20190113 23:49:55.616" starttime="20190113 23:49:42.945"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:55.627" starttime="20190113 23:49:42.922"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:55.629" starttime="20190113 23:49:42.904"></status>
</kw>
<kw name="template_bidirection_raw_traffic_and_check" library="template_bidirection_raw_traffic_and_check">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>create bidirection raw traffic, send traffic and check packet loss, analyze packet with filter</doc>
<arguments>
<arg>${tg_us_param}</arg>
<arg>${tg_ds_param}</arg>
<arg>${us_traffic_filter}</arg>
<arg>${ds_traffic_filter}</arg>
<arg>${traffic_loss_rate}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create upstream traffic</arg>
</arguments>
<msg timestamp="20190113 23:49:55.675" level="INFO">create upstream traffic</msg>
<status status="PASS" endtime="20190113 23:49:55.675" starttime="20190113 23:49:55.675"></status>
</kw>
<kw name="create_raw_traffic_udp" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create bound traffic with udp head on traffic generater</doc>
<arguments>
<arg>tg1</arg>
<arg>upstream</arg>
<arg>service_p1</arg>
<arg>subscriber_p1</arg>
<arg>&amp;{tg_us_param}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${tg} port ${src_port} to ${dst_port}] create raw traffic with mac_dst:${mac_dst} mac_src:${mac_src} ip_dst:${ip_dst} ip_src:${ip_src} ovlan:${ovlan} ivlan:${ivlan}******</arg>
</arguments>
<msg timestamp="20190113 23:49:55.694" level="INFO">****** [tg1 port subscriber_p1 to service_p1] create raw traffic with mac_dst:00:00:00:67:00:01 mac_src:00:00:00:11:11:11 ip_dst:10.1.67.100 ip_src:10.1.67.10 ovlan:4008 ivlan:******</msg>
<status status="PASS" endtime="20190113 23:49:55.695" starttime="20190113 23:49:55.693"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>mac_dst=${mac_dst}</arg>
<arg>mac_src=${mac_src}</arg>
<arg>l3_protocol=ipv4</arg>
<arg>ip_dst_addr=${ip_dst}</arg>
<arg>ip_src_addr=${ip_src}</arg>
<arg>l4_protocol=udp</arg>
<arg>udp_dst_port=${udp_dst_port}</arg>
<arg>udp_src_port=${udp_src_port}</arg>
<arg>length_mode=fixed</arg>
<arg>frame_size=${frame_size}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:55.697" starttime="20190113 23:49:55.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>evaluate</arg>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<assign>
<var>${rate_bps}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:55.699" starttime="20190113 23:49:55.698"></status>
</kw>
<msg timestamp="20190113 23:49:55.700" level="INFO">${rate_bps} = 10000000</msg>
<status status="PASS" endtime="20190113 23:49:55.700" starttime="20190113 23:49:55.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'!='${rate_pps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_pps=${rate_pps}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:55.702" starttime="20190113 23:49:55.702"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:55.703" starttime="20190113 23:49:55.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'=='${ovlan}'</arg>
<arg>TG Create Untagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'=='${ivlan}'</arg>
<arg>TG Create Single Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE</arg>
<arg>TG Create Double Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ivlan}</arg>
<arg>${ivlan_pbit}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<kw name="Tg Create Single Tagged Stream On Port" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Create single tagged stream by name on traffic generator port.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<msg timestamp="20190113 23:49:56.965" level="INFO">CsHLT::traffic_conf create 11/8 { -vlan_user_priority 0 -mac_src 00:00:00:11:11:11 -l4_protocol udp -name upstream -ip_dst_addr 10.1.67.100 -mac_dst 00:00:00:67:00:01 -frame_size 512 -udp_src_port 6000 -ip_src_addr 10.1.67.10 -rate_bps 10000000 -length_mode fixed -l2_encap ethernet_ii_vlan -l3_protocol ipv4 -udp_dst_port 6000 -vlan_id 4008}
create traffic is in process...
create traffic is done!
SUCCESS
streamblock5</msg>
<status status="PASS" endtime="20190113 23:49:56.965" starttime="20190113 23:49:55.705"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:56.966" starttime="20190113 23:49:55.703"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:56.967" starttime="20190113 23:49:55.691"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create downstream traffic</arg>
</arguments>
<msg timestamp="20190113 23:49:56.970" level="INFO">create downstream traffic</msg>
<status status="PASS" endtime="20190113 23:49:56.970" starttime="20190113 23:49:56.969"></status>
</kw>
<kw name="create_raw_traffic_udp" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create bound traffic with udp head on traffic generater</doc>
<arguments>
<arg>tg1</arg>
<arg>downstream</arg>
<arg>subscriber_p1</arg>
<arg>service_p1</arg>
<arg>&amp;{tg_ds_param}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${tg} port ${src_port} to ${dst_port}] create raw traffic with mac_dst:${mac_dst} mac_src:${mac_src} ip_dst:${ip_dst} ip_src:${ip_src} ovlan:${ovlan} ivlan:${ivlan}******</arg>
</arguments>
<msg timestamp="20190113 23:49:56.990" level="INFO">****** [tg1 port service_p1 to subscriber_p1] create raw traffic with mac_dst:00:00:00:11:11:11 mac_src:00:00:00:67:00:01 ip_dst:10.1.67.10 ip_src:10.1.67.100 ovlan:4002 ivlan:4009******</msg>
<status status="PASS" endtime="20190113 23:49:56.990" starttime="20190113 23:49:56.988"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>mac_dst=${mac_dst}</arg>
<arg>mac_src=${mac_src}</arg>
<arg>l3_protocol=ipv4</arg>
<arg>ip_dst_addr=${ip_dst}</arg>
<arg>ip_src_addr=${ip_src}</arg>
<arg>l4_protocol=udp</arg>
<arg>udp_dst_port=${udp_dst_port}</arg>
<arg>udp_src_port=${udp_src_port}</arg>
<arg>length_mode=fixed</arg>
<arg>frame_size=${frame_size}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:56.992" starttime="20190113 23:49:56.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>evaluate</arg>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<assign>
<var>${rate_bps}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:56.995" starttime="20190113 23:49:56.994"></status>
</kw>
<msg timestamp="20190113 23:49:56.995" level="INFO">${rate_bps} = 10000000</msg>
<status status="PASS" endtime="20190113 23:49:56.996" starttime="20190113 23:49:56.993"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'!='${rate_pps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_pps=${rate_pps}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:49:56.999" starttime="20190113 23:49:56.998"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:56.999" starttime="20190113 23:49:56.996"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'=='${ovlan}'</arg>
<arg>TG Create Untagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'=='${ivlan}'</arg>
<arg>TG Create Single Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE</arg>
<arg>TG Create Double Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ivlan}</arg>
<arg>${ivlan_pbit}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<kw name="Tg Create Double Tagged Stream On Port" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Create double tag stream by name on traffic generator port.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ivlan}</arg>
<arg>${ivlan_pbit}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<msg timestamp="20190113 23:49:58.033" level="INFO">CsHLT::traffic_conf create 11/9 { -vlan_user_priority 0 -vlan_id_outer 4002 -mac_dst 00:00:00:11:11:11 -ip_dst_addr 10.1.67.10 -ip_src_addr 10.1.67.100 -frame_size 512 -l2_encap ethernet_ii_vlan -l3_protocol ipv4 -vlan_outer_user_priority 0 -udp_dst_port 6000 -vlan_id 4009 -mac_src 00:00:00:67:00:01 -l4_protocol udp -name downstream -length_mode fixed -udp_src_port 6000 -rate_bps 10000000}
create traffic is in process...
create traffic is done!
SUCCESS
streamblock6</msg>
<status status="PASS" endtime="20190113 23:49:58.034" starttime="20190113 23:49:57.001"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:58.035" starttime="20190113 23:49:57.000"></status>
</kw>
<status status="PASS" endtime="20190113 23:49:58.037" starttime="20190113 23:49:56.986"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>send traffic and capture</arg>
</arguments>
<msg timestamp="20190113 23:49:58.039" level="INFO">send traffic and capture</msg>
<status status="PASS" endtime="20190113 23:49:58.039" starttime="20190113 23:49:58.038"></status>
</kw>
<kw name="Tg Clear Traffic Stats" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Clear Traffic statistics.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:50:05.135" starttime="20190113 23:49:58.040"></status>
</kw>
<kw name="start_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:start capture before start traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Config Packet Buffers" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Define how the buffers will be managed for packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<msg timestamp="20190113 23:50:05.193" level="INFO">[CsHLT::packetConfigBuffers port1 stop {}
stop capture buffer is in process...
response info: ====&gt; {status 1}
stop capture buffer is done!
SUCCESS
]</msg>
<status status="PASS" endtime="20190113 23:50:05.193" starttime="20190113 23:50:05.139"></status>
</kw>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>start</arg>
</arguments>
<status status="PASS" endtime="20190113 23:50:06.145" starttime="20190113 23:50:05.195"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after start_capture</arg>
</arguments>
<msg timestamp="20190113 23:50:06.149" level="INFO">wait 1s after start_capture</msg>
<status status="PASS" endtime="20190113 23:50:06.149" starttime="20190113 23:50:06.148"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:50:07.151" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:50:07.151" starttime="20190113 23:50:06.150"></status>
</kw>
<status status="PASS" endtime="20190113 23:50:07.152" starttime="20190113 23:50:05.138"></status>
</kw>
<kw name="start_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:start capture before start traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Config Packet Buffers" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Define how the buffers will be managed for packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<msg timestamp="20190113 23:50:07.215" level="INFO">[CsHLT::packetConfigBuffers port2 stop {}
stop capture buffer is in process...
response info: ====&gt; {status 1}
stop capture buffer is done!
SUCCESS
]</msg>
<status status="PASS" endtime="20190113 23:50:07.215" starttime="20190113 23:50:07.155"></status>
</kw>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>start</arg>
</arguments>
<status status="PASS" endtime="20190113 23:50:08.856" starttime="20190113 23:50:07.217"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after start_capture</arg>
</arguments>
<msg timestamp="20190113 23:50:08.859" level="INFO">wait 1s after start_capture</msg>
<status status="PASS" endtime="20190113 23:50:08.859" starttime="20190113 23:50:08.858"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:50:09.860" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:50:09.861" starttime="20190113 23:50:08.859"></status>
</kw>
<status status="PASS" endtime="20190113 23:50:09.862" starttime="20190113 23:50:07.154"></status>
</kw>
<kw name="Tg Start All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Start All the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:50:20.351" starttime="20190113 23:50:09.877"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${traffic_run_time}</arg>
<arg>Wait for traffic run</arg>
</arguments>
<msg timestamp="20190113 23:50:30.359" level="INFO">Slept 10 seconds</msg>
<msg timestamp="20190113 23:50:30.359" level="INFO">Wait for traffic run</msg>
<status status="PASS" endtime="20190113 23:50:30.359" starttime="20190113 23:50:20.357"></status>
</kw>
<kw name="Tg Stop All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Stop all the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:50:38.892" starttime="20190113 23:50:30.361"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${stc_wait_time}</arg>
<arg>wait for stc stop</arg>
</arguments>
<msg timestamp="20190113 23:50:43.895" level="INFO">Slept 5 seconds</msg>
<msg timestamp="20190113 23:50:43.895" level="INFO">wait for stc stop</msg>
<status status="PASS" endtime="20190113 23:50:43.895" starttime="20190113 23:50:38.893"></status>
</kw>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:50:45.423" starttime="20190113 23:50:43.899"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:50:45.427" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:50:45.427" starttime="20190113 23:50:45.426"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:50:46.429" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:50:46.430" starttime="20190113 23:50:45.428"></status>
</kw>
<status status="PASS" endtime="20190113 23:50:46.431" starttime="20190113 23:50:43.897"></status>
</kw>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:50:48.659" starttime="20190113 23:50:46.434"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:50:48.661" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:50:48.661" starttime="20190113 23:50:48.660"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:50:49.663" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:50:49.663" starttime="20190113 23:50:48.662"></status>
</kw>
<status status="PASS" endtime="20190113 23:50:49.664" starttime="20190113 23:50:46.432"></status>
</kw>
<kw name="Tg Verify Traffic Loss Rate For All Streams Is Within" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Verify the packages loss rate of all the created stream in traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>${traffic_loss_rate}</arg>
</arguments>
<msg timestamp="20190113 23:50:50.540" level="INFO">[CsHLT::print_stats 
printing stats...
#############################################
port1:
    stream:
        streamblock6:
            rx:
                misinserted_pkts: 0
                total_pkt_bytes: 15881604
                prbs_bit_errors: 0
                ipv4_outer_present: 0
                min_delay: 5.32
                ipv6_outer_present: 0
                rx_sig_count: 31263
                max_delay: 6.185
                avg_delay: 5.827901512970604
                duplicate_pkts: 0
                out_of_sequence_pkts: 0
                total_pkts: 31263
                rx_sig_rate: 0
                dropped_pkts: 104
                first_tstamp: 0.0
                udp_present: 1
                total_pkt_bit_rate: 0
                ipv4_present: 1
                min_pkt_length: 0
                last_tstamp: 0.0
                total_pkt_rate: 0
                max_pkt_length: 0
                ipv6_present: 0
                rx_port: 10.245.252.60-11-8 //11/8  10.245.252.60-11-8 //11/8 
                tcp_present: 0
                dropped_pkts_percent: 0.3315586444352345
            tx:
                total_pkt_bytes: 16059904
                total_pkt_rate: 0
                total_pkts: 31367
                ipv4_outer_present: 0
                udp_present: 1
                ipv6_present: 0
                total_pkt_bit_rate: 0
                ipv6_outer_present: 0
                tcp_present: 0
                ipv4_present: 1
status: 1
#############################################
SUCCESS
]
[CsHLT::print_stats 
printing stats...
#############################################
port2:
    stream:
        streamblock5:
            rx:
                misinserted_pkts: 0
                total_pkt_bytes: 16160604
                prbs_bit_errors: 0
                ipv4_outer_present: 0
                min_delay: 5.36
                ipv6_outer_present: 0
                rx_sig_count: 31319
                max_delay: 6.0225
                avg_delay: 5.737854177975031
                duplicate_pkts: 0
                out_of_sequence_pkts: 0
                total_pkts: 31319
                rx_sig_rate: 0
                dropped_pkts: 0
                first_tstamp: 0.0
                udp_present: 1
                total_pkt_bit_rate: 0
                ipv4_present: 1
                min_pkt_length: 0
                last_tstamp: 0.0
                total_pkt_rate: 0
                max_pkt_length: 0
                ipv6_present: 0
                rx_port: 10.245.252.60-11-9 //11/9  10.245.252.60-11-9 //11/9 
                tcp_present: 0
                dropped_pkts_percent: 0.0
            tx:
                total_pkt_bytes: 16035328
                total_pkt_rate: 0
                total_pkts: 31319
                ipv4_outer_present: 0
                udp_present: 1
                ipv6_present: 0
                total_pkt_bit_rate: 0
                ipv6_outer_present: 0
                tcp_present: 0
                ipv4_present: 1
status: 1
#############################################
SUCCESS
]</msg>
<status status="PASS" endtime="20190113 23:50:50.541" starttime="20190113 23:50:49.667"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>save packet</arg>
</arguments>
<msg timestamp="20190113 23:50:50.544" level="INFO">save packet</msg>
<status status="PASS" endtime="20190113 23:50:50.544" starttime="20190113 23:50:50.543"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${packet_store_path}/${TEST NAME}_service_p1.pcap</arg>
</arguments>
<assign>
<var>${save_file_service_p1}</var>
</assign>
<msg timestamp="20190113 23:50:50.546" level="INFO">${save_file_service_p1} = /tmp/tc_translate_cevlan_tag_service_p1.pcap</msg>
<status status="PASS" endtime="20190113 23:50:50.546" starttime="20190113 23:50:50.544"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${packet_store_path}/${TEST NAME}_subscriber_p1.pcap</arg>
</arguments>
<assign>
<var>${save_file_subscriber_p1}</var>
</assign>
<msg timestamp="20190113 23:50:50.547" level="INFO">${save_file_subscriber_p1} = /tmp/tc_translate_cevlan_tag_subscriber_p1.pcap</msg>
<status status="PASS" endtime="20190113 23:50:50.547" starttime="20190113 23:50:50.546"></status>
</kw>
<kw name="Tg Store Captured Packets" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Store captured packets.</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
<arg>${save_file_service_p1}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:50:56.505" starttime="20190113 23:50:50.548"></status>
</kw>
<kw name="Tg Store Captured Packets" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Store captured packets.</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
<arg>${save_file_subscriber_p1}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:51:02.153" starttime="20190113 23:50:56.508"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10s</arg>
<arg>Wait for save captured packets to ${save_file_service_p1} and ${save_file_subscriber_p1}</arg>
</arguments>
<msg timestamp="20190113 23:51:12.156" level="INFO">Slept 10 seconds</msg>
<msg timestamp="20190113 23:51:12.157" level="INFO">Wait for save captured packets to /tmp/tc_translate_cevlan_tag_service_p1.pcap and /tmp/tc_translate_cevlan_tag_subscriber_p1.pcap</msg>
<status status="PASS" endtime="20190113 23:51:12.157" starttime="20190113 23:51:02.155"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>analyze upstream packet</arg>
</arguments>
<msg timestamp="20190113 23:51:12.159" level="INFO">analyze upstream packet</msg>
<status status="PASS" endtime="20190113 23:51:12.159" starttime="20190113 23:51:12.158"></status>
</kw>
<kw name="analyze_packet_count_greater_than" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: analyze filter packet count &gt;${value}</doc>
<arguments>
<arg>${save_file_service_p1}</arg>
<arg>${us_traffic_filter}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>********packet:[${save_file}] filter:[${filter}]***************</arg>
</arguments>
<msg timestamp="20190113 23:51:12.174" level="INFO">********packet:[/tmp/tc_translate_cevlan_tag_service_p1.pcap] filter:[(vlan.id==4002) &amp;&amp; (vlan.id==4009) &amp;&amp; (eth.src==00:00:00:11:11:11) &amp;&amp; (eth.dst==00:00:00:67:00:01) &amp;&amp; (ip.src == 10.1.67.10) &amp;&amp; (ip.dst == 10.1.67.100)]***************</msg>
<status status="PASS" endtime="20190113 23:51:12.174" starttime="20190113 23:51:12.173"></status>
</kw>
<kw name="Wsk Load File" library="caferobot.trafficgen.tsharkadapter.TSharkAdapter">
<doc>Load wirshark recognizable cap file. filename is the cap file name ,</doc>
<arguments>
<arg>${save_file}</arg>
<arg>${filter}</arg>
</arguments>
<msg timestamp="20190113 23:51:14.098" level="DEBUG">Using selector: EpollSelector</msg>
<msg timestamp="20190113 23:51:48.654" level="INFO">DEBUG: Current FD count is 22</msg>
<status status="PASS" endtime="20190113 23:51:48.654" starttime="20190113 23:51:12.174"></status>
</kw>
<kw name="Wsk Get Total Packet Count" library="caferobot.trafficgen.tsharkadapter.TSharkAdapter">
<doc>Get total packet count of loaded cap file.</doc>
<assign>
<var>${cnt}</var>
</assign>
<msg timestamp="20190113 23:51:48.656" level="INFO">${cnt} = 13106</msg>
<status status="PASS" endtime="20190113 23:51:48.656" starttime="20190113 23:51:48.655"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>get packet is ${cnt}, expect more than ${value}</arg>
</arguments>
<msg timestamp="20190113 23:51:48.657" level="INFO">get packet is 13106, expect more than 0</msg>
<status status="PASS" endtime="20190113 23:51:48.658" starttime="20190113 23:51:48.657"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${cnt}&gt;${value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:51:48.659" starttime="20190113 23:51:48.658"></status>
</kw>
<status status="PASS" endtime="20190113 23:51:48.660" starttime="20190113 23:51:12.171"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>analyze downstream packet</arg>
</arguments>
<msg timestamp="20190113 23:51:48.661" level="INFO">analyze downstream packet</msg>
<status status="PASS" endtime="20190113 23:51:48.661" starttime="20190113 23:51:48.660"></status>
</kw>
<kw name="analyze_packet_count_greater_than" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: analyze filter packet count &gt;${value}</doc>
<arguments>
<arg>${save_file_subscriber_p1}</arg>
<arg>${ds_traffic_filter}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>********packet:[${save_file}] filter:[${filter}]***************</arg>
</arguments>
<msg timestamp="20190113 23:51:48.670" level="INFO">********packet:[/tmp/tc_translate_cevlan_tag_subscriber_p1.pcap] filter:[(vlan.id==4008) &amp;&amp; (eth.src==00:00:00:67:00:01) &amp;&amp; (eth.dst==00:00:00:11:11:11) &amp;&amp; (ip.src == 10.1.67.100) &amp;&amp; (ip.dst == 10.1.67.10)]***************</msg>
<status status="PASS" endtime="20190113 23:51:48.670" starttime="20190113 23:51:48.669"></status>
</kw>
<kw name="Wsk Load File" library="caferobot.trafficgen.tsharkadapter.TSharkAdapter">
<doc>Load wirshark recognizable cap file. filename is the cap file name ,</doc>
<arguments>
<arg>${save_file}</arg>
<arg>${filter}</arg>
</arguments>
<msg timestamp="20190113 23:51:49.748" level="DEBUG">Using selector: EpollSelector</msg>
<msg timestamp="20190113 23:52:22.200" level="INFO">DEBUG: Current FD count is 22</msg>
<status status="PASS" endtime="20190113 23:52:22.201" starttime="20190113 23:51:48.670"></status>
</kw>
<kw name="Wsk Get Total Packet Count" library="caferobot.trafficgen.tsharkadapter.TSharkAdapter">
<doc>Get total packet count of loaded cap file.</doc>
<assign>
<var>${cnt}</var>
</assign>
<msg timestamp="20190113 23:52:22.203" level="INFO">${cnt} = 13107</msg>
<status status="PASS" endtime="20190113 23:52:22.203" starttime="20190113 23:52:22.202"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>get packet is ${cnt}, expect more than ${value}</arg>
</arguments>
<msg timestamp="20190113 23:52:22.204" level="INFO">get packet is 13107, expect more than 0</msg>
<status status="PASS" endtime="20190113 23:52:22.205" starttime="20190113 23:52:22.203"></status>
</kw>
<kw name="Should Be True" library="BuiltIn">
<doc>Fails if the given condition is not true.</doc>
<arguments>
<arg>${cnt}&gt;${value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:22.206" starttime="20190113 23:52:22.205"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:22.207" starttime="20190113 23:51:48.668"></status>
</kw>
<kw type="teardown" name="traffic_teardown" library="template_bidirection_raw_traffic_and_check">
<doc>teardown</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>stop_capture</arg>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:23.637" starttime="20190113 23:52:22.211"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:52:23.639" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:52:23.640" starttime="20190113 23:52:23.639"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:52:24.641" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:52:24.641" starttime="20190113 23:52:23.640"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:24.642" starttime="20190113 23:52:22.210"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:24.654" starttime="20190113 23:52:22.209"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>stop_capture</arg>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:25.258" starttime="20190113 23:52:24.672"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:52:25.271" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:52:25.271" starttime="20190113 23:52:25.270"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:52:26.273" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:52:26.274" starttime="20190113 23:52:25.272"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:26.274" starttime="20190113 23:52:24.670"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:26.276" starttime="20190113 23:52:24.668"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Tg Stop All Traffic</arg>
<arg>tg1</arg>
</arguments>
<kw name="Tg Stop All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Stop all the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:34.602" starttime="20190113 23:52:26.279"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:34.610" starttime="20190113 23:52:26.277"></status>
</kw>
<kw name="Tg Delete All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Delete all the traffic in given traffic generator.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<msg timestamp="20190113 23:52:49.747" level="INFO">###############################
res is: CsHLT::traffic_conf reset None {}
reset traffic is in process...
reset traffic is done!
SUCCESS

###############################</msg>
<status status="PASS" endtime="20190113 23:52:49.748" starttime="20190113 23:52:34.612"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:49.763" starttime="20190113 23:52:22.208"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:49.766" starttime="20190113 23:49:55.672"></status>
</kw>
<kw type="teardown" name="case teardown">
<doc>teardown</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>svc teardown</arg>
</arguments>
<msg timestamp="20190113 23:52:49.880" level="INFO">svc teardown</msg>
<status status="PASS" endtime="20190113 23:52:49.880" starttime="20190113 23:52:49.879"></status>
</kw>
<kw name="subscriber_point_remove_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: delete l2 basic class-map and policy-map, remove service from subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>${match_vlan}</arg>
<arg>${service_vlan}</arg>
<arg>${translate_cvlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:52:49.885" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:52:49.885" starttime="20190113 23:52:49.883"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove and delete l2 basic service from ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:52:49.888" level="INFO">****** [eutA] remove and delete l2 basic service from subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:52:49.888" starttime="20190113 23:52:49.886"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:49.894" starttime="20190113 23:52:49.892"></status>
</kw>
<msg timestamp="20190113 23:52:49.894" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 23:52:49.895" starttime="20190113 23:52:49.891"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 23:52:49.896" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 23:52:49.897" starttime="20190113 23:52:49.895"></status>
</kw>
<msg timestamp="20190113 23:52:49.898" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 23:52:49.898" starttime="20190113 23:52:49.889"></status>
</kw>
<kw name="l2_setting_dprov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove l2 basic service from ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:52:49.904" level="INFO">****** [eutA] remove l2 basic service from ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 23:52:49.904" starttime="20190113 23:52:49.902"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 23:52:49.906" level="INFO">${class_map} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 23:52:49.906" starttime="20190113 23:52:49.905"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 23:52:49.910" level="INFO">${policy_map} = auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 23:52:49.910" starttime="20190113 23:52:49.908"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:52:49.912" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:52:49.912" starttime="20190113 23:52:49.911"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:52:49.921" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:52:51.849" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v4009
   class-map-ethernet auto_ClassMap_v4008
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 23:52:51.850" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v4009
   class-map-ethernet auto_ClassMap_v4008
    flo...</msg>
<status status="PASS" endtime="20190113 23:52:51.850" starttime="20190113 23:52:49.913"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove multicast-profile from interface</arg>
</arguments>
<msg timestamp="20190113 23:52:51.853" level="INFO">remove multicast-profile from interface</msg>
<status status="PASS" endtime="20190113 23:52:51.853" starttime="20190113 23:52:51.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:51.855" starttime="20190113 23:52:51.854"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove policy-map from interface</arg>
</arguments>
<msg timestamp="20190113 23:52:51.857" level="INFO">remove policy-map from interface</msg>
<status status="PASS" endtime="20190113 23:52:51.857" starttime="20190113 23:52:51.856"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:52:51.866" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:52:52.229" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:52:52.230" starttime="20190113 23:52:51.864"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:52:52.237" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:52:52.628" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:52:52.628" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:52:52.628" starttime="20190113 23:52:52.234"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:52.631" starttime="20190113 23:52:52.630"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:52.632" starttime="20190113 23:52:52.232"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:52:52.639" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:52:53.012" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:52:53.013" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:52:53.013" starttime="20190113 23:52:52.636"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:53.024" starttime="20190113 23:52:53.023"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:53.025" starttime="20190113 23:52:52.635"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:53.033" starttime="20190113 23:52:52.633"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:53.038" starttime="20190113 23:52:53.037"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:53.040" starttime="20190113 23:52:53.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:53.042" starttime="20190113 23:52:53.041"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:52:53.049" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:52:53.050" starttime="20190113 23:52:53.048"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:52:53.055" level="INFO">${value} = auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 23:52:53.055" starttime="20190113 23:52:53.054"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:52:53.058" level="INFO">${result_string} =  policy-map auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 23:52:53.058" starttime="20190113 23:52:53.056"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:53.058" starttime="20190113 23:52:53.051"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:53.058" starttime="20190113 23:52:53.050"></status>
</kw>
<msg timestamp="20190113 23:52:53.059" level="INFO">${cmd_string} =  policy-map auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 23:52:53.059" starttime="20190113 23:52:53.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:52:53.068" level="INFO">send session_command, cmd=no  policy-map auto_PolicyMap_v4009, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:52:53.656" level="INFO">session_command result=no  policy-map auto_PolicyMap_v4009
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:52:53.656" level="INFO">${res} = no  policy-map auto_PolicyMap_v4009
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:52:53.656" starttime="20190113 23:52:53.064"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:53.659" starttime="20190113 23:52:53.658"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:53.660" starttime="20190113 23:52:53.062"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:53.661" starttime="20190113 23:52:53.060"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:52:53.665" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:52:54.077" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:52:54.078" starttime="20190113 23:52:53.663"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:54.079" starttime="20190113 23:52:51.860"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:54.081" starttime="20190113 23:52:51.858"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove svlan from interface</arg>
</arguments>
<msg timestamp="20190113 23:52:54.084" level="INFO">remove svlan from interface</msg>
<status status="PASS" endtime="20190113 23:52:54.084" starttime="20190113 23:52:54.083"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:52:54.095" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:52:54.448" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:52:54.448" starttime="20190113 23:52:54.089"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:52:54.454" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:52:54.760" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:52:54.761" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:52:54.761" starttime="20190113 23:52:54.452"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:54.766" starttime="20190113 23:52:54.764"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:54.766" starttime="20190113 23:52:54.450"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:54.770" starttime="20190113 23:52:54.769"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:54.772" starttime="20190113 23:52:54.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:54.774" starttime="20190113 23:52:54.772"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:54.775" starttime="20190113 23:52:54.774"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:52:54.807" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:52:54.807" starttime="20190113 23:52:54.806"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = vlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:52:54.811" level="INFO">${value} = 4002</msg>
<status status="PASS" endtime="20190113 23:52:54.811" starttime="20190113 23:52:54.810"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:52:54.812" level="INFO">${result_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 23:52:54.813" starttime="20190113 23:52:54.811"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:54.814" starttime="20190113 23:52:54.809"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:54.814" starttime="20190113 23:52:54.808"></status>
</kw>
<msg timestamp="20190113 23:52:54.815" level="INFO">${cmd_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 23:52:54.815" starttime="20190113 23:52:54.804"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:52:54.833" level="INFO">send session_command, cmd=no  vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:52:55.357" level="INFO">session_command result=no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:52:55.358" level="INFO">${res} = no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:52:55.358" starttime="20190113 23:52:54.819"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:55.361" starttime="20190113 23:52:55.360"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:55.362" starttime="20190113 23:52:54.817"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:55.363" starttime="20190113 23:52:54.816"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:52:55.367" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:52:55.705" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:52:55.705" starttime="20190113 23:52:55.365"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:55.717" starttime="20190113 23:52:54.086"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:55.724" starttime="20190113 23:52:54.085"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:52:55.727" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:52:55.727" starttime="20190113 23:52:55.726"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:52:55.738" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:52:57.459" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 23:52:57.460" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:52:57.460" starttime="20190113 23:52:55.728"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete policy-map</arg>
</arguments>
<msg timestamp="20190113 23:52:57.463" level="INFO">delete policy-map</msg>
<status status="PASS" endtime="20190113 23:52:57.463" starttime="20190113 23:52:57.462"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map</arg>
<arg>${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:52:57.467" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:52:57.758" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:52:57.759" starttime="20190113 23:52:57.465"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:52:57.767" level="INFO">send session_command, cmd=no policy-map auto_PolicyMap_v4009, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:52:58.881" level="INFO">session_command result=no policy-map auto_PolicyMap_v4009
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:52:58.882" level="INFO">${res} = no policy-map auto_PolicyMap_v4009
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:52:58.882" starttime="20190113 23:52:57.762"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:52:58.888" starttime="20190113 23:52:58.886"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:58.889" starttime="20190113 23:52:57.760"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:52:58.894" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:52:59.771" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:52:59.772" starttime="20190113 23:52:58.891"></status>
</kw>
<status status="PASS" endtime="20190113 23:52:59.786" starttime="20190113 23:52:57.463"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete class-map</arg>
</arguments>
<msg timestamp="20190113 23:52:59.799" level="INFO">delete class-map</msg>
<status status="PASS" endtime="20190113 23:52:59.799" starttime="20190113 23:52:59.798"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:52:59.817" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:00.206" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:53:00.206" starttime="20190113 23:52:59.801"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:00.212" level="INFO">send session_command, cmd=no class-map ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:01.003" level="INFO">session_command result=no class-map ethernet auto_ClassMap_v4008
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:53:01.004" level="INFO">${res} = no class-map ethernet auto_ClassMap_v4008
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:53:01.004" starttime="20190113 23:53:00.210"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:01.007" starttime="20190113 23:53:01.006"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:01.008" starttime="20190113 23:53:00.208"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:53:01.011" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:01.435" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:53:01.436" starttime="20190113 23:53:01.010"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:01.437" starttime="20190113 23:52:59.800"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:01.438" starttime="20190113 23:52:49.899"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:01.439" starttime="20190113 23:52:49.881"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:01.440" starttime="20190113 23:52:49.877"></status>
</kw>
<doc>1 create a class-map to match VLAN x in flow 1 succesfully
2 create a policy-map to bind the class-map with the action of translate-cevlan-tag succesfully
3 add eth-port1 to s-tag with transport-service-profile succesfully
4 apply the s-tag and policy-map to ethernet uni succesfully
5 send upstream traffic with VLAN x to ethernet uni and downstream with s-tag and cetag to eth-port1 eth-port1 can pass the upstream traffic with the right double tag; the client can receive the downstream traffic with tag x</doc>
<tags>
<tag>@author=MinGu</tag>
<tag>@eut=10GE-12</tag>
<tag>@feature=Policy Map</tag>
<tag>@globalid=2532599</tag>
<tag>@priority=P1</tag>
<tag>@subFeature=10GE-12: Policy Map support</tag>
<tag>@tcid=AXOS_E72_PARENT-TC-4352</tag>
<tag>@user_interface=CLI</tag>
</tags>
<status status="PASS" endtime="20190113 23:53:01.485" critical="yes" starttime="20190113 23:49:42.706"></status>
</test>
<status status="PASS" endtime="20190113 23:53:01.574" starttime="20190113 23:49:42.453"></status>
</suite>
<kw type="teardown" name="eth_policy_map_suite_deprovision">
<doc>suite deprovision for sub_feature</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>suite deprovision for sub_feature</arg>
</arguments>
<msg timestamp="20190113 23:53:01.709" level="INFO">suite deprovision for sub_feature</msg>
<status status="PASS" endtime="20190113 23:53:01.710" starttime="20190113 23:53:01.709"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>subscriber_point deprovision</arg>
</arguments>
<msg timestamp="20190113 23:53:01.711" level="INFO">subscriber_point deprovision</msg>
<status status="PASS" endtime="20190113 23:53:01.711" starttime="20190113 23:53:01.710"></status>
</kw>
<kw name="subscriber_point_dprov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: deprovision for subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** subscriber service deprovision for ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:53:01.714" level="INFO">****** subscriber service deprovision for subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:53:01.714" starttime="20190113 23:53:01.713"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:53:01.716" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:53:01.716" starttime="20190113 23:53:01.715"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>subscriber_point_${service_model.${subscriber_point}.type}_dprov</arg>
<arg>${device}</arg>
<arg>${subscriber_point}</arg>
</arguments>
<kw name="subscriber_point_eth_dprov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: ethernet port subscriber deprovision (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${subscriber_point}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] ethernet port subscriber deprovision for ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:53:01.721" level="INFO">****** [eutA] ethernet port subscriber deprovision for subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:53:01.721" starttime="20190113 23:53:01.720"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${subscriber_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 23:53:01.725" level="INFO">${port} = 1/2/x3</msg>
<status status="PASS" endtime="20190113 23:53:01.725" starttime="20190113 23:53:01.724"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** provision port ${port} role and parameter ******</arg>
</arguments>
<msg timestamp="20190113 23:53:01.727" level="INFO">****** provision port 1/2/x3 role and parameter ******</msg>
<status status="PASS" endtime="20190113 23:53:01.727" starttime="20190113 23:53:01.726"></status>
</kw>
<kw name="dprov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>role</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:01.734" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:01.993" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:53:01.994" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:53:01.994" starttime="20190113 23:53:01.731"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:01.997" starttime="20190113 23:53:01.996"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:01.998" starttime="20190113 23:53:01.729"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:02.006" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:02.348" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:53:02.349" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:53:02.349" starttime="20190113 23:53:02.003"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:02.353" starttime="20190113 23:53:02.351"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:02.354" starttime="20190113 23:53:02.002"></status>
</kw>
<kw type="for" name="${element} IN [ @{list_cmd} ]">
<kw type="foritem" name="${element} = role">
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${element}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:02.367" level="INFO">send session_command, cmd=no role, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:03.202" level="INFO">session_command result=no role
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:53:03.203" level="INFO">${res} = no role
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:53:03.203" starttime="20190113 23:53:02.362"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:03.206" starttime="20190113 23:53:03.205"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:03.206" starttime="20190113 23:53:02.359"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:03.208" starttime="20190113 23:53:02.358"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:03.209" starttime="20190113 23:53:02.357"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:03.215" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:03.432" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:53:03.433" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:53:03.433" starttime="20190113 23:53:03.212"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:03.436" starttime="20190113 23:53:03.435"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:03.436" starttime="20190113 23:53:03.210"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:03.438" starttime="20190113 23:53:01.727"></status>
</kw>
<kw name="shutdown_port" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Puts an interface in shutdown mode</doc>
<arguments>
<arg>${device}</arg>
<arg>ethernet</arg>
<arg>${port}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:03.446" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:03.641" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:53:03.642" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:53:03.642" starttime="20190113 23:53:03.443"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:03.646" starttime="20190113 23:53:03.644"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:03.646" starttime="20190113 23:53:03.441"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port-type} ${port}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:03.666" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:03.864" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:53:03.865" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:53:03.865" starttime="20190113 23:53:03.664"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:03.869" starttime="20190113 23:53:03.867"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:03.869" starttime="20190113 23:53:03.661"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>shutdown</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:03.876" level="INFO">send session_command, cmd=shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:04.542" level="INFO">session_command result=shutdown
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:53:04.543" level="INFO">${res} = shutdown
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:53:04.543" starttime="20190113 23:53:03.873"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:04.546" starttime="20190113 23:53:04.545"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:04.546" starttime="20190113 23:53:03.871"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:04.552" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:04.747" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:53:04.747" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:53:04.747" starttime="20190113 23:53:04.550"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:04.751" starttime="20190113 23:53:04.749"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:04.751" starttime="20190113 23:53:04.548"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:04.753" starttime="20190113 23:53:03.439"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:04.755" starttime="20190113 23:53:01.723"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:04.757" starttime="20190113 23:53:01.722"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:04.759" starttime="20190113 23:53:01.719"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:04.761" starttime="20190113 23:53:01.717"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:04.762" starttime="20190113 23:53:01.712"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>service_point remove_svc and deprovision</arg>
</arguments>
<msg timestamp="20190113 23:53:04.765" level="INFO">service_point remove_svc and deprovision</msg>
<status status="PASS" endtime="20190113 23:53:04.765" starttime="20190113 23:53:04.764"></status>
</kw>
<kw name="service_point_remove_vlan" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: remove vlan for service_point</doc>
<arguments>
<arg>service_point_list1</arg>
<arg>${service_vlan}</arg>
</arguments>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${vlan_list}</arg>
</arguments>
<assign>
<var>${vlan_list_str}</var>
</assign>
<msg timestamp="20190113 23:53:04.767" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20190113 23:53:04.768" level="INFO">${vlan_list_str} = 4002</msg>
<status status="PASS" endtime="20190113 23:53:04.768" starttime="20190113 23:53:04.767"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${vlan_list_str}</arg>
<arg>,</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${vlan_list_str}</var>
</assign>
<msg timestamp="20190113 23:53:04.770" level="INFO">${vlan_list_str} = 4002</msg>
<status status="PASS" endtime="20190113 23:53:04.770" starttime="20190113 23:53:04.768"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_TransVlan_${vlan_list_str}</arg>
</arguments>
<assign>
<var>${transport_prf}</var>
</assign>
<msg timestamp="20190113 23:53:04.771" level="INFO">${transport_prf} = auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 23:53:04.771" starttime="20190113 23:53:04.770"></status>
</kw>
<kw type="for" name="${service_point} IN [ @{service_model.${service_point_list}} ]">
<kw type="foritem" name="${service_point} = service_point1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:53:04.775" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:53:04.775" starttime="20190113 23:53:04.773"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** uplink service remove vlan ${vlan_list} for ${device} ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:53:04.777" level="INFO">****** uplink service remove vlan 4002 for eutA service_point1 ******</msg>
<status status="PASS" endtime="20190113 23:53:04.777" starttime="20190113 23:53:04.776"></status>
</kw>
<kw name="service_point_remove_transport_profile" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: remove transport_profile for service_point interface (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${service_point}</arg>
<arg>${transport_prf}</arg>
</arguments>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>'lag'=='${service_model.${service_point}.type}'</arg>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>lag</arg>
<arg>${service_model.${service_point}.name}</arg>
<arg>transport-service-profile=${transport_prf}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:04.780" starttime="20190113 23:53:04.779"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove transport-service-profile from interface</arg>
</arguments>
<msg timestamp="20190113 23:53:04.810" level="INFO">remove transport-service-profile from interface</msg>
<status status="PASS" endtime="20190113 23:53:04.810" starttime="20190113 23:53:04.781"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${service_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 23:53:04.814" level="INFO">${port} = 1/2/x2</msg>
<status status="PASS" endtime="20190113 23:53:04.814" starttime="20190113 23:53:04.812"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** deprovision port ${port} transport-service-profile******</arg>
</arguments>
<msg timestamp="20190113 23:53:04.815" level="INFO">****** deprovision port 1/2/x2 transport-service-profile******</msg>
<status status="PASS" endtime="20190113 23:53:04.815" starttime="20190113 23:53:04.814"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ethernet ${port}</arg>
</arguments>
<msg timestamp="20190113 23:53:04.844" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x2, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:06.544" level="INFO">session_command result=show running-config interface ethernet 1/2/x2
interface ethernet 1/2/x2
 no shutdown
 role                      inni
 transport-service-profile auto_TransVlan_4002
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:53:06.544" starttime="20190113 23:53:04.816"></status>
</kw>
<kw name="dprov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>transport-service-profile</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:06.551" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:06.785" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:53:06.785" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:53:06.786" starttime="20190113 23:53:06.549"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:06.789" starttime="20190113 23:53:06.788"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:06.790" starttime="20190113 23:53:06.547"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:06.799" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:07.046" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:53:07.047" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:53:07.047" starttime="20190113 23:53:06.793"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:07.051" starttime="20190113 23:53:07.050"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:07.051" starttime="20190113 23:53:06.792"></status>
</kw>
<kw type="for" name="${element} IN [ @{list_cmd} ]">
<kw type="foritem" name="${element} = transport-service-profile">
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${element}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:07.065" level="INFO">send session_command, cmd=no transport-service-profile, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:07.448" level="INFO">session_command result=no transport-service-profile
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:53:07.449" level="INFO">${res} = no transport-service-profile
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:53:07.449" starttime="20190113 23:53:07.058"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:07.452" starttime="20190113 23:53:07.452"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:07.453" starttime="20190113 23:53:07.056"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:07.454" starttime="20190113 23:53:07.055"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:07.456" starttime="20190113 23:53:07.054"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:07.465" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:07.677" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:53:07.678" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:53:07.678" starttime="20190113 23:53:07.459"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:07.681" starttime="20190113 23:53:07.680"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:07.682" starttime="20190113 23:53:07.457"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:07.701" starttime="20190113 23:53:06.546"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:07.703" starttime="20190113 23:53:04.812"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:07.708" starttime="20190113 23:53:04.811"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:07.710" starttime="20190113 23:53:04.778"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>delete_config_object</arg>
<arg>${device}</arg>
<arg>transport-service-profile</arg>
<arg>${transport_prf}</arg>
</arguments>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>transport-service-profile</arg>
<arg>${transport_prf}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:53:07.724" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:07.965" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:53:07.965" starttime="20190113 23:53:07.715"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:07.974" level="INFO">send session_command, cmd=no transport-service-profile auto_TransVlan_4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:09.260" level="INFO">session_command result=no transport-service-profile auto_TransVlan_4002
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:53:09.261" level="INFO">${res} = no transport-service-profile auto_TransVlan_4002
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:53:09.261" starttime="20190113 23:53:07.970"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:09.273" starttime="20190113 23:53:09.272"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:09.274" starttime="20190113 23:53:07.968"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:53:09.288" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:09.502" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:53:09.502" starttime="20190113 23:53:09.275"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:09.504" starttime="20190113 23:53:07.714"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:09.506" starttime="20190113 23:53:07.711"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:09.507" starttime="20190113 23:53:04.773"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:09.509" starttime="20190113 23:53:04.772"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:09.511" starttime="20190113 23:53:04.765"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete vlan</arg>
</arguments>
<msg timestamp="20190113 23:53:09.513" level="INFO">delete vlan</msg>
<status status="PASS" endtime="20190113 23:53:09.513" starttime="20190113 23:53:09.512"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>eutA</arg>
<arg>vlan</arg>
<arg>${service_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:53:09.519" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:09.769" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:53:09.770" starttime="20190113 23:53:09.514"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:09.779" level="INFO">send session_command, cmd=no vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:11.440" level="INFO">session_command result=no vlan 4002
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:53:11.441" level="INFO">${res} = no vlan 4002
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:53:11.441" starttime="20190113 23:53:09.774"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:11.444" starttime="20190113 23:53:11.443"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:11.445" starttime="20190113 23:53:09.772"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:53:11.448" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:11.646" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:53:11.646" starttime="20190113 23:53:11.447"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:11.649" starttime="20190113 23:53:09.513"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>service_point deprovision</arg>
</arguments>
<msg timestamp="20190113 23:53:11.652" level="INFO">service_point deprovision</msg>
<status status="PASS" endtime="20190113 23:53:11.652" starttime="20190113 23:53:11.651"></status>
</kw>
<kw name="service_point_dprov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: deprovision for service_point</doc>
<arguments>
<arg>service_point_list1</arg>
</arguments>
<kw type="for" name="${service_point} IN [ @{service_model.${service_point_list}} ]">
<kw type="foritem" name="${service_point} = service_point1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:53:11.656" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:53:11.656" starttime="20190113 23:53:11.655"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** uplink service deprovision for ${device} ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:53:11.658" level="INFO">****** uplink service deprovision for eutA service_point1 ******</msg>
<status status="PASS" endtime="20190113 23:53:11.658" starttime="20190113 23:53:11.657"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>service_point_${service_model.${service_point}.type}_dprov</arg>
<arg>${device}</arg>
<arg>${service_point}</arg>
</arguments>
<kw name="service_point_eth_dprov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: deprovision for eth type service point (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${service_point}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] ethernet port basic deprovision for ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:53:11.678" level="INFO">****** [eutA] ethernet port basic deprovision for service_point1 ******</msg>
<status status="PASS" endtime="20190113 23:53:11.678" starttime="20190113 23:53:11.661"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${service_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 23:53:11.682" level="INFO">${port} = 1/2/x2</msg>
<status status="PASS" endtime="20190113 23:53:11.682" starttime="20190113 23:53:11.680"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** provision port ${port} role and parameter ******</arg>
</arguments>
<msg timestamp="20190113 23:53:11.683" level="INFO">****** provision port 1/2/x2 role and parameter ******</msg>
<status status="PASS" endtime="20190113 23:53:11.683" starttime="20190113 23:53:11.682"></status>
</kw>
<kw name="dprov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>role</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:11.706" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:12.016" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:53:12.016" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:53:12.016" starttime="20190113 23:53:11.687"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:12.025" starttime="20190113 23:53:12.024"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:12.026" starttime="20190113 23:53:11.685"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:12.034" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:12.277" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:53:12.278" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:53:12.278" starttime="20190113 23:53:12.030"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:12.281" starttime="20190113 23:53:12.280"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:12.281" starttime="20190113 23:53:12.029"></status>
</kw>
<kw type="for" name="${element} IN [ @{list_cmd} ]">
<kw type="foritem" name="${element} = role">
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${element}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:12.300" level="INFO">send session_command, cmd=no role, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:13.127" level="INFO">session_command result=no role
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:53:13.128" level="INFO">${res} = no role
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:53:13.128" starttime="20190113 23:53:12.289"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:13.131" starttime="20190113 23:53:13.130"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:13.131" starttime="20190113 23:53:12.288"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:13.132" starttime="20190113 23:53:12.287"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:13.134" starttime="20190113 23:53:12.286"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:13.139" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:13.346" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:53:13.346" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:53:13.346" starttime="20190113 23:53:13.137"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:13.349" starttime="20190113 23:53:13.348"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:13.350" starttime="20190113 23:53:13.135"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:13.365" starttime="20190113 23:53:11.684"></status>
</kw>
<kw name="shutdown_port" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Puts an interface in shutdown mode</doc>
<arguments>
<arg>${device}</arg>
<arg>ethernet</arg>
<arg>${port}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:13.394" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:13.652" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:53:13.652" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:53:13.652" starttime="20190113 23:53:13.377"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:13.656" starttime="20190113 23:53:13.654"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:13.656" starttime="20190113 23:53:13.376"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port-type} ${port}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:13.662" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:13.867" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:53:13.868" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:53:13.868" starttime="20190113 23:53:13.660"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:13.872" starttime="20190113 23:53:13.871"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:13.872" starttime="20190113 23:53:13.658"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>shutdown</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:13.887" level="INFO">send session_command, cmd=shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:14.658" level="INFO">session_command result=shutdown
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:53:14.658" level="INFO">${res} = shutdown
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:53:14.658" starttime="20190113 23:53:13.877"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:14.662" starttime="20190113 23:53:14.661"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:14.663" starttime="20190113 23:53:13.875"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:53:14.669" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:53:14.928" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:53:14.929" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:53:14.929" starttime="20190113 23:53:14.666"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:53:14.935" starttime="20190113 23:53:14.934"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:14.936" starttime="20190113 23:53:14.664"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:14.942" starttime="20190113 23:53:13.375"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:14.947" starttime="20190113 23:53:11.679"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:14.949" starttime="20190113 23:53:11.678"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:14.950" starttime="20190113 23:53:11.660"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:14.952" starttime="20190113 23:53:11.658"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:14.954" starttime="20190113 23:53:11.655"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:14.956" starttime="20190113 23:53:11.654"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:14.958" starttime="20190113 23:53:11.653"></status>
</kw>
<status status="PASS" endtime="20190113 23:53:14.960" starttime="20190113 23:53:01.707"></status>
</kw>
<doc>Initialization file test suites
It is for putting suite level setup and teardown procedures
And setting the forced tags for all the test cases in folder and subfolder</doc>
<status status="PASS" endtime="20190113 23:53:14.961" starttime="20190113 23:42:10.430"></status>
</suite>
<status status="PASS" endtime="20190113 23:53:14.968" starttime="20190113 23:42:10.427"></status>
</suite>
<status status="PASS" endtime="20190113 23:53:14.981" starttime="20190113 23:42:10.424"></status>
</suite>
<status status="PASS" endtime="20190113 23:53:14.987" starttime="20190113 23:42:10.421"></status>
</suite>
<status status="PASS" endtime="20190113 23:53:14.996" starttime="20190113 23:42:10.418"></status>
</suite>
<status status="PASS" endtime="20190113 23:53:15.002" starttime="20190113 23:42:10.414"></status>
</suite>
<status status="PASS" endtime="20190113 23:53:15.008" starttime="20190113 23:42:10.284"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="3">Critical Tests</stat>
<stat fail="0" pass="3">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="3">@author=MinGu</stat>
<stat fail="0" pass="3">@eut=10GE-12</stat>
<stat fail="0" pass="3">@feature=Policy Map</stat>
<stat fail="0" pass="2">@globalid=2532599</stat>
<stat fail="0" pass="1">@globalid=2532600</stat>
<stat fail="0" pass="3">@priority=P1</stat>
<stat fail="0" pass="3">@subFeature=10GE-12: Policy Map support</stat>
<stat fail="0" pass="1">@tcid=AXOS_E72_PARENT-TC-4350</stat>
<stat fail="0" pass="1">@tcid=AXOS_E72_PARENT-TC-4351</stat>
<stat fail="0" pass="1">@tcid=AXOS_E72_PARENT-TC-4352</stat>
<stat fail="0" pass="3">@user_interface=CLI</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="AXOS" pass="3">AXOS</stat>
<stat fail="0" id="s1-s1" name="AXOS-automation" pass="3">AXOS.AXOS-automation</stat>
<stat fail="0" id="s1-s1-s1" name="Milan" pass="3">AXOS.AXOS-automation.Milan</stat>
<stat fail="0" id="s1-s1-s1-s1" name="ST Test Cases" pass="3">AXOS.AXOS-automation.Milan.ST Test Cases</stat>
<stat fail="0" id="s1-s1-s1-s1-s1" name="Data" pass="3">AXOS.AXOS-automation.Milan.ST Test Cases.Data</stat>
<stat fail="0" id="s1-s1-s1-s1-s1-s1" name="Policy Map" pass="3">AXOS.AXOS-automation.Milan.ST Test Cases.Data.Policy Map</stat>
<stat fail="0" id="s1-s1-s1-s1-s1-s1-s1" name="Testcase" pass="3">AXOS.AXOS-automation.Milan.ST Test Cases.Data.Policy Map.Testcase</stat>
<stat fail="0" id="s1-s1-s1-s1-s1-s1-s1-s1" name="Tc Add Cevlan Tag" pass="1">AXOS.AXOS-automation.Milan.ST Test Cases.Data.Policy Map.Testcase.Tc Add Cevlan Tag</stat>
<stat fail="0" id="s1-s1-s1-s1-s1-s1-s1-s2" name="Tc Remove Cevlan" pass="1">AXOS.AXOS-automation.Milan.ST Test Cases.Data.Policy Map.Testcase.Tc Remove Cevlan</stat>
<stat fail="0" id="s1-s1-s1-s1-s1-s1-s1-s3" name="Tc Translate Cevlan Tag" pass="1">AXOS.AXOS-automation.Milan.ST Test Cases.Data.Policy Map.Testcase.Tc Translate Cevlan Tag</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20190113 23:42:11.429" level="ERROR">Error in file '/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/base.robot': Resource file 'VLAN/case_template/run_dhcp_and_check_traffic.robot' does not exist.</msg>
<msg timestamp="20190113 23:42:29.310" level="ERROR">Error in file '/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/base.robot': Resource file 'VLAN/case_template/run_dhcp_and_check_traffic.robot' does not exist.</msg>
<msg timestamp="20190113 23:46:20.633" level="ERROR">Error in file '/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/base.robot': Resource file 'VLAN/case_template/run_dhcp_and_check_traffic.robot' does not exist.</msg>
<msg timestamp="20190113 23:49:42.537" level="ERROR">Error in file '/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/base.robot': Resource file 'VLAN/case_template/run_dhcp_and_check_traffic.robot' does not exist.</msg>
</errors>
</robot>
