<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20190113 22:56:40.405" generator="Robot 3.0.4 (Python 2.7.14 on linux2)">
<suite source="/home/guchen/workspace/AXOS" id="s1" name="AXOS">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation" id="s1-s1" name="AXOS-automation">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan" id="s1-s1-s1" name="Milan">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases" id="s1-s1-s1-s1" name="ST Test Cases">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data" id="s1-s1-s1-s1-s1" name="Data">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/Policy_Map" id="s1-s1-s1-s1-s1-s1" name="Policy Map">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/Policy_Map/testcase" id="s1-s1-s1-s1-s1-s1-s1" name="Testcase">
<kw type="setup" name="eth_policy_map_suite_provision">
<doc>suite provision for sub_feature</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>suite provision for sub_feature</arg>
</arguments>
<msg timestamp="20190113 22:57:11.505" level="INFO">suite provision for sub_feature</msg>
<status status="PASS" endtime="20190113 22:57:11.505" starttime="20190113 22:57:11.504"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>set eut version and release</arg>
</arguments>
<msg timestamp="20190113 22:57:11.506" level="INFO">set eut version and release</msg>
<status status="PASS" endtime="20190113 22:57:11.506" starttime="20190113 22:57:11.506"></status>
</kw>
<kw name="set_eut_version" library="release_adapter">
<doc>set EUT build and release attribution</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>If device is not specified, get it from topo.yaml ${DEVICES} list</arg>
</arguments>
<msg timestamp="20190113 22:57:11.509" level="INFO">If device is not specified, get it from topo.yaml &lt;cafe.core.utils.Param object at 0x7f7697c23fd0&gt; list</msg>
<status status="PASS" endtime="20190113 22:57:11.509" starttime="20190113 22:57:11.508"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${device}'</arg>
<arg>Create List</arg>
<arg>${device}</arg>
<arg>ELSE</arg>
<arg>get dictionary keys</arg>
<arg>${DEVICES}</arg>
</arguments>
<assign>
<var>${keys}</var>
</assign>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${DEVICES}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:11.511" starttime="20190113 22:57:11.511"></status>
</kw>
<msg timestamp="20190113 22:57:11.512" level="INFO">${keys} = ['eutA', 'tg1']</msg>
<status status="PASS" endtime="20190113 22:57:11.512" starttime="20190113 22:57:11.509"></status>
</kw>
<kw type="for" name="${eut} IN [ @{keys} ]">
<kw type="foritem" name="${eut} = eutA">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current eut is ${eut}, type is ${DEVICES.${eut}.type}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:11.515" starttime="20190113 22:57:11.514"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${DEVICES.${eut}.type}'!='AXOS'</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:11.516" starttime="20190113 22:57:11.515"></status>
</kw>
<kw name="get_eut_version" library="release_adapter">
<tags>
<tag>@author=llin</tag>
</tags>
<doc>this is the keyword used to get single device's build information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>cli</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:15.607" level="INFO">Created ShellDevice(eutA)</msg>
<msg timestamp="20190113 22:57:15.608" level="INFO">send session_command, cmd=cli, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:16.193" level="INFO">session_command result=cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG state persistence control commands
  clear                 - Clear object data
  clock                 - Modify clock
  configure             - Manipulate software configuration information
  copy                  - Copy files
  cpe-upgrade:cpe       - CPE operation
  debug                 - 
  delete                - Delete files
  devtools              - Enable/disable development tools
  download              - Download files
  enable                - Enable EXEC commands
  exit                  - Exit the management session
  folder                - 
  generate              - Generate files
  idle-timeout          - Configure idle timeout
  install               - 
  lock                  - lock a datastore
  logout                - Logout a user
  manual                - Manual operation with alarms
  no                    - Negate a command or set its defaults
  ofa-connect           - Open Flow Connect
  ofa-listener          - Open Flow Listener
  ofa-port              - Open Flow port
  ont-eth               - ONT-ETH efm-loopback-status mode
  ont-firmware-upgrade  - Start software download
  ont-simulation        - ONT simulation commands
  ont-upgrade           - ONT upgrade commands
  paginate              - Paginate output from CLI commands
  perform               - Perform an operation
  ping                  - Ping IP address
  ping6                 - Ping IPv6 address
  quit                  - Exit the management session
  redundancy            - redundancy switchover commands
  reload                - Reboot the current card
  remove-dynamic-policy - 
  replay                - Replay card-config
  restart               - Restart Diameter daemon
  run                   - 
  send                  - Send message to terminal of one or all users
  session               - 
  show                  - Show information about the system
  ssh                   - ssh command
  start                 - Start an operation
  stop                  - Stop an operation
  switch                - Switch network clock
  tcpdump               - tcpdump command
  telnet                - telnet command
  templatize            - Find patterns in subtree.
  terminal              - Set terminal type
  timestamp             - Enable/disable the display of timestamp
  traceroute            - Traceroute IP address
  uninstall             - 
  unlock                - unlock a datastore
  upgrade               - Upgrade commands
  upload                - Upload files
  verify                - 
NGPON2X4</msg>
<msg timestamp="20190113 22:57:16.194" level="INFO">${res} = cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG s...</msg>
<status status="PASS" endtime="20190113 22:57:16.194" starttime="20190113 22:57:11.518"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:16.198" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:16.671" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 22:57:16.671" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 22:57:16.671" starttime="20190113 22:57:16.196"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>(description|details)\\s*(.*)\r</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 22:57:16.675" level="INFO">${matches} = ['IBAXOS191-CI-330', 'IBAXOS191-CI-330']</msg>
<status status="PASS" endtime="20190113 22:57:16.675" starttime="20190113 22:57:16.673"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:16.677" starttime="20190113 22:57:16.676"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 22:57:16.678" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 22:57:16.679" starttime="20190113 22:57:16.678"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${build}</arg>
</arguments>
<msg timestamp="20190113 22:57:16.680" level="INFO">we've got the build informations : IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 22:57:16.680" starttime="20190113 22:57:16.679"></status>
</kw>
<msg timestamp="20190113 22:57:16.681" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 22:57:16.681" starttime="20190113 22:57:11.517"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>build</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:16.684" starttime="20190113 22:57:16.682"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s build is ${DEVICES.${eut}.build}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:16.686" starttime="20190113 22:57:16.684"></status>
</kw>
<kw name="get_eut_distro" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to get single device's distro information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:16.690" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:17.120" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 22:57:17.120" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 22:57:17.121" starttime="20190113 22:57:16.687"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>distro\\s*"(.*)"\r</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 22:57:17.124" level="INFO">${matches} = ['IB-AXOS-19.1 2019.01.12 02:16:30', 'IB-AXOS-19.1 2019.01.12 02:16:30']</msg>
<status status="PASS" endtime="20190113 22:57:17.124" starttime="20190113 22:57:17.122"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.126" starttime="20190113 22:57:17.124"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<msg timestamp="20190113 22:57:17.127" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 22:57:17.127" starttime="20190113 22:57:17.126"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${distro}</arg>
</arguments>
<msg timestamp="20190113 22:57:17.129" level="INFO">we've got the build informations : IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 22:57:17.129" starttime="20190113 22:57:17.128"></status>
</kw>
<msg timestamp="20190113 22:57:17.130" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 22:57:17.130" starttime="20190113 22:57:16.686"></status>
</kw>
<kw name="mapping_distro_to_release" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to mapping build id to release name</doc>
<arguments>
<arg>${distro}</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${distro}</arg>
<arg>\\s+.*$</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 22:57:17.134" level="INFO">${build} = IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 22:57:17.134" starttime="20190113 22:57:17.133"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the branch of the build is : ${build}</arg>
</arguments>
<msg timestamp="20190113 22:57:17.135" level="INFO">the branch of the build is : IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 22:57:17.136" starttime="20190113 22:57:17.135"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>open('${map}').readlines()</arg>
</arguments>
<assign>
<var>${fileHandler}</var>
</assign>
<msg timestamp="20190113 22:57:17.138" level="INFO">${fileHandler} = ['Release, Branch\n', 'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2\n', 'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-...</msg>
<status status="PASS" endtime="20190113 22:57:17.138" starttime="20190113 22:57:17.136"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the mapping file content : ${fileHandler}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.140" starttime="20190113 22:57:17.139"></status>
</kw>
<kw name="Convert To List" library="Collections">
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.141" starttime="20190113 22:57:17.140"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 22:57:17.143" level="INFO">${rowIndex} = 0</msg>
<status status="PASS" endtime="20190113 22:57:17.143" starttime="20190113 22:57:17.142"></status>
</kw>
<kw type="for" name="${rowitem} IN [ @{fileHandler} ]">
<kw type="foritem" name="${rowitem} = Release, Branch&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.146" starttime="20190113 22:57:17.145"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 22:57:17.149" level="FAIL">'Release, Branch
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 22:57:17.149" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 22:57:17.149" starttime="20190113 22:57:17.148"></status>
</kw>
<msg timestamp="20190113 22:57:17.149" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 22:57:17.149" starttime="20190113 22:57:17.146"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 22:57:17.151" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 22:57:17.151" starttime="20190113 22:57:17.150"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.153" starttime="20190113 22:57:17.152"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 22:57:17.154" level="INFO">${rowIndex} = 1</msg>
<status status="PASS" endtime="20190113 22:57:17.154" starttime="20190113 22:57:17.153"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:17.154" starttime="20190113 22:57:17.144"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.157" starttime="20190113 22:57:17.156"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 22:57:17.160" level="FAIL">'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 22:57:17.160" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 22:57:17.160" starttime="20190113 22:57:17.159"></status>
</kw>
<msg timestamp="20190113 22:57:17.161" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 22:57:17.161" starttime="20190113 22:57:17.158"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 22:57:17.162" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 22:57:17.162" starttime="20190113 22:57:17.161"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.164" starttime="20190113 22:57:17.163"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 22:57:17.165" level="INFO">${rowIndex} = 2</msg>
<status status="PASS" endtime="20190113 22:57:17.165" starttime="20190113 22:57:17.164"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:17.166" starttime="20190113 22:57:17.155"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.168" starttime="20190113 22:57:17.167"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 22:57:17.170" level="FAIL">'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 22:57:17.170" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 22:57:17.170" starttime="20190113 22:57:17.169"></status>
</kw>
<msg timestamp="20190113 22:57:17.171" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 22:57:17.171" starttime="20190113 22:57:17.168"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 22:57:17.172" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 22:57:17.172" starttime="20190113 22:57:17.171"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.174" starttime="20190113 22:57:17.173"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 22:57:17.175" level="INFO">${rowIndex} = 3</msg>
<status status="PASS" endtime="20190113 22:57:17.175" starttime="20190113 22:57:17.174"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:17.175" starttime="20190113 22:57:17.166"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.178" starttime="20190113 22:57:17.176"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 22:57:17.180" level="FAIL">'AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 22:57:17.180" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 22:57:17.181" starttime="20190113 22:57:17.179"></status>
</kw>
<msg timestamp="20190113 22:57:17.181" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 22:57:17.181" starttime="20190113 22:57:17.178"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 22:57:17.182" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 22:57:17.183" starttime="20190113 22:57:17.182"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.184" starttime="20190113 22:57:17.183"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 22:57:17.186" level="INFO">${rowIndex} = 4</msg>
<status status="PASS" endtime="20190113 22:57:17.186" starttime="20190113 22:57:17.185"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:17.186" starttime="20190113 22:57:17.176"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.188" starttime="20190113 22:57:17.187"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 22:57:17.191" level="FAIL">'AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 22:57:17.191" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 22:57:17.191" starttime="20190113 22:57:17.190"></status>
</kw>
<msg timestamp="20190113 22:57:17.191" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 22:57:17.192" starttime="20190113 22:57:17.189"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 22:57:17.193" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 22:57:17.193" starttime="20190113 22:57:17.192"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.195" starttime="20190113 22:57:17.194"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 22:57:17.196" level="INFO">${rowIndex} = 5</msg>
<status status="PASS" endtime="20190113 22:57:17.196" starttime="20190113 22:57:17.195"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:17.196" starttime="20190113 22:57:17.186"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_19_1, IB-AXOS-19.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.199" starttime="20190113 22:57:17.198"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.201" starttime="20190113 22:57:17.200"></status>
</kw>
<msg timestamp="20190113 22:57:17.201" level="INFO">${contain_build} = True</msg>
<status status="PASS" endtime="20190113 22:57:17.202" starttime="20190113 22:57:17.199"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 22:57:17.203" level="INFO">build IB-AXOS-19.1 search result is True</msg>
<status status="PASS" endtime="20190113 22:57:17.203" starttime="20190113 22:57:17.202"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<msg timestamp="20190113 22:57:17.204" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20190113 22:57:17.204" starttime="20190113 22:57:17.203"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:17.205" starttime="20190113 22:57:17.197"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:17.205" starttime="20190113 22:57:17.143"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${contain_build}'!='True'</arg>
<arg>NONE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.206" starttime="20190113 22:57:17.205"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we find the release info in ${rowIndex} row</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.208" starttime="20190113 22:57:17.207"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<assign>
<var>${len}</var>
</assign>
<msg timestamp="20190113 22:57:17.210" level="INFO">Length is 6</msg>
<msg timestamp="20190113 22:57:17.210" level="INFO">${len} = 6</msg>
<status status="PASS" endtime="20190113 22:57:17.210" starttime="20190113 22:57:17.209"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>@{fileHandler}[${rowIndex}]</arg>
</arguments>
<assign>
<var>${releaseStr}</var>
</assign>
<msg timestamp="20190113 22:57:17.212" level="DEBUG">Argument types are:
&lt;type 'str'&gt;</msg>
<msg timestamp="20190113 22:57:17.212" level="INFO">${releaseStr} = AXOS_19_1, IB-AXOS-19.1
</msg>
<status status="PASS" endtime="20190113 22:57:17.212" starttime="20190113 22:57:17.211"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>release=${releaseStr}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.214" starttime="20190113 22:57:17.213"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${releaseStr}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>@{matches}</var>
</assign>
<msg timestamp="20190113 22:57:17.215" level="INFO">@{matches} = [ AXOS_19_1 |  IB-AXOS-19.1
 ]</msg>
<status status="PASS" endtime="20190113 22:57:17.215" starttime="20190113 22:57:17.214"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.217" starttime="20190113 22:57:17.216"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 22:57:17.218" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 22:57:17.218" starttime="20190113 22:57:17.217"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the release information: ${release}.</arg>
</arguments>
<msg timestamp="20190113 22:57:17.220" level="INFO">we've got the release information: AXOS_19_1.</msg>
<status status="PASS" endtime="20190113 22:57:17.220" starttime="20190113 22:57:17.219"></status>
</kw>
<msg timestamp="20190113 22:57:17.220" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 22:57:17.221" starttime="20190113 22:57:17.131"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'NONE'=='${release}'</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.222" starttime="20190113 22:57:17.221"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>release</arg>
<arg>${release}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.228" starttime="20190113 22:57:17.226"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s release is ${DEVICES.${eut}.release}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.229" starttime="20190113 22:57:17.228"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:17.230" starttime="20190113 22:57:11.513"></status>
</kw>
<kw type="foritem" name="${eut} = tg1">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current eut is ${eut}, type is ${DEVICES.${eut}.type}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.246" starttime="20190113 22:57:17.244"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${DEVICES.${eut}.type}'!='AXOS'</arg>
</arguments>
<msg timestamp="20190113 22:57:17.248" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20190113 22:57:17.248" starttime="20190113 22:57:17.246"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:17.249" starttime="20190113 22:57:17.243"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:17.249" starttime="20190113 22:57:11.512"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:17.257" starttime="20190113 22:57:11.507"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>service_point_provision for uplink side</arg>
</arguments>
<msg timestamp="20190113 22:57:17.266" level="INFO">service_point_provision for uplink side</msg>
<status status="PASS" endtime="20190113 22:57:17.266" starttime="20190113 22:57:17.265"></status>
</kw>
<kw name="service_point_prov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision for service_point</doc>
<arguments>
<arg>service_point_list1</arg>
</arguments>
<kw type="for" name="${service_point} IN [ @{service_model.${service_point_list}} ]">
<kw type="foritem" name="${service_point} = service_point1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 22:57:17.271" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 22:57:17.271" starttime="20190113 22:57:17.270"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** uplink service provision for ${device} ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 22:57:17.272" level="INFO">****** uplink service provision for eutA service_point1 ******</msg>
<status status="PASS" endtime="20190113 22:57:17.272" starttime="20190113 22:57:17.271"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>service_point_${service_model.${service_point}.type}_prov</arg>
<arg>${device}</arg>
<arg>${service_point}</arg>
</arguments>
<kw name="service_point_eth_prov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision for eth type service point (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${service_point}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] ethernet port basic provision for ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 22:57:17.297" level="INFO">****** [eutA] ethernet port basic provision for service_point1 ******</msg>
<status status="PASS" endtime="20190113 22:57:17.298" starttime="20190113 22:57:17.275"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${service_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 22:57:17.301" level="INFO">${port} = 1/2/x2</msg>
<status status="PASS" endtime="20190113 22:57:17.301" starttime="20190113 22:57:17.300"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** provision port ${port} role and parameter ******</arg>
</arguments>
<msg timestamp="20190113 22:57:17.303" level="INFO">****** provision port 1/2/x2 role and parameter ******</msg>
<status status="PASS" endtime="20190113 22:57:17.303" starttime="20190113 22:57:17.302"></status>
</kw>
<kw name="prov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>${service_model.${service_point}.attribute.interface_role}</arg>
<arg>ENABLED</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:17.312" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:17.520" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:57:17.520" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:17.520" starttime="20190113 22:57:17.307"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.523" starttime="20190113 22:57:17.522"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:17.523" starttime="20190113 22:57:17.306"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:17.529" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:17.828" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 22:57:17.828" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 22:57:17.828" starttime="20190113 22:57:17.526"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:17.831" starttime="20190113 22:57:17.830"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:17.832" starttime="20190113 22:57:17.525"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${switchport}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>switchport ${switchport}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>switchport ${switchport}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:17.838" level="INFO">send session_command, cmd=switchport ENABLED, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:18.191" level="INFO">session_command result=switchport ENABLED
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 22:57:18.192" level="INFO">${res} = switchport ENABLED
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 22:57:18.192" starttime="20190113 22:57:17.836"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:18.195" starttime="20190113 22:57:18.194"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:18.195" starttime="20190113 22:57:17.834"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:18.197" starttime="20190113 22:57:17.833"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${interface_role}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>role ${interface_role}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>role ${interface_role}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:18.205" level="INFO">send session_command, cmd=role inni, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:19.018" level="INFO">session_command result=role inni
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 22:57:19.018" level="INFO">${res} = role inni
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 22:57:19.018" starttime="20190113 22:57:18.201"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:19.030" starttime="20190113 22:57:19.028"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:19.030" starttime="20190113 22:57:18.199"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:19.032" starttime="20190113 22:57:18.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:19.034" starttime="20190113 22:57:19.033"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:19.041" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:57:19.041" starttime="20190113 22:57:19.040"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 22:57:19.042" starttime="20190113 22:57:19.041"></status>
</kw>
<msg timestamp="20190113 22:57:19.042" level="INFO">${cmd_string} = </msg>
<status status="PASS" endtime="20190113 22:57:19.043" starttime="20190113 22:57:19.038"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:19.044" starttime="20190113 22:57:19.043"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:19.049" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:19.251" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 22:57:19.251" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:19.251" starttime="20190113 22:57:19.047"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:19.253" starttime="20190113 22:57:19.252"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:19.254" starttime="20190113 22:57:19.045"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:19.255" starttime="20190113 22:57:17.304"></status>
</kw>
<kw name="no_shutdown_port" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Puts an interface in shutdown mode</doc>
<arguments>
<arg>${device}</arg>
<arg>ethernet</arg>
<arg>${port}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:19.260" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:19.464" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:57:19.464" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:19.465" starttime="20190113 22:57:19.258"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:19.467" starttime="20190113 22:57:19.467"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:19.468" starttime="20190113 22:57:19.257"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port-type} ${port}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:19.472" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:19.687" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 22:57:19.687" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 22:57:19.687" starttime="20190113 22:57:19.470"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:19.690" starttime="20190113 22:57:19.689"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:19.690" starttime="20190113 22:57:19.469"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no shutdown</arg>
<arg>30</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:19.695" level="INFO">send session_command, cmd=no shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:20.399" level="INFO">session_command result=no shutdown
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 22:57:20.399" level="INFO">${res} = no shutdown
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 22:57:20.399" starttime="20190113 22:57:19.692"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:20.402" starttime="20190113 22:57:20.401"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:20.402" starttime="20190113 22:57:19.691"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:20.407" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:20.609" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 22:57:20.609" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:20.609" starttime="20190113 22:57:20.405"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:20.612" starttime="20190113 22:57:20.611"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:20.612" starttime="20190113 22:57:20.403"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:20.625" starttime="20190113 22:57:19.256"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:20.626" starttime="20190113 22:57:17.299"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:20.631" starttime="20190113 22:57:17.298"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:20.632" starttime="20190113 22:57:17.274"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:20.633" starttime="20190113 22:57:17.273"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:20.634" starttime="20190113 22:57:17.269"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:20.635" starttime="20190113 22:57:17.268"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:20.636" starttime="20190113 22:57:17.267"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>service_point add svc</arg>
</arguments>
<msg timestamp="20190113 22:57:20.638" level="INFO">service_point add svc</msg>
<status status="PASS" endtime="20190113 22:57:20.638" starttime="20190113 22:57:20.637"></status>
</kw>
<kw name="prov_vlan" library="keyword_command">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description: provision vlan</doc>
<arguments>
<arg>eutA</arg>
<arg>${service_vlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>vlan ${vlan}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 22:57:20.642" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 22:57:20.642" starttime="20190113 22:57:20.641"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${l2-dhcp-profile}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} l2-dhcp-profile ${l2-dhcp-profile}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 22:57:20.644" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 22:57:20.644" starttime="20190113 22:57:20.642"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${igmp-profile}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} igmp-profile ${igmp-profile}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 22:57:20.645" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 22:57:20.645" starttime="20190113 22:57:20.644"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${pppoe-ia-id-profile}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} pppoe-ia-id-profile ${pppoe-ia-id-profile}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 22:57:20.647" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 22:57:20.647" starttime="20190113 22:57:20.646"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${mac-learning}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} mac-learning ${mac-learning}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 22:57:20.649" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 22:57:20.649" starttime="20190113 22:57:20.648"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${mode}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} mode ${mode}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 22:57:20.651" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 22:57:20.651" starttime="20190113 22:57:20.650"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${source-verify}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} source-verify ${source-verify}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 22:57:20.652" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 22:57:20.652" starttime="20190113 22:57:20.651"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${mff}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} mff ${mff}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 22:57:20.654" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 22:57:20.654" starttime="20190113 22:57:20.653"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:57:20.656" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:20.841" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:20.842" starttime="20190113 22:57:20.654"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_str}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:20.848" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:22.117" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 22:57:22.117" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 22:57:22.118" starttime="20190113 22:57:20.845"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:22.121" starttime="20190113 22:57:22.120"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:22.122" starttime="20190113 22:57:20.843"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:22.130" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:57:22.131" starttime="20190113 22:57:22.129"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 22:57:22.132" starttime="20190113 22:57:22.131"></status>
</kw>
<msg timestamp="20190113 22:57:22.133" level="INFO">${cmd_str} = </msg>
<status status="PASS" endtime="20190113 22:57:22.133" starttime="20190113 22:57:22.127"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${cmd_str}'!='${EMPTY}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_str}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:22.135" starttime="20190113 22:57:22.134"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:57:22.138" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:22.349" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:22.349" starttime="20190113 22:57:22.136"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:22.351" starttime="20190113 22:57:20.639"></status>
</kw>
<kw name="service_point_add_vlan" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: add vlan for service_point</doc>
<arguments>
<arg>service_point_list1</arg>
<arg>${service_vlan}</arg>
</arguments>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${vlan_list}</arg>
</arguments>
<assign>
<var>${vlan_list_str}</var>
</assign>
<msg timestamp="20190113 22:57:22.355" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20190113 22:57:22.355" level="INFO">${vlan_list_str} = 4002</msg>
<status status="PASS" endtime="20190113 22:57:22.355" starttime="20190113 22:57:22.354"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${vlan_list_str}</arg>
<arg>,</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${vlan_list_str}</var>
</assign>
<msg timestamp="20190113 22:57:22.357" level="INFO">${vlan_list_str} = 4002</msg>
<status status="PASS" endtime="20190113 22:57:22.357" starttime="20190113 22:57:22.356"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_TransVlan_${vlan_list_str}</arg>
</arguments>
<assign>
<var>${transport_prf}</var>
</assign>
<msg timestamp="20190113 22:57:22.358" level="INFO">${transport_prf} = auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 22:57:22.359" starttime="20190113 22:57:22.357"></status>
</kw>
<kw type="for" name="${service_point} IN [ @{service_model.${service_point_list}} ]">
<kw type="foritem" name="${service_point} = service_point1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 22:57:22.362" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 22:57:22.363" starttime="20190113 22:57:22.361"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** uplink service add vlan ${vlan_list} for ${device} ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 22:57:22.364" level="INFO">****** uplink service add vlan 4002 for eutA service_point1 ******</msg>
<status status="PASS" endtime="20190113 22:57:22.365" starttime="20190113 22:57:22.363"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create transport-service-profile</arg>
</arguments>
<msg timestamp="20190113 22:57:22.366" level="INFO">create transport-service-profile</msg>
<status status="PASS" endtime="20190113 22:57:22.366" starttime="20190113 22:57:22.365"></status>
</kw>
<kw name="prov_transport_service_profile" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Puts an interface in shutdown mode</doc>
<arguments>
<arg>${device}</arg>
<arg>${transport_prf}</arg>
<arg>${vlan_list}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:22.375" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:22.574" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:57:22.575" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:22.575" starttime="20190113 22:57:22.370"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:22.577" starttime="20190113 22:57:22.576"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:22.578" starttime="20190113 22:57:22.368"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>transport-service-profile ${transport-service-profile}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:22.584" level="INFO">send session_command, cmd=transport-service-profile auto_TransVlan_4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:22.849" level="INFO">session_command result=transport-service-profile auto_TransVlan_4002
NGPON2X4(config-transport-service-profile-auto_TransVlan_4002)</msg>
<msg timestamp="20190113 22:57:22.850" level="INFO">${res} = transport-service-profile auto_TransVlan_4002
NGPON2X4(config-transport-service-profile-auto_TransVlan_4002)</msg>
<status status="PASS" endtime="20190113 22:57:22.850" starttime="20190113 22:57:22.581"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:22.852" starttime="20190113 22:57:22.851"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:22.853" starttime="20190113 22:57:22.579"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan-list ${vlan-list}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:22.859" level="INFO">send session_command, cmd=vlan-list 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:23.151" level="INFO">session_command result=vlan-list 4002
NGPON2X4(config-transport-service-profile-auto_TransVlan_4002)</msg>
<msg timestamp="20190113 22:57:23.152" level="INFO">${res} = vlan-list 4002
NGPON2X4(config-transport-service-profile-auto_TransVlan_4002)</msg>
<status status="PASS" endtime="20190113 22:57:23.152" starttime="20190113 22:57:22.857"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:23.155" starttime="20190113 22:57:23.153"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:23.155" starttime="20190113 22:57:22.855"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:23.161" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:23.365" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 22:57:23.365" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:23.365" starttime="20190113 22:57:23.159"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:23.368" starttime="20190113 22:57:23.367"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:23.368" starttime="20190113 22:57:23.157"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:23.372" starttime="20190113 22:57:22.367"></status>
</kw>
<kw name="service_point_add_transport_profile" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: add transport_profile to service_point interface (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${service_point}</arg>
<arg>${transport_prf}</arg>
</arguments>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>'lag'=='${service_model.${service_point}.type}'</arg>
<arg>prov_interface</arg>
<arg>${device}</arg>
<arg>lag</arg>
<arg>${service_model.${service_point}.name}</arg>
<arg>transport-service-profile=${transport_prf}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:23.377" starttime="20190113 22:57:23.376"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add transport-service-profile to interface</arg>
</arguments>
<msg timestamp="20190113 22:57:23.379" level="INFO">add transport-service-profile to interface</msg>
<status status="PASS" endtime="20190113 22:57:23.379" starttime="20190113 22:57:23.378"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${service_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 22:57:23.382" level="INFO">${port} = 1/2/x2</msg>
<status status="PASS" endtime="20190113 22:57:23.383" starttime="20190113 22:57:23.381"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** provision port ${port} transport-service-profile ******</arg>
</arguments>
<msg timestamp="20190113 22:57:23.384" level="INFO">****** provision port 1/2/x2 transport-service-profile ******</msg>
<status status="PASS" endtime="20190113 22:57:23.384" starttime="20190113 22:57:23.383"></status>
</kw>
<kw name="prov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>transport-service-profile=${transport_prf}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:23.390" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:23.580" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:57:23.581" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:23.581" starttime="20190113 22:57:23.388"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:23.583" starttime="20190113 22:57:23.582"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:23.584" starttime="20190113 22:57:23.386"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:23.590" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:23.817" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 22:57:23.817" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 22:57:23.817" starttime="20190113 22:57:23.587"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:23.821" starttime="20190113 22:57:23.819"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:23.822" starttime="20190113 22:57:23.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${switchport}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>switchport ${switchport}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:23.828" starttime="20190113 22:57:23.827"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${interface_role}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>role ${interface_role}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:23.831" starttime="20190113 22:57:23.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:23.832" starttime="20190113 22:57:23.831"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:23.840" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:57:23.840" starttime="20190113 22:57:23.839"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = transport-service-profile">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:57:23.844" level="INFO">${value} = auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 22:57:23.844" starttime="20190113 22:57:23.843"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:23.847" level="INFO">${result_string} =  transport-service-profile auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 22:57:23.847" starttime="20190113 22:57:23.845"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:23.847" starttime="20190113 22:57:23.842"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:23.848" starttime="20190113 22:57:23.841"></status>
</kw>
<msg timestamp="20190113 22:57:23.848" level="INFO">${cmd_string} =  transport-service-profile auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 22:57:23.848" starttime="20190113 22:57:23.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:23.855" level="INFO">send session_command, cmd= transport-service-profile auto_TransVlan_4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:24.298" level="INFO">session_command result= transport-service-profile auto_TransVlan_4002
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 22:57:24.298" level="INFO">${res} =  transport-service-profile auto_TransVlan_4002
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 22:57:24.298" starttime="20190113 22:57:23.852"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:24.301" starttime="20190113 22:57:24.300"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:24.301" starttime="20190113 22:57:23.850"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:24.302" starttime="20190113 22:57:23.849"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:24.309" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:24.510" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 22:57:24.510" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:24.510" starttime="20190113 22:57:24.306"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:24.513" starttime="20190113 22:57:24.512"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:24.513" starttime="20190113 22:57:24.304"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:24.514" starttime="20190113 22:57:23.385"></status>
</kw>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ${port_type} ${port_name} ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>ethernet</arg>
<arg>${port}</arg>
<arg>transport-service-profile=${transport_prf}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:24.530" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x2 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:26.094" level="INFO">session_command result=show running-config interface ethernet 1/2/x2 
interface ethernet 1/2/x2
 no shutdown
 role                      inni
 transport-service-profile auto_TransVlan_4002
!
NGPON2X4</msg>
<msg timestamp="20190113 22:57:26.095" level="INFO">${res} = show running-config interface ethernet 1/2/x2 
interface ethernet 1/2/x2
 no shutdown
 role                      inni
 transport-service-profile auto_TransVlan_4002
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:26.095" starttime="20190113 22:57:24.528"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:26.098" starttime="20190113 22:57:26.097"></status>
</kw>
<msg timestamp="20190113 22:57:26.098" level="INFO">${res} = show running-config interface ethernet 1/2/x2 
interface ethernet 1/2/x2
 no shutdown
 role                      inni
 transport-service-profile auto_TransVlan_4002
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:26.098" starttime="20190113 22:57:24.526"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 22:57:26.101" level="INFO">@{list_key} = [ transport-service-profile ]</msg>
<status status="PASS" endtime="20190113 22:57:26.101" starttime="20190113 22:57:26.100"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<kw type="foritem" name="${check_item} = transport-service-profile">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 22:57:26.104" level="INFO">${exp_value} = auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 22:57:26.104" starttime="20190113 22:57:26.103"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:26.106" starttime="20190113 22:57:26.104"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:26.106" starttime="20190113 22:57:26.102"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:26.106" starttime="20190113 22:57:26.101"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:26.107" starttime="20190113 22:57:24.524"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:26.108" starttime="20190113 22:57:23.380"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:26.109" starttime="20190113 22:57:23.379"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:26.110" starttime="20190113 22:57:23.374"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:26.111" starttime="20190113 22:57:22.360"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:26.112" starttime="20190113 22:57:22.359"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:26.113" starttime="20190113 22:57:22.352"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>subscriber_point_operation for subscriber side</arg>
</arguments>
<msg timestamp="20190113 22:57:26.115" level="INFO">subscriber_point_operation for subscriber side</msg>
<status status="PASS" endtime="20190113 22:57:26.116" starttime="20190113 22:57:26.115"></status>
</kw>
<kw name="subscriber_point_prov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision for subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** subscriber service provision for ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 22:57:26.118" level="INFO">****** subscriber service provision for subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 22:57:26.118" starttime="20190113 22:57:26.117"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 22:57:26.120" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 22:57:26.120" starttime="20190113 22:57:26.119"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>subscriber_point_${service_model.${subscriber_point}.type}_prov</arg>
<arg>${device}</arg>
<arg>${subscriber_point}</arg>
</arguments>
<kw name="subscriber_point_eth_prov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: ethernet port subscriber provision (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${subscriber_point}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] ethernet port subscriber provision for ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 22:57:26.124" level="INFO">****** [eutA] ethernet port subscriber provision for subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 22:57:26.124" starttime="20190113 22:57:26.123"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${subscriber_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 22:57:26.127" level="INFO">${port} = 1/2/x3</msg>
<status status="PASS" endtime="20190113 22:57:26.128" starttime="20190113 22:57:26.126"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** provision port ${port} role and parameter ******</arg>
</arguments>
<msg timestamp="20190113 22:57:26.129" level="INFO">****** provision port 1/2/x3 role and parameter ******</msg>
<status status="PASS" endtime="20190113 22:57:26.129" starttime="20190113 22:57:26.128"></status>
</kw>
<kw name="prov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_role}</arg>
<arg>ENABLED</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:26.134" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:26.345" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:57:26.345" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:26.345" starttime="20190113 22:57:26.133"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:26.348" starttime="20190113 22:57:26.347"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:26.348" starttime="20190113 22:57:26.131"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:26.353" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:26.581" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:57:26.581" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:57:26.581" starttime="20190113 22:57:26.351"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:26.584" starttime="20190113 22:57:26.583"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:26.584" starttime="20190113 22:57:26.349"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${switchport}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>switchport ${switchport}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>switchport ${switchport}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:26.590" level="INFO">send session_command, cmd=switchport ENABLED, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:26.908" level="INFO">session_command result=switchport ENABLED
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:57:26.908" level="INFO">${res} = switchport ENABLED
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:57:26.908" starttime="20190113 22:57:26.588"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:26.911" starttime="20190113 22:57:26.910"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:26.911" starttime="20190113 22:57:26.586"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:26.913" starttime="20190113 22:57:26.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${interface_role}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>role ${interface_role}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>role ${interface_role}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:26.920" level="INFO">send session_command, cmd=role uni, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:27.666" level="INFO">session_command result=role uni
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:57:27.666" level="INFO">${res} = role uni
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:57:27.666" starttime="20190113 22:57:26.918"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:27.669" starttime="20190113 22:57:27.668"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:27.669" starttime="20190113 22:57:26.916"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:27.670" starttime="20190113 22:57:26.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:27.672" starttime="20190113 22:57:27.671"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:27.677" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:57:27.677" starttime="20190113 22:57:27.676"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 22:57:27.678" starttime="20190113 22:57:27.677"></status>
</kw>
<msg timestamp="20190113 22:57:27.679" level="INFO">${cmd_string} = </msg>
<status status="PASS" endtime="20190113 22:57:27.679" starttime="20190113 22:57:27.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:27.680" starttime="20190113 22:57:27.679"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:27.684" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:27.878" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 22:57:27.878" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:27.879" starttime="20190113 22:57:27.682"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:27.881" starttime="20190113 22:57:27.880"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:27.881" starttime="20190113 22:57:27.681"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:27.883" starttime="20190113 22:57:26.130"></status>
</kw>
<kw name="no_shutdown_port" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Puts an interface in shutdown mode</doc>
<arguments>
<arg>${device}</arg>
<arg>ethernet</arg>
<arg>${port}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:27.889" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:28.081" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:57:28.082" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:28.082" starttime="20190113 22:57:27.887"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:28.084" starttime="20190113 22:57:28.083"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:28.085" starttime="20190113 22:57:27.886"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port-type} ${port}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:28.090" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:28.295" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:57:28.296" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:57:28.296" starttime="20190113 22:57:28.088"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:28.298" starttime="20190113 22:57:28.297"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:28.299" starttime="20190113 22:57:28.086"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no shutdown</arg>
<arg>30</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:28.304" level="INFO">send session_command, cmd=no shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:28.883" level="INFO">session_command result=no shutdown
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:57:28.883" level="INFO">${res} = no shutdown
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:57:28.883" starttime="20190113 22:57:28.302"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:28.887" starttime="20190113 22:57:28.885"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:28.887" starttime="20190113 22:57:28.301"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:28.894" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:29.138" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 22:57:29.138" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:29.139" starttime="20190113 22:57:28.892"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:29.141" starttime="20190113 22:57:29.140"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:29.142" starttime="20190113 22:57:28.890"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:29.143" starttime="20190113 22:57:27.884"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:29.144" starttime="20190113 22:57:26.125"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:29.146" starttime="20190113 22:57:26.124"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:29.147" starttime="20190113 22:57:26.122"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:29.149" starttime="20190113 22:57:26.121"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:29.150" starttime="20190113 22:57:26.116"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:29.151" starttime="20190113 22:57:11.502"></status>
</kw>
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/Policy_Map/testcase/tc_add_cevlan_tag.robot" id="s1-s1-s1-s1-s1-s1-s1-s1" name="Tc Add Cevlan Tag">
<test id="s1-s1-s1-s1-s1-s1-s1-s1-t1" name="tc_add_cevlan_tag">
<kw type="setup" name="case setup">
<doc>setup</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:1 create a class-map to match untag in flow 1</arg>
</arguments>
<msg timestamp="20190113 22:57:29.419" level="INFO">STEP:1 create a class-map to match untag in flow 1</msg>
<status status="PASS" endtime="20190113 22:57:29.419" starttime="20190113 22:57:29.418"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:2 create a policy-map to bind the class-map and add cevlan tag x</arg>
</arguments>
<msg timestamp="20190113 22:57:29.421" level="INFO">STEP:2 create a policy-map to bind the class-map and add cevlan tag x</msg>
<status status="PASS" endtime="20190113 22:57:29.422" starttime="20190113 22:57:29.420"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:3 add eth-port1 to s-tag with transport-service-profile (done in suite_setup)</arg>
</arguments>
<msg timestamp="20190113 22:57:29.423" level="INFO">STEP:3 add eth-port1 to s-tag with transport-service-profile (done in suite_setup)</msg>
<status status="PASS" endtime="20190113 22:57:29.424" starttime="20190113 22:57:29.422"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:4 apply the s-tag and policy-map to ethernet uni</arg>
</arguments>
<msg timestamp="20190113 22:57:29.425" level="INFO">STEP:4 apply the s-tag and policy-map to ethernet uni</msg>
<status status="PASS" endtime="20190113 22:57:29.426" starttime="20190113 22:57:29.424"></status>
</kw>
<kw name="subscriber_point_add_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create l2 basic class-map and policy-map, add service to subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>untagged</arg>
<arg>${service_vlan}</arg>
<arg>add-ctag</arg>
<arg>${cvlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 22:57:29.437" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 22:57:29.437" starttime="20190113 22:57:29.436"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] create and add l2 basic service to ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 22:57:29.438" level="INFO">****** [eutA] create and add l2 basic service to subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 22:57:29.438" starttime="20190113 22:57:29.437"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:29.444" starttime="20190113 22:57:29.443"></status>
</kw>
<msg timestamp="20190113 22:57:29.444" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 22:57:29.444" starttime="20190113 22:57:29.442"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 22:57:29.445" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 22:57:29.446" starttime="20190113 22:57:29.445"></status>
</kw>
<msg timestamp="20190113 22:57:29.446" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 22:57:29.446" starttime="20190113 22:57:29.439"></status>
</kw>
<kw name="l2_setting_prov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${ctag_action}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan_action}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<assign>
<var>&amp;{dict_prf}</var>
</assign>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] add l2 basic service to ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 22:57:29.455" level="INFO">****** [eutA] add l2 basic service to ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 22:57:29.456" starttime="20190113 22:57:29.455"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 22:57:29.457" level="INFO">${class_map} = auto_ClassMap_vuntagged</msg>
<status status="PASS" endtime="20190113 22:57:29.457" starttime="20190113 22:57:29.456"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 22:57:29.459" level="INFO">${policy_map} = auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 22:57:29.459" starttime="20190113 22:57:29.458"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>classmap=${class_map}</arg>
<arg>policymap=${policy_map}</arg>
</arguments>
<assign>
<var>&amp;{dic_prf}</var>
</assign>
<msg timestamp="20190113 22:57:29.461" level="INFO">&amp;{dic_prf} = { classmap=auto_ClassMap_vuntagged | policymap=auto_PolicyMap_v1000 }</msg>
<status status="PASS" endtime="20190113 22:57:29.461" starttime="20190113 22:57:29.459"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create class-map</arg>
</arguments>
<msg timestamp="20190113 22:57:29.462" level="INFO">create class-map</msg>
<status status="PASS" endtime="20190113 22:57:29.462" starttime="20190113 22:57:29.461"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'untagged'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>untagged=${EMPTY}</arg>
<arg>ELSE IF</arg>
<arg>'any'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>any=${EMPTY}</arg>
<arg>ELSE</arg>
<arg>create dictionary</arg>
<arg>vlan=${match_vlan}</arg>
</arguments>
<assign>
<var>&amp;{dict_match_rule}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>untagged=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:29.465" starttime="20190113 22:57:29.464"></status>
</kw>
<msg timestamp="20190113 22:57:29.465" level="INFO">&amp;{dict_match_rule} = { untagged= }</msg>
<status status="PASS" endtime="20190113 22:57:29.465" starttime="20190113 22:57:29.463"></status>
</kw>
<kw name="prov_class_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision class-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map}</arg>
<arg>ethernet</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>1</arg>
<arg>&amp;{dict_match_rule}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:57:29.469" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:29.969" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:29.970" starttime="20190113 22:57:29.468"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ${class_map_type} ${class_map_name}</arg>
</arguments>
<msg timestamp="20190113 22:57:29.973" level="INFO">send session_command, cmd=class-map ethernet auto_ClassMap_vuntagged, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:30.469" level="INFO">session_command result=class-map ethernet auto_ClassMap_vuntagged
NGPON2X4(config-ethernet-auto_ClassMap_vuntagged)</msg>
<status status="PASS" endtime="20190113 22:57:30.469" starttime="20190113 22:57:29.971"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${flow_type} ${flow_index}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:30.475" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:30.801" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 22:57:30.802" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 22:57:30.802" starttime="20190113 22:57:30.472"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:30.804" starttime="20190113 22:57:30.803"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:30.805" starttime="20190113 22:57:30.470"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:30.811" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:57:30.811" starttime="20190113 22:57:30.810"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = untagged">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:57:30.814" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190113 22:57:30.814" starttime="20190113 22:57:30.813"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:30.816" level="INFO">${result_string} =  untagged </msg>
<status status="PASS" endtime="20190113 22:57:30.816" starttime="20190113 22:57:30.815"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:30.816" starttime="20190113 22:57:30.812"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:30.816" starttime="20190113 22:57:30.812"></status>
</kw>
<msg timestamp="20190113 22:57:30.817" level="INFO">${cmd_string} =  untagged </msg>
<status status="PASS" endtime="20190113 22:57:30.817" starttime="20190113 22:57:30.809"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>rule ${rule_index} match ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:30.822" level="INFO">send session_command, cmd=rule 1 match  untagged , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:31.199" level="INFO">session_command result=rule 1 match  untagged 
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 22:57:31.200" level="INFO">${res} = rule 1 match  untagged 
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 22:57:31.200" starttime="20190113 22:57:30.819"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:31.202" starttime="20190113 22:57:31.201"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:31.203" starttime="20190113 22:57:30.818"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:57:31.206" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:31.462" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:31.462" starttime="20190113 22:57:31.204"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:31.465" starttime="20190113 22:57:29.466"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create policy-map</arg>
</arguments>
<msg timestamp="20190113 22:57:31.467" level="INFO">create policy-map</msg>
<status status="PASS" endtime="20190113 22:57:31.468" starttime="20190113 22:57:31.466"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ctag_action}'=='add-ctag' or '${ctag_action}'=='add-cevlan-tag' or '${cevlan_action}'=='add-cevlan-tag'</arg>
<arg>release_cmd_adapter</arg>
<arg>${device}</arg>
<arg>${prov_policy_map_config_add_tag}</arg>
<arg>ELSE</arg>
<arg>set variable</arg>
<arg>${ctag_action}</arg>
</arguments>
<assign>
<var>${ctag_action}</var>
</assign>
<kw name="release_cmd_adapter" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: cmd adapter in different release</doc>
<arguments>
<arg>${device}</arg>
<arg>${prov_policy_map_config_add_tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>if no 'release' item in topo.yaml set it to DEFAULT</arg>
</arguments>
<msg timestamp="20190113 22:57:31.475" level="INFO">if no 'release' item in topo.yaml set it to DEFAULT</msg>
<status status="PASS" endtime="20190113 22:57:31.475" starttime="20190113 22:57:31.474"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${DEVICES.${device}}</arg>
<arg>release</arg>
</arguments>
<assign>
<var>${passed}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${device}}</arg>
<arg>release</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:31.478" starttime="20190113 22:57:31.477"></status>
</kw>
<msg timestamp="20190113 22:57:31.478" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20190113 22:57:31.478" starttime="20190113 22:57:31.475"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${passed}</arg>
<arg>${DEVICES.${device}.release}</arg>
<arg>DEFAULT</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 22:57:31.480" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 22:57:31.480" starttime="20190113 22:57:31.479"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>get release ${release}</arg>
</arguments>
<msg timestamp="20190113 22:57:31.481" level="INFO">get release AXOS_19_1</msg>
<status status="PASS" endtime="20190113 22:57:31.481" starttime="20190113 22:57:31.480"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>set release to 'DEFAULT' if release is not key in cmd_key dictionary</arg>
</arguments>
<msg timestamp="20190113 22:57:31.482" level="INFO">set release to 'DEFAULT' if release is not key in cmd_key dictionary</msg>
<status status="PASS" endtime="20190113 22:57:31.483" starttime="20190113 22:57:31.482"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${cmd_param}</arg>
<arg>${release}</arg>
</arguments>
<assign>
<var>${passed}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${cmd_param}</arg>
<arg>${release}</arg>
</arguments>
<msg timestamp="20190113 22:57:31.485" level="FAIL">Dictionary does not contain key 'AXOS_19_1'.</msg>
<msg timestamp="20190113 22:57:31.485" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 22:57:31.485" starttime="20190113 22:57:31.484"></status>
</kw>
<msg timestamp="20190113 22:57:31.485" level="INFO">${passed} = False</msg>
<status status="PASS" endtime="20190113 22:57:31.486" starttime="20190113 22:57:31.483"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${passed}</arg>
<arg>${release}</arg>
<arg>DEFAULT</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 22:57:31.487" level="INFO">${release} = DEFAULT</msg>
<status status="PASS" endtime="20190113 22:57:31.487" starttime="20190113 22:57:31.486"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${cmd_var_item}</arg>
</arguments>
<msg timestamp="20190113 22:57:31.488" level="INFO">List is empty.</msg>
<status status="PASS" endtime="20190113 22:57:31.489" starttime="20190113 22:57:31.488"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=','</arg>
<arg>@{cmd_var_item}</arg>
</arguments>
<assign>
<var>${item}</var>
</assign>
<msg timestamp="20190113 22:57:31.490" level="INFO">${item} = </msg>
<status status="PASS" endtime="20190113 22:57:31.490" starttime="20190113 22:57:31.489"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${cmd_param}</arg>
</arguments>
<msg timestamp="20190113 22:57:31.492" level="INFO">Dictionary size is 2 and it contains following items:
AXOS_4_1: add-ctag
DEFAULT: add-cevlan-tag</msg>
<status status="PASS" endtime="20190113 22:57:31.492" starttime="20190113 22:57:31.491"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${item}"=="${EMPTY}"</arg>
<arg>Set Variable</arg>
<arg>&amp;{cmd_param}[${release}]</arg>
<arg>ELSE</arg>
<arg>evaluate</arg>
<arg>'&amp;{cmd_param}[${release}]'%('${item}')</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>&amp;{cmd_param}[${release}]</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:31.494" starttime="20190113 22:57:31.493"></status>
</kw>
<msg timestamp="20190113 22:57:31.495" level="INFO">${cmd_str} = add-cevlan-tag</msg>
<status status="PASS" endtime="20190113 22:57:31.495" starttime="20190113 22:57:31.492"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>return string is "${cmd_str}" for release ${release}</arg>
</arguments>
<msg timestamp="20190113 22:57:31.496" level="INFO">return string is "add-cevlan-tag" for release DEFAULT</msg>
<status status="PASS" endtime="20190113 22:57:31.496" starttime="20190113 22:57:31.495"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:31.497" starttime="20190113 22:57:31.473"></status>
</kw>
<msg timestamp="20190113 22:57:31.497" level="INFO">${ctag_action} = add-cevlan-tag</msg>
<status status="PASS" endtime="20190113 22:57:31.497" starttime="20190113 22:57:31.468"></status>
</kw>
<kw name="prov_policy_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision policy-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>${ctag_action}=${cvlan}</arg>
<arg>${cevlan_action}=${cevlan}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:57:31.503" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:31.742" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:31.742" starttime="20190113 22:57:31.501"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<msg timestamp="20190113 22:57:31.746" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v1000, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:32.102" level="INFO">session_command result=policy-map auto_PolicyMap_v1000
NGPON2X4(config-policy-map-auto_PolicyMap_v1000)</msg>
<status status="PASS" endtime="20190113 22:57:32.102" starttime="20190113 22:57:31.743"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:32.108" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_vuntagged, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:32.509" level="INFO">session_command result=class-map-ethernet auto_ClassMap_vuntagged
NGPON2X4(config-class-map-ethernet-auto_ClassMap_vuntagged)</msg>
<msg timestamp="20190113 22:57:32.510" level="INFO">${res} = class-map-ethernet auto_ClassMap_vuntagged
NGPON2X4(config-class-map-ethernet-auto_ClassMap_vuntagged)</msg>
<status status="PASS" endtime="20190113 22:57:32.510" starttime="20190113 22:57:32.106"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:32.513" starttime="20190113 22:57:32.512"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:32.514" starttime="20190113 22:57:32.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:32.520" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:32.901" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 22:57:32.901" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 22:57:32.901" starttime="20190113 22:57:32.518"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:32.904" starttime="20190113 22:57:32.903"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:32.904" starttime="20190113 22:57:32.516"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:32.906" starttime="20190113 22:57:32.515"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:32.912" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:57:32.912" starttime="20190113 22:57:32.911"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = add-cevlan-tag">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:57:32.915" level="INFO">${value} = 1000</msg>
<status status="PASS" endtime="20190113 22:57:32.915" starttime="20190113 22:57:32.914"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:32.917" level="INFO">${result_string} =  add-cevlan-tag 1000</msg>
<status status="PASS" endtime="20190113 22:57:32.917" starttime="20190113 22:57:32.916"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:32.917" starttime="20190113 22:57:32.913"></status>
</kw>
<kw type="foritem" name="${key} = ">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:57:32.919" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190113 22:57:32.919" starttime="20190113 22:57:32.918"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:32.921" level="INFO">${result_string} =  add-cevlan-tag 1000  </msg>
<status status="PASS" endtime="20190113 22:57:32.921" starttime="20190113 22:57:32.920"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:32.921" starttime="20190113 22:57:32.918"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:32.922" starttime="20190113 22:57:32.912"></status>
</kw>
<msg timestamp="20190113 22:57:32.922" level="INFO">${cmd_string} =  add-cevlan-tag 1000  </msg>
<status status="PASS" endtime="20190113 22:57:32.922" starttime="20190113 22:57:32.909"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:32.928" level="INFO">send session_command, cmd= add-cevlan-tag 1000  , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:33.282" level="INFO">session_command result= add-cevlan-tag 1000  
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 22:57:33.283" level="INFO">${res} =  add-cevlan-tag 1000  
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 22:57:33.283" starttime="20190113 22:57:32.926"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:33.285" starttime="20190113 22:57:33.284"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:33.286" starttime="20190113 22:57:32.924"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:33.287" starttime="20190113 22:57:32.923"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:57:33.291" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:33.606" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:33.606" starttime="20190113 22:57:33.289"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:33.607" starttime="20190113 22:57:31.498"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add policy-map to interface</arg>
</arguments>
<msg timestamp="20190113 22:57:33.609" level="INFO">add policy-map to interface</msg>
<status status="PASS" endtime="20190113 22:57:33.610" starttime="20190113 22:57:33.609"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:33.620" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:35.236" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 22:57:35.236" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:35.236" starttime="20190113 22:57:33.617"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:35.239" starttime="20190113 22:57:35.238"></status>
</kw>
<msg timestamp="20190113 22:57:35.240" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:35.240" starttime="20190113 22:57:33.616"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 22:57:35.243" level="INFO">@{list_key} = [ ]</msg>
<status status="PASS" endtime="20190113 22:57:35.243" starttime="20190113 22:57:35.242"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<status status="PASS" endtime="20190113 22:57:35.244" starttime="20190113 22:57:35.243"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:35.245" starttime="20190113 22:57:33.614"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:35.246" starttime="20190113 22:57:33.610"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>no=shutdown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 22:57:35.250" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map= ******</msg>
<status status="PASS" endtime="20190113 22:57:35.251" starttime="20190113 22:57:35.249"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:57:35.253" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:35.484" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:35.484" starttime="20190113 22:57:35.251"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:35.495" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:35.752" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:57:35.753" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:57:35.753" starttime="20190113 22:57:35.487"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:35.755" starttime="20190113 22:57:35.754"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:35.756" starttime="20190113 22:57:35.486"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:35.761" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:36.555" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 22:57:36.556" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 22:57:36.556" starttime="20190113 22:57:35.759"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:36.559" starttime="20190113 22:57:36.558"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:36.559" starttime="20190113 22:57:35.758"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:36.560" starttime="20190113 22:57:35.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:36.562" starttime="20190113 22:57:36.561"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:36.564" starttime="20190113 22:57:36.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:36.565" starttime="20190113 22:57:36.564"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:36.571" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:57:36.571" starttime="20190113 22:57:36.570"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = no">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:57:36.573" level="INFO">${value} = shutdown</msg>
<status status="PASS" endtime="20190113 22:57:36.573" starttime="20190113 22:57:36.572"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:36.575" level="INFO">${result_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 22:57:36.575" starttime="20190113 22:57:36.574"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:36.575" starttime="20190113 22:57:36.572"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:36.575" starttime="20190113 22:57:36.571"></status>
</kw>
<msg timestamp="20190113 22:57:36.576" level="INFO">${cmd_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 22:57:36.576" starttime="20190113 22:57:36.568"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:36.581" level="INFO">send session_command, cmd= no shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:36.985" level="INFO">session_command result= no shutdown
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 22:57:36.986" level="INFO">${res} =  no shutdown
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 22:57:36.986" starttime="20190113 22:57:36.579"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:36.989" starttime="20190113 22:57:36.987"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:36.989" starttime="20190113 22:57:36.578"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:36.990" starttime="20190113 22:57:36.577"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:57:36.994" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:37.258" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:37.258" starttime="20190113 22:57:36.991"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:37.260" starttime="20190113 22:57:35.247"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 22:57:37.264" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map=auto_PolicyMap_v1000 ******</msg>
<status status="PASS" endtime="20190113 22:57:37.264" starttime="20190113 22:57:37.263"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:57:37.266" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:37.504" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:37.504" starttime="20190113 22:57:37.265"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:37.509" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:37.789" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:57:37.789" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:57:37.789" starttime="20190113 22:57:37.507"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:37.792" starttime="20190113 22:57:37.791"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:37.793" starttime="20190113 22:57:37.506"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:37.801" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:38.093" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 22:57:38.093" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 22:57:38.093" starttime="20190113 22:57:37.798"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:38.096" starttime="20190113 22:57:38.095"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:38.097" starttime="20190113 22:57:37.796"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:38.098" starttime="20190113 22:57:37.794"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:38.105" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v1000, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:38.598" level="INFO">session_command result=policy-map auto_PolicyMap_v1000
NGPON2X4(config-policy-map-auto_PolicyMap_v1000)</msg>
<msg timestamp="20190113 22:57:38.599" level="INFO">${res} = policy-map auto_PolicyMap_v1000
NGPON2X4(config-policy-map-auto_PolicyMap_v1000)</msg>
<status status="PASS" endtime="20190113 22:57:38.599" starttime="20190113 22:57:38.102"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:38.601" starttime="20190113 22:57:38.600"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:38.602" starttime="20190113 22:57:38.100"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:38.603" starttime="20190113 22:57:38.099"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:38.610" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_vuntagged, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:38.882" level="INFO">session_command result=class-map-ethernet auto_ClassMap_vuntagged
NGPON2X4(config-class-map-ethernet-auto_ClassMap_vuntagged)</msg>
<msg timestamp="20190113 22:57:38.882" level="INFO">${res} = class-map-ethernet auto_ClassMap_vuntagged
NGPON2X4(config-class-map-ethernet-auto_ClassMap_vuntagged)</msg>
<status status="PASS" endtime="20190113 22:57:38.883" starttime="20190113 22:57:38.608"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:38.888" starttime="20190113 22:57:38.887"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:38.888" starttime="20190113 22:57:38.606"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:38.889" starttime="20190113 22:57:38.604"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:38.892" starttime="20190113 22:57:38.891"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:38.898" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:57:38.899" starttime="20190113 22:57:38.897"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 22:57:38.900" starttime="20190113 22:57:38.899"></status>
</kw>
<msg timestamp="20190113 22:57:38.900" level="INFO">${cmd_string} = </msg>
<status status="PASS" endtime="20190113 22:57:38.901" starttime="20190113 22:57:38.895"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:38.903" starttime="20190113 22:57:38.901"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:57:38.905" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:39.178" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:39.179" starttime="20190113 22:57:38.903"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:39.180" starttime="20190113 22:57:37.261"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add multicast-profile to interface</arg>
</arguments>
<msg timestamp="20190113 22:57:39.183" level="INFO">add multicast-profile to interface</msg>
<status status="PASS" endtime="20190113 22:57:39.183" starttime="20190113 22:57:39.182"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>prov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:39.185" starttime="20190113 22:57:39.184"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 22:57:39.187" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 22:57:39.187" starttime="20190113 22:57:39.186"></status>
</kw>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>policy-map=${policy_map}</arg>
<arg>class-map-ethernet=${class_map}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:39.196" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:41.027" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v1000
   class-map-ethernet auto_ClassMap_vuntagged
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 22:57:41.028" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v1000
   class-map-ethernet auto_ClassMap_vuntagged
  ...</msg>
<status status="PASS" endtime="20190113 22:57:41.028" starttime="20190113 22:57:39.194"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:41.031" starttime="20190113 22:57:41.029"></status>
</kw>
<msg timestamp="20190113 22:57:41.031" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v1000
   class-map-ethernet auto_ClassMap_vuntagged
  ...</msg>
<status status="PASS" endtime="20190113 22:57:41.031" starttime="20190113 22:57:39.192"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 22:57:41.034" level="INFO">@{list_key} = [ class-map-ethernet | policy-map ]</msg>
<status status="PASS" endtime="20190113 22:57:41.034" starttime="20190113 22:57:41.033"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<kw type="foritem" name="${check_item} = class-map-ethernet">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 22:57:41.038" level="INFO">${exp_value} = auto_ClassMap_vuntagged</msg>
<status status="PASS" endtime="20190113 22:57:41.038" starttime="20190113 22:57:41.037"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:41.040" starttime="20190113 22:57:41.039"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:41.040" starttime="20190113 22:57:41.036"></status>
</kw>
<kw type="foritem" name="${check_item} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 22:57:41.043" level="INFO">${exp_value} = auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 22:57:41.043" starttime="20190113 22:57:41.042"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:41.045" starttime="20190113 22:57:41.044"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:41.045" starttime="20190113 22:57:41.041"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:41.046" starttime="20190113 22:57:41.035"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:41.046" starttime="20190113 22:57:39.191"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:41.049" starttime="20190113 22:57:41.048"></status>
</kw>
<msg timestamp="20190113 22:57:41.050" level="INFO">&amp;{dict_prf} = { classmap=auto_ClassMap_vuntagged | policymap=auto_PolicyMap_v1000 }</msg>
<status status="PASS" endtime="20190113 22:57:41.050" starttime="20190113 22:57:29.452"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:41.052" starttime="20190113 22:57:29.434"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:41.056" starttime="20190113 22:57:29.416"></status>
</kw>
<kw name="template_bidirection_raw_traffic_and_check">
<arguments>
<arg>${tg_us_param}</arg>
<arg>${tg_ds_param}</arg>
<arg>${us_traffic_filter}</arg>
<arg>${ds_traffic_filter}</arg>
<arg>${traffic_loss_rate}</arg>
</arguments>
<msg timestamp="20190113 22:57:41.135" level="FAIL">No keyword with name 'template_bidirection_raw_traffic_and_check' found.</msg>
<status status="FAIL" endtime="20190113 22:57:41.135" starttime="20190113 22:57:41.134"></status>
</kw>
<kw type="teardown" name="case teardown">
<doc>teardown</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>svc teardown</arg>
</arguments>
<msg timestamp="20190113 22:57:41.169" level="INFO">svc teardown</msg>
<status status="PASS" endtime="20190113 22:57:41.170" starttime="20190113 22:57:41.169"></status>
</kw>
<kw name="subscriber_point_remove_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: delete l2 basic class-map and policy-map, remove service from subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>untagged</arg>
<arg>${service_vlan}</arg>
<arg>${cvlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 22:57:41.173" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 22:57:41.173" starttime="20190113 22:57:41.172"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove and delete l2 basic service from ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 22:57:41.174" level="INFO">****** [eutA] remove and delete l2 basic service from subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 22:57:41.174" starttime="20190113 22:57:41.174"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:41.178" starttime="20190113 22:57:41.177"></status>
</kw>
<msg timestamp="20190113 22:57:41.179" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 22:57:41.179" starttime="20190113 22:57:41.176"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 22:57:41.180" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 22:57:41.180" starttime="20190113 22:57:41.179"></status>
</kw>
<msg timestamp="20190113 22:57:41.181" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 22:57:41.181" starttime="20190113 22:57:41.175"></status>
</kw>
<kw name="l2_setting_dprov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove l2 basic service from ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 22:57:41.184" level="INFO">****** [eutA] remove l2 basic service from ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 22:57:41.185" starttime="20190113 22:57:41.184"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 22:57:41.186" level="INFO">${class_map} = auto_ClassMap_vuntagged</msg>
<status status="PASS" endtime="20190113 22:57:41.186" starttime="20190113 22:57:41.185"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 22:57:41.188" level="INFO">${policy_map} = auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 22:57:41.188" starttime="20190113 22:57:41.187"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 22:57:41.189" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 22:57:41.189" starttime="20190113 22:57:41.189"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:41.199" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:43.049" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v1000
   class-map-ethernet auto_ClassMap_vuntagged
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 22:57:43.049" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v1000
   class-map-ethernet auto_ClassMap_vuntagged
   ...</msg>
<status status="PASS" endtime="20190113 22:57:43.049" starttime="20190113 22:57:41.190"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove multicast-profile from interface</arg>
</arguments>
<msg timestamp="20190113 22:57:43.052" level="INFO">remove multicast-profile from interface</msg>
<status status="PASS" endtime="20190113 22:57:43.052" starttime="20190113 22:57:43.051"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:43.053" starttime="20190113 22:57:43.052"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove policy-map from interface</arg>
</arguments>
<msg timestamp="20190113 22:57:43.054" level="INFO">remove policy-map from interface</msg>
<status status="PASS" endtime="20190113 22:57:43.055" starttime="20190113 22:57:43.054"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:57:43.060" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:43.357" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:43.357" starttime="20190113 22:57:43.058"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:43.362" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:43.684" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:57:43.684" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:57:43.684" starttime="20190113 22:57:43.360"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:43.687" starttime="20190113 22:57:43.686"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:43.687" starttime="20190113 22:57:43.358"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:43.695" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:44.018" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 22:57:44.018" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 22:57:44.018" starttime="20190113 22:57:43.691"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:44.021" starttime="20190113 22:57:44.020"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:44.022" starttime="20190113 22:57:43.690"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:44.023" starttime="20190113 22:57:43.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:44.026" starttime="20190113 22:57:44.025"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:44.028" starttime="20190113 22:57:44.027"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:44.030" starttime="20190113 22:57:44.029"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:44.038" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:57:44.039" starttime="20190113 22:57:44.037"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:57:44.043" level="INFO">${value} = auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 22:57:44.043" starttime="20190113 22:57:44.041"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:44.045" level="INFO">${result_string} =  policy-map auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 22:57:44.045" starttime="20190113 22:57:44.043"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:44.045" starttime="20190113 22:57:44.040"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:44.045" starttime="20190113 22:57:44.039"></status>
</kw>
<msg timestamp="20190113 22:57:44.046" level="INFO">${cmd_string} =  policy-map auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 22:57:44.046" starttime="20190113 22:57:44.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:44.055" level="INFO">send session_command, cmd=no  policy-map auto_PolicyMap_v1000, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:44.547" level="INFO">session_command result=no  policy-map auto_PolicyMap_v1000
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 22:57:44.547" level="INFO">${res} = no  policy-map auto_PolicyMap_v1000
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 22:57:44.547" starttime="20190113 22:57:44.051"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:44.549" starttime="20190113 22:57:44.548"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:44.550" starttime="20190113 22:57:44.049"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:44.551" starttime="20190113 22:57:44.047"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:57:44.553" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:44.819" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:44.819" starttime="20190113 22:57:44.552"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:44.820" starttime="20190113 22:57:43.056"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:44.822" starttime="20190113 22:57:43.055"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove svlan from interface</arg>
</arguments>
<msg timestamp="20190113 22:57:44.824" level="INFO">remove svlan from interface</msg>
<status status="PASS" endtime="20190113 22:57:44.824" starttime="20190113 22:57:44.823"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:57:44.830" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:45.101" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:45.102" starttime="20190113 22:57:44.828"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:45.107" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:45.370" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:57:45.371" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:57:45.371" starttime="20190113 22:57:45.105"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:45.373" starttime="20190113 22:57:45.372"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:45.374" starttime="20190113 22:57:45.104"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:45.379" starttime="20190113 22:57:45.378"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:45.381" starttime="20190113 22:57:45.380"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:45.382" starttime="20190113 22:57:45.381"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:45.384" starttime="20190113 22:57:45.383"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:45.389" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:57:45.389" starttime="20190113 22:57:45.389"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = vlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:57:45.392" level="INFO">${value} = 4002</msg>
<status status="PASS" endtime="20190113 22:57:45.392" starttime="20190113 22:57:45.391"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:45.394" level="INFO">${result_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 22:57:45.394" starttime="20190113 22:57:45.393"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:45.394" starttime="20190113 22:57:45.391"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:45.394" starttime="20190113 22:57:45.390"></status>
</kw>
<msg timestamp="20190113 22:57:45.395" level="INFO">${cmd_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 22:57:45.395" starttime="20190113 22:57:45.387"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:45.401" level="INFO">send session_command, cmd=no  vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:45.892" level="INFO">session_command result=no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:57:45.893" level="INFO">${res} = no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:57:45.893" starttime="20190113 22:57:45.399"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:45.895" starttime="20190113 22:57:45.894"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:45.895" starttime="20190113 22:57:45.397"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:45.896" starttime="20190113 22:57:45.396"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:57:45.899" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:46.176" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:46.177" starttime="20190113 22:57:45.897"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:46.178" starttime="20190113 22:57:44.826"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:46.179" starttime="20190113 22:57:44.825"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 22:57:46.181" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 22:57:46.181" starttime="20190113 22:57:46.180"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:46.184" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:47.680" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 22:57:47.680" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:47.680" starttime="20190113 22:57:46.182"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete policy-map</arg>
</arguments>
<msg timestamp="20190113 22:57:47.682" level="INFO">delete policy-map</msg>
<status status="PASS" endtime="20190113 22:57:47.682" starttime="20190113 22:57:47.682"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map</arg>
<arg>${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:57:47.686" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:47.926" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:47.927" starttime="20190113 22:57:47.684"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:47.951" level="INFO">send session_command, cmd=no policy-map auto_PolicyMap_v1000, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:48.941" level="INFO">session_command result=no policy-map auto_PolicyMap_v1000
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:57:48.942" level="INFO">${res} = no policy-map auto_PolicyMap_v1000
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:48.942" starttime="20190113 22:57:47.941"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:48.945" starttime="20190113 22:57:48.944"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:48.946" starttime="20190113 22:57:47.939"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:57:48.950" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:49.213" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:49.214" starttime="20190113 22:57:48.948"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:49.215" starttime="20190113 22:57:47.683"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete class-map</arg>
</arguments>
<msg timestamp="20190113 22:57:49.217" level="INFO">delete class-map</msg>
<status status="PASS" endtime="20190113 22:57:49.217" starttime="20190113 22:57:49.217"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:57:49.221" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:49.512" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:49.512" starttime="20190113 22:57:49.219"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:49.517" level="INFO">send session_command, cmd=no class-map ethernet auto_ClassMap_vuntagged, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:49.859" level="INFO">session_command result=no class-map ethernet auto_ClassMap_vuntagged
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:57:49.859" level="INFO">${res} = no class-map ethernet auto_ClassMap_vuntagged
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:49.859" starttime="20190113 22:57:49.515"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:49.862" starttime="20190113 22:57:49.861"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:49.863" starttime="20190113 22:57:49.513"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:57:49.867" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:50.137" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:50.138" starttime="20190113 22:57:49.864"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:50.140" starttime="20190113 22:57:49.218"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:50.141" starttime="20190113 22:57:41.182"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:50.142" starttime="20190113 22:57:41.170"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:50.145" starttime="20190113 22:57:41.167"></status>
</kw>
<doc>1 create a class-map to match untag in flow 1 succesfully
2 create a policy-map to bind the class-map and add cevlan tag x succesfully
3 add eth-port1 to s-tag with transport-service-profile succesfully
4 apply the s-tag and policy-map to ethernet uni succesfully
5 send untag upstream traffic to ethernet uni and downstream with s-tag and c-tag to eth-port1 eth-port1 can pass the upstream traffic with right double tag; client can receive the downstream traffic with untag.</doc>
<tags>
<tag>@author=MinGu</tag>
<tag>@eut=10GE-12</tag>
<tag>@feature=Policy Map</tag>
<tag>@globalid=2532599</tag>
<tag>@priority=P1</tag>
<tag>@subFeature=10GE-12: Policy Map support</tag>
<tag>@tcid=AXOS_E72_PARENT-TC-4350</tag>
<tag>@user_interface=CLI</tag>
</tags>
<status status="FAIL" endtime="20190113 22:57:50.176" critical="yes" starttime="20190113 22:57:29.379">No keyword with name 'template_bidirection_raw_traffic_and_check' found.</status>
</test>
<status status="FAIL" endtime="20190113 22:57:50.326" starttime="20190113 22:57:29.152"></status>
</suite>
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/Policy_Map/testcase/tc_remove_cevlan.robot" id="s1-s1-s1-s1-s1-s1-s1-s2" name="Tc Remove Cevlan">
<test id="s1-s1-s1-s1-s1-s1-s1-s2-t1" name="tc_remove_cevlan">
<kw type="setup" name="case setup">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:1 create a class-map to match VLAN x in flow 1</arg>
</arguments>
<msg timestamp="20190113 22:57:50.648" level="INFO">STEP:1 create a class-map to match VLAN x in flow 1</msg>
<status status="PASS" endtime="20190113 22:57:50.648" starttime="20190113 22:57:50.647"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:2 create a policy-map to bind the class-map with the action of remove cevlan</arg>
</arguments>
<msg timestamp="20190113 22:57:50.649" level="INFO">STEP:2 create a policy-map to bind the class-map with the action of remove cevlan</msg>
<status status="PASS" endtime="20190113 22:57:50.650" starttime="20190113 22:57:50.649"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:3 add eth-port1 to s-tag with transport-service-profile</arg>
</arguments>
<msg timestamp="20190113 22:57:50.651" level="INFO">STEP:3 add eth-port1 to s-tag with transport-service-profile</msg>
<status status="PASS" endtime="20190113 22:57:50.651" starttime="20190113 22:57:50.650"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:4 apply the s-tag and policy-map to ethernet uni</arg>
</arguments>
<msg timestamp="20190113 22:57:50.652" level="INFO">STEP:4 apply the s-tag and policy-map to ethernet uni</msg>
<status status="PASS" endtime="20190113 22:57:50.652" starttime="20190113 22:57:50.651"></status>
</kw>
<kw name="subscriber_point_add_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create l2 basic class-map and policy-map, add service to subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>${match_vlan}</arg>
<arg>${service_vlan}</arg>
<arg>remove-cevlan</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 22:57:50.661" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 22:57:50.661" starttime="20190113 22:57:50.660"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] create and add l2 basic service to ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 22:57:50.662" level="INFO">****** [eutA] create and add l2 basic service to subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 22:57:50.663" starttime="20190113 22:57:50.662"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:50.666" starttime="20190113 22:57:50.665"></status>
</kw>
<msg timestamp="20190113 22:57:50.667" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 22:57:50.667" starttime="20190113 22:57:50.664"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 22:57:50.668" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 22:57:50.668" starttime="20190113 22:57:50.667"></status>
</kw>
<msg timestamp="20190113 22:57:50.669" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 22:57:50.669" starttime="20190113 22:57:50.663"></status>
</kw>
<kw name="l2_setting_prov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${ctag_action}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan_action}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<assign>
<var>&amp;{dict_prf}</var>
</assign>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] add l2 basic service to ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 22:57:50.681" level="INFO">****** [eutA] add l2 basic service to ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 22:57:50.681" starttime="20190113 22:57:50.680"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 22:57:50.683" level="INFO">${class_map} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 22:57:50.683" starttime="20190113 22:57:50.682"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 22:57:50.685" level="INFO">${policy_map} = auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 22:57:50.685" starttime="20190113 22:57:50.683"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>classmap=${class_map}</arg>
<arg>policymap=${policy_map}</arg>
</arguments>
<assign>
<var>&amp;{dic_prf}</var>
</assign>
<msg timestamp="20190113 22:57:50.687" level="INFO">&amp;{dic_prf} = { classmap=auto_ClassMap_v4008 | policymap=auto_PolicyMap_v }</msg>
<status status="PASS" endtime="20190113 22:57:50.687" starttime="20190113 22:57:50.686"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create class-map</arg>
</arguments>
<msg timestamp="20190113 22:57:50.689" level="INFO">create class-map</msg>
<status status="PASS" endtime="20190113 22:57:50.689" starttime="20190113 22:57:50.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'untagged'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>untagged=${EMPTY}</arg>
<arg>ELSE IF</arg>
<arg>'any'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>any=${EMPTY}</arg>
<arg>ELSE</arg>
<arg>create dictionary</arg>
<arg>vlan=${match_vlan}</arg>
</arguments>
<assign>
<var>&amp;{dict_match_rule}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>vlan=${match_vlan}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:50.692" starttime="20190113 22:57:50.691"></status>
</kw>
<msg timestamp="20190113 22:57:50.693" level="INFO">&amp;{dict_match_rule} = { vlan=4008 }</msg>
<status status="PASS" endtime="20190113 22:57:50.693" starttime="20190113 22:57:50.690"></status>
</kw>
<kw name="prov_class_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision class-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map}</arg>
<arg>ethernet</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>1</arg>
<arg>&amp;{dict_match_rule}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:57:50.710" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:50.957" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:50.958" starttime="20190113 22:57:50.696"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ${class_map_type} ${class_map_name}</arg>
</arguments>
<msg timestamp="20190113 22:57:50.961" level="INFO">send session_command, cmd=class-map ethernet auto_ClassMap_v4008, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:51.372" level="INFO">session_command result=class-map ethernet auto_ClassMap_v4008
NGPON2X4(config-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 22:57:51.372" starttime="20190113 22:57:50.959"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${flow_type} ${flow_index}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:51.377" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:51.739" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 22:57:51.740" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 22:57:51.740" starttime="20190113 22:57:51.375"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:51.742" starttime="20190113 22:57:51.741"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:51.742" starttime="20190113 22:57:51.374"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:51.748" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:57:51.748" starttime="20190113 22:57:51.747"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = vlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:57:51.751" level="INFO">${value} = 4008</msg>
<status status="PASS" endtime="20190113 22:57:51.751" starttime="20190113 22:57:51.750"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:51.753" level="INFO">${result_string} =  vlan 4008</msg>
<status status="PASS" endtime="20190113 22:57:51.753" starttime="20190113 22:57:51.752"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:51.753" starttime="20190113 22:57:51.749"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:51.753" starttime="20190113 22:57:51.749"></status>
</kw>
<msg timestamp="20190113 22:57:51.754" level="INFO">${cmd_string} =  vlan 4008</msg>
<status status="PASS" endtime="20190113 22:57:51.754" starttime="20190113 22:57:51.746"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>rule ${rule_index} match ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:51.760" level="INFO">send session_command, cmd=rule 1 match  vlan 4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:52.156" level="INFO">session_command result=rule 1 match  vlan 4008
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 22:57:52.156" level="INFO">${res} = rule 1 match  vlan 4008
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 22:57:52.156" starttime="20190113 22:57:51.756"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:52.159" starttime="20190113 22:57:52.158"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:52.159" starttime="20190113 22:57:51.754"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:57:52.162" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:52.443" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:52.443" starttime="20190113 22:57:52.161"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:52.444" starttime="20190113 22:57:50.694"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create policy-map</arg>
</arguments>
<msg timestamp="20190113 22:57:52.446" level="INFO">create policy-map</msg>
<status status="PASS" endtime="20190113 22:57:52.446" starttime="20190113 22:57:52.445"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ctag_action}'=='add-ctag' or '${ctag_action}'=='add-cevlan-tag' or '${cevlan_action}'=='add-cevlan-tag'</arg>
<arg>release_cmd_adapter</arg>
<arg>${device}</arg>
<arg>${prov_policy_map_config_add_tag}</arg>
<arg>ELSE</arg>
<arg>set variable</arg>
<arg>${ctag_action}</arg>
</arguments>
<assign>
<var>${ctag_action}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${ctag_action}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:52.449" starttime="20190113 22:57:52.448"></status>
</kw>
<msg timestamp="20190113 22:57:52.449" level="INFO">${ctag_action} = remove-cevlan</msg>
<status status="PASS" endtime="20190113 22:57:52.450" starttime="20190113 22:57:52.447"></status>
</kw>
<kw name="prov_policy_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision policy-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>${ctag_action}=${cvlan}</arg>
<arg>${cevlan_action}=${cevlan}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:57:52.454" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:52.697" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:52.697" starttime="20190113 22:57:52.452"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<msg timestamp="20190113 22:57:52.704" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:52.989" level="INFO">session_command result=policy-map auto_PolicyMap_v
NGPON2X4(config-policy-map-auto_PolicyMap_v)</msg>
<status status="PASS" endtime="20190113 22:57:52.989" starttime="20190113 22:57:52.702"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:52.995" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:53.374" level="INFO">session_command result=class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<msg timestamp="20190113 22:57:53.375" level="INFO">${res} = class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 22:57:53.375" starttime="20190113 22:57:52.992"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:53.377" starttime="20190113 22:57:53.376"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:53.377" starttime="20190113 22:57:52.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:53.383" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:53.782" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 22:57:53.782" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 22:57:53.782" starttime="20190113 22:57:53.381"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:53.784" starttime="20190113 22:57:53.784"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:53.785" starttime="20190113 22:57:53.379"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:53.786" starttime="20190113 22:57:53.378"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:53.792" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:57:53.792" starttime="20190113 22:57:53.791"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = remove-cevlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:57:53.794" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190113 22:57:53.795" starttime="20190113 22:57:53.794"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:53.796" level="INFO">${result_string} =  remove-cevlan </msg>
<status status="PASS" endtime="20190113 22:57:53.797" starttime="20190113 22:57:53.795"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:53.797" starttime="20190113 22:57:53.793"></status>
</kw>
<kw type="foritem" name="${key} = ">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:57:53.799" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190113 22:57:53.799" starttime="20190113 22:57:53.798"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:53.800" level="INFO">${result_string} =  remove-cevlan   </msg>
<status status="PASS" endtime="20190113 22:57:53.801" starttime="20190113 22:57:53.800"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:53.801" starttime="20190113 22:57:53.797"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:53.801" starttime="20190113 22:57:53.792"></status>
</kw>
<msg timestamp="20190113 22:57:53.802" level="INFO">${cmd_string} =  remove-cevlan   </msg>
<status status="PASS" endtime="20190113 22:57:53.802" starttime="20190113 22:57:53.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:53.807" level="INFO">send session_command, cmd= remove-cevlan   , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:54.135" level="INFO">session_command result= remove-cevlan   
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 22:57:54.136" level="INFO">${res} =  remove-cevlan   
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 22:57:54.136" starttime="20190113 22:57:53.805"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:54.138" starttime="20190113 22:57:54.137"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:54.139" starttime="20190113 22:57:53.803"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:54.140" starttime="20190113 22:57:53.802"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:57:54.143" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:54.418" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:54.418" starttime="20190113 22:57:54.141"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:54.419" starttime="20190113 22:57:52.450"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add policy-map to interface</arg>
</arguments>
<msg timestamp="20190113 22:57:54.421" level="INFO">add policy-map to interface</msg>
<status status="PASS" endtime="20190113 22:57:54.421" starttime="20190113 22:57:54.421"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:54.431" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:56.380" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 22:57:56.380" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:56.380" starttime="20190113 22:57:54.429"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:56.383" starttime="20190113 22:57:56.382"></status>
</kw>
<msg timestamp="20190113 22:57:56.384" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:56.384" starttime="20190113 22:57:54.428"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 22:57:56.387" level="INFO">@{list_key} = [ ]</msg>
<status status="PASS" endtime="20190113 22:57:56.387" starttime="20190113 22:57:56.386"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<status status="PASS" endtime="20190113 22:57:56.388" starttime="20190113 22:57:56.387"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:56.388" starttime="20190113 22:57:54.426"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:56.389" starttime="20190113 22:57:54.422"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>no=shutdown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 22:57:56.396" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map= ******</msg>
<status status="PASS" endtime="20190113 22:57:56.396" starttime="20190113 22:57:56.394"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:57:56.400" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:56.706" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:56.706" starttime="20190113 22:57:56.397"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:56.711" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:57.028" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:57:57.028" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:57:57.028" starttime="20190113 22:57:56.709"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:57.031" starttime="20190113 22:57:57.030"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:57.031" starttime="20190113 22:57:56.707"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:57.038" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:57.800" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 22:57:57.801" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 22:57:57.801" starttime="20190113 22:57:57.036"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:57.803" starttime="20190113 22:57:57.802"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:57.804" starttime="20190113 22:57:57.034"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:57.805" starttime="20190113 22:57:57.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:57.808" starttime="20190113 22:57:57.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:57.810" starttime="20190113 22:57:57.808"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:57.811" starttime="20190113 22:57:57.810"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:57.817" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:57:57.817" starttime="20190113 22:57:57.816"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = no">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:57:57.821" level="INFO">${value} = shutdown</msg>
<status status="PASS" endtime="20190113 22:57:57.821" starttime="20190113 22:57:57.819"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:57:57.823" level="INFO">${result_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 22:57:57.823" starttime="20190113 22:57:57.822"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:57.823" starttime="20190113 22:57:57.819"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:57.823" starttime="20190113 22:57:57.818"></status>
</kw>
<msg timestamp="20190113 22:57:57.824" level="INFO">${cmd_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 22:57:57.824" starttime="20190113 22:57:57.815"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:57.831" level="INFO">send session_command, cmd= no shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:58.242" level="INFO">session_command result= no shutdown
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 22:57:58.242" level="INFO">${res} =  no shutdown
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 22:57:58.242" starttime="20190113 22:57:57.828"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:58.246" starttime="20190113 22:57:58.244"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:58.246" starttime="20190113 22:57:57.826"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:58.248" starttime="20190113 22:57:57.825"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:57:58.252" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:58.518" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:57:58.519" starttime="20190113 22:57:58.250"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:58.520" starttime="20190113 22:57:56.391"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 22:57:58.524" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map=auto_PolicyMap_v ******</msg>
<status status="PASS" endtime="20190113 22:57:58.525" starttime="20190113 22:57:58.523"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:57:58.527" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:58.805" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:57:58.805" starttime="20190113 22:57:58.525"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:58.815" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:59.141" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:57:59.141" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:57:59.142" starttime="20190113 22:57:58.812"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:59.145" starttime="20190113 22:57:59.144"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:59.145" starttime="20190113 22:57:58.811"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:59.153" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:59.446" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 22:57:59.447" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 22:57:59.447" starttime="20190113 22:57:59.150"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:59.450" starttime="20190113 22:57:59.449"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:59.450" starttime="20190113 22:57:59.148"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:59.451" starttime="20190113 22:57:59.147"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:59.457" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:57:59.979" level="INFO">session_command result=policy-map auto_PolicyMap_v
NGPON2X4(config-policy-map-auto_PolicyMap_v)</msg>
<msg timestamp="20190113 22:57:59.979" level="INFO">${res} = policy-map auto_PolicyMap_v
NGPON2X4(config-policy-map-auto_PolicyMap_v)</msg>
<status status="PASS" endtime="20190113 22:57:59.979" starttime="20190113 22:57:59.455"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:57:59.981" starttime="20190113 22:57:59.980"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:59.982" starttime="20190113 22:57:59.453"></status>
</kw>
<status status="PASS" endtime="20190113 22:57:59.983" starttime="20190113 22:57:59.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:57:59.988" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:00.277" level="INFO">session_command result=class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<msg timestamp="20190113 22:58:00.277" level="INFO">${res} = class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 22:58:00.277" starttime="20190113 22:57:59.987"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:00.280" starttime="20190113 22:58:00.279"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:00.281" starttime="20190113 22:57:59.985"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:00.282" starttime="20190113 22:57:59.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:00.284" starttime="20190113 22:58:00.283"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:58:00.290" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:58:00.290" starttime="20190113 22:58:00.289"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 22:58:00.291" starttime="20190113 22:58:00.290"></status>
</kw>
<msg timestamp="20190113 22:58:00.292" level="INFO">${cmd_string} = </msg>
<status status="PASS" endtime="20190113 22:58:00.292" starttime="20190113 22:58:00.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:00.293" starttime="20190113 22:58:00.292"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:58:00.296" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:00.571" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:00.571" starttime="20190113 22:58:00.294"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:00.572" starttime="20190113 22:57:58.521"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add multicast-profile to interface</arg>
</arguments>
<msg timestamp="20190113 22:58:00.574" level="INFO">add multicast-profile to interface</msg>
<status status="PASS" endtime="20190113 22:58:00.575" starttime="20190113 22:58:00.574"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>prov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:00.576" starttime="20190113 22:58:00.575"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 22:58:00.577" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 22:58:00.577" starttime="20190113 22:58:00.577"></status>
</kw>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>policy-map=${policy_map}</arg>
<arg>class-map-ethernet=${class_map}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:00.587" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:02.433" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v
   class-map-ethernet auto_ClassMap_v4008
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 22:58:02.433" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v
   class-map-ethernet auto_ClassMap_v4008
    flow 1...</msg>
<status status="PASS" endtime="20190113 22:58:02.433" starttime="20190113 22:58:00.585"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:02.436" starttime="20190113 22:58:02.435"></status>
</kw>
<msg timestamp="20190113 22:58:02.437" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v
   class-map-ethernet auto_ClassMap_v4008
    flow 1...</msg>
<status status="PASS" endtime="20190113 22:58:02.437" starttime="20190113 22:58:00.583"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 22:58:02.444" level="INFO">@{list_key} = [ class-map-ethernet | policy-map ]</msg>
<status status="PASS" endtime="20190113 22:58:02.444" starttime="20190113 22:58:02.443"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<kw type="foritem" name="${check_item} = class-map-ethernet">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 22:58:02.447" level="INFO">${exp_value} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 22:58:02.447" starttime="20190113 22:58:02.446"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:02.448" starttime="20190113 22:58:02.447"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:02.449" starttime="20190113 22:58:02.445"></status>
</kw>
<kw type="foritem" name="${check_item} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 22:58:02.451" level="INFO">${exp_value} = auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 22:58:02.451" starttime="20190113 22:58:02.450"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:02.452" starttime="20190113 22:58:02.451"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:02.453" starttime="20190113 22:58:02.449"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:02.453" starttime="20190113 22:58:02.444"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:02.453" starttime="20190113 22:58:00.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:02.456" starttime="20190113 22:58:02.455"></status>
</kw>
<msg timestamp="20190113 22:58:02.457" level="INFO">&amp;{dict_prf} = { classmap=auto_ClassMap_v4008 | policymap=auto_PolicyMap_v }</msg>
<status status="PASS" endtime="20190113 22:58:02.457" starttime="20190113 22:57:50.677"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:02.458" starttime="20190113 22:57:50.658"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:02.459" starttime="20190113 22:57:50.646"></status>
</kw>
<kw name="template_bidirection_raw_traffic_and_check">
<arguments>
<arg>${tg_us_param}</arg>
<arg>${tg_ds_param}</arg>
<arg>${us_traffic_filter}</arg>
<arg>${ds_traffic_filter}</arg>
<arg>${traffic_loss_rate}</arg>
</arguments>
<msg timestamp="20190113 22:58:02.493" level="FAIL">No keyword with name 'template_bidirection_raw_traffic_and_check' found.</msg>
<status status="FAIL" endtime="20190113 22:58:02.493" starttime="20190113 22:58:02.492"></status>
</kw>
<kw type="teardown" name="case teardown">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>svc teardown</arg>
</arguments>
<msg timestamp="20190113 22:58:02.509" level="INFO">svc teardown</msg>
<status status="PASS" endtime="20190113 22:58:02.509" starttime="20190113 22:58:02.508"></status>
</kw>
<kw name="subscriber_point_remove_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: delete l2 basic class-map and policy-map, remove service from subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>${match_vlan}</arg>
<arg>${service_vlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 22:58:02.512" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 22:58:02.512" starttime="20190113 22:58:02.511"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove and delete l2 basic service from ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 22:58:02.513" level="INFO">****** [eutA] remove and delete l2 basic service from subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 22:58:02.514" starttime="20190113 22:58:02.513"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:02.517" starttime="20190113 22:58:02.516"></status>
</kw>
<msg timestamp="20190113 22:58:02.518" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 22:58:02.518" starttime="20190113 22:58:02.515"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 22:58:02.519" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 22:58:02.519" starttime="20190113 22:58:02.518"></status>
</kw>
<msg timestamp="20190113 22:58:02.520" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 22:58:02.520" starttime="20190113 22:58:02.514"></status>
</kw>
<kw name="l2_setting_dprov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove l2 basic service from ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 22:58:02.523" level="INFO">****** [eutA] remove l2 basic service from ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 22:58:02.523" starttime="20190113 22:58:02.522"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 22:58:02.524" level="INFO">${class_map} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 22:58:02.524" starttime="20190113 22:58:02.524"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 22:58:02.526" level="INFO">${policy_map} = auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 22:58:02.526" starttime="20190113 22:58:02.525"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 22:58:02.527" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 22:58:02.527" starttime="20190113 22:58:02.527"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:02.530" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:04.435" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v
   class-map-ethernet auto_ClassMap_v4008
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 22:58:04.435" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v
   class-map-ethernet auto_ClassMap_v4008
    flow 1...</msg>
<status status="PASS" endtime="20190113 22:58:04.435" starttime="20190113 22:58:02.528"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove multicast-profile from interface</arg>
</arguments>
<msg timestamp="20190113 22:58:04.437" level="INFO">remove multicast-profile from interface</msg>
<status status="PASS" endtime="20190113 22:58:04.437" starttime="20190113 22:58:04.437"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:04.439" starttime="20190113 22:58:04.438"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove policy-map from interface</arg>
</arguments>
<msg timestamp="20190113 22:58:04.440" level="INFO">remove policy-map from interface</msg>
<status status="PASS" endtime="20190113 22:58:04.440" starttime="20190113 22:58:04.440"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:58:04.446" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:04.709" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:04.709" starttime="20190113 22:58:04.444"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:04.715" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:04.966" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:58:04.966" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:58:04.967" starttime="20190113 22:58:04.712"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:04.970" starttime="20190113 22:58:04.968"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:04.971" starttime="20190113 22:58:04.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:04.979" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:05.263" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 22:58:05.264" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 22:58:05.264" starttime="20190113 22:58:04.977"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:05.266" starttime="20190113 22:58:05.265"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:05.267" starttime="20190113 22:58:04.974"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:05.268" starttime="20190113 22:58:04.973"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:05.277" starttime="20190113 22:58:05.276"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:05.279" starttime="20190113 22:58:05.277"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:05.281" starttime="20190113 22:58:05.280"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:58:05.288" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:58:05.288" starttime="20190113 22:58:05.286"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:58:05.297" level="INFO">${value} = auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 22:58:05.297" starttime="20190113 22:58:05.290"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:58:05.299" level="INFO">${result_string} =  policy-map auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 22:58:05.299" starttime="20190113 22:58:05.298"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:05.299" starttime="20190113 22:58:05.289"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:05.299" starttime="20190113 22:58:05.288"></status>
</kw>
<msg timestamp="20190113 22:58:05.300" level="INFO">${cmd_string} =  policy-map auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 22:58:05.300" starttime="20190113 22:58:05.285"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:05.313" level="INFO">send session_command, cmd=no  policy-map auto_PolicyMap_v, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:05.751" level="INFO">session_command result=no  policy-map auto_PolicyMap_v
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 22:58:05.752" level="INFO">${res} = no  policy-map auto_PolicyMap_v
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 22:58:05.752" starttime="20190113 22:58:05.303"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:05.754" starttime="20190113 22:58:05.753"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:05.755" starttime="20190113 22:58:05.302"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:05.756" starttime="20190113 22:58:05.301"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:58:05.759" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:06.044" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:06.044" starttime="20190113 22:58:05.757"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:06.047" starttime="20190113 22:58:04.442"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:06.048" starttime="20190113 22:58:04.441"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove svlan from interface</arg>
</arguments>
<msg timestamp="20190113 22:58:06.050" level="INFO">remove svlan from interface</msg>
<status status="PASS" endtime="20190113 22:58:06.051" starttime="20190113 22:58:06.050"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:58:06.056" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:06.320" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:06.320" starttime="20190113 22:58:06.055"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:06.325" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:06.574" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:58:06.575" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:58:06.575" starttime="20190113 22:58:06.323"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:06.577" starttime="20190113 22:58:06.576"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:06.577" starttime="20190113 22:58:06.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:06.579" starttime="20190113 22:58:06.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:06.581" starttime="20190113 22:58:06.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:06.582" starttime="20190113 22:58:06.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:06.584" starttime="20190113 22:58:06.583"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:58:06.589" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:58:06.589" starttime="20190113 22:58:06.588"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = vlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:58:06.592" level="INFO">${value} = 4002</msg>
<status status="PASS" endtime="20190113 22:58:06.592" starttime="20190113 22:58:06.591"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:58:06.594" level="INFO">${result_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 22:58:06.594" starttime="20190113 22:58:06.593"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:06.594" starttime="20190113 22:58:06.590"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:06.594" starttime="20190113 22:58:06.590"></status>
</kw>
<msg timestamp="20190113 22:58:06.595" level="INFO">${cmd_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 22:58:06.595" starttime="20190113 22:58:06.587"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:06.600" level="INFO">send session_command, cmd=no  vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:07.118" level="INFO">session_command result=no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:58:07.119" level="INFO">${res} = no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:58:07.119" starttime="20190113 22:58:06.598"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:07.121" starttime="20190113 22:58:07.120"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:07.122" starttime="20190113 22:58:06.596"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:07.123" starttime="20190113 22:58:06.595"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:58:07.125" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:07.372" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:07.373" starttime="20190113 22:58:07.124"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:07.374" starttime="20190113 22:58:06.053"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:07.375" starttime="20190113 22:58:06.051"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 22:58:07.377" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 22:58:07.377" starttime="20190113 22:58:07.376"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:07.379" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:08.971" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 22:58:08.972" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:08.972" starttime="20190113 22:58:07.377"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete policy-map</arg>
</arguments>
<msg timestamp="20190113 22:58:08.974" level="INFO">delete policy-map</msg>
<status status="PASS" endtime="20190113 22:58:08.974" starttime="20190113 22:58:08.973"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map</arg>
<arg>${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:58:08.978" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:09.256" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:09.256" starttime="20190113 22:58:08.976"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:09.261" level="INFO">send session_command, cmd=no policy-map auto_PolicyMap_v, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:10.352" level="INFO">session_command result=no policy-map auto_PolicyMap_v
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:58:10.352" level="INFO">${res} = no policy-map auto_PolicyMap_v
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:10.352" starttime="20190113 22:58:09.259"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:10.356" starttime="20190113 22:58:10.355"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:10.357" starttime="20190113 22:58:09.258"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:58:10.360" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:10.664" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:10.665" starttime="20190113 22:58:10.358"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:10.666" starttime="20190113 22:58:08.975"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete class-map</arg>
</arguments>
<msg timestamp="20190113 22:58:10.668" level="INFO">delete class-map</msg>
<status status="PASS" endtime="20190113 22:58:10.668" starttime="20190113 22:58:10.667"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:58:10.672" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:10.944" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:10.944" starttime="20190113 22:58:10.670"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:10.951" level="INFO">send session_command, cmd=no class-map ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:11.295" level="INFO">session_command result=no class-map ethernet auto_ClassMap_v4008
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:58:11.296" level="INFO">${res} = no class-map ethernet auto_ClassMap_v4008
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:11.296" starttime="20190113 22:58:10.949"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:11.299" starttime="20190113 22:58:11.298"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:11.299" starttime="20190113 22:58:10.946"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:58:11.302" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:11.584" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:11.584" starttime="20190113 22:58:11.300"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:11.586" starttime="20190113 22:58:10.669"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:11.587" starttime="20190113 22:58:02.520"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:11.589" starttime="20190113 22:58:02.509"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:11.591" starttime="20190113 22:58:02.507"></status>
</kw>
<doc>1 create a class-map to match VLAN x in flow 1 succesfully
2 create a policy-map to bind the class-map with the action of remove cevlan succesfully
3 add eth-port1 to s-tag with transport-service-profile succesfully
4 apply the s-tag and policy-map to ethernet uni succesfully
5 send upstream traffic with VLAN x to ethernet uni and downstream with s-tag to eth-port1 eth-port1 can pass the upstream traffic with right tag; client can receive the downstream traffic with tag x</doc>
<tags>
<tag>@author=MinGu</tag>
<tag>@eut=10GE-12</tag>
<tag>@feature=Policy Map</tag>
<tag>@globalid=2532600</tag>
<tag>@priority=P1</tag>
<tag>@subFeature=10GE-12: Policy Map support</tag>
<tag>@tcid=AXOS_E72_PARENT-TC-4351</tag>
<tag>@user_interface=CLI</tag>
</tags>
<status status="FAIL" endtime="20190113 22:58:11.613" critical="yes" starttime="20190113 22:57:50.558">No keyword with name 'template_bidirection_raw_traffic_and_check' found.</status>
</test>
<status status="FAIL" endtime="20190113 22:58:11.699" starttime="20190113 22:57:50.388"></status>
</suite>
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/Policy_Map/testcase/tc_translate_cevlan_tag.robot" id="s1-s1-s1-s1-s1-s1-s1-s3" name="Tc Translate Cevlan Tag">
<test id="s1-s1-s1-s1-s1-s1-s1-s3-t1" name="tc_translate_cevlan_tag">
<kw type="setup" name="case setup">
<doc>setup</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:1 create a class-map to match VLAN x in flow 1</arg>
</arguments>
<msg timestamp="20190113 22:58:12.052" level="INFO">STEP:1 create a class-map to match VLAN x in flow 1</msg>
<status status="PASS" endtime="20190113 22:58:12.052" starttime="20190113 22:58:12.051"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:2 create a policy-map to bind the class-map with the action of translate-cevlan-tag</arg>
</arguments>
<msg timestamp="20190113 22:58:12.054" level="INFO">STEP:2 create a policy-map to bind the class-map with the action of translate-cevlan-tag</msg>
<status status="PASS" endtime="20190113 22:58:12.055" starttime="20190113 22:58:12.053"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:3 add eth-port1 to s-tag with transport-service-profile</arg>
</arguments>
<msg timestamp="20190113 22:58:12.056" level="INFO">STEP:3 add eth-port1 to s-tag with transport-service-profile</msg>
<status status="PASS" endtime="20190113 22:58:12.056" starttime="20190113 22:58:12.055"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:4 apply the s-tag and policy-map to ethernet uni</arg>
</arguments>
<msg timestamp="20190113 22:58:12.057" level="INFO">STEP:4 apply the s-tag and policy-map to ethernet uni</msg>
<status status="PASS" endtime="20190113 22:58:12.057" starttime="20190113 22:58:12.057"></status>
</kw>
<kw name="subscriber_point_add_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create l2 basic class-map and policy-map, add service to subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>${match_vlan}</arg>
<arg>${service_vlan}</arg>
<arg>translate-cevlan-tag</arg>
<arg>${translate_cvlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 22:58:12.067" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 22:58:12.067" starttime="20190113 22:58:12.066"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] create and add l2 basic service to ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 22:58:12.068" level="INFO">****** [eutA] create and add l2 basic service to subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 22:58:12.068" starttime="20190113 22:58:12.068"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:12.072" starttime="20190113 22:58:12.071"></status>
</kw>
<msg timestamp="20190113 22:58:12.072" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 22:58:12.073" starttime="20190113 22:58:12.070"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 22:58:12.074" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 22:58:12.074" starttime="20190113 22:58:12.073"></status>
</kw>
<msg timestamp="20190113 22:58:12.075" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 22:58:12.075" starttime="20190113 22:58:12.069"></status>
</kw>
<kw name="l2_setting_prov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${ctag_action}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan_action}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<assign>
<var>&amp;{dict_prf}</var>
</assign>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] add l2 basic service to ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 22:58:12.084" level="INFO">****** [eutA] add l2 basic service to ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 22:58:12.084" starttime="20190113 22:58:12.083"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 22:58:12.086" level="INFO">${class_map} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 22:58:12.086" starttime="20190113 22:58:12.085"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 22:58:12.087" level="INFO">${policy_map} = auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 22:58:12.087" starttime="20190113 22:58:12.086"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>classmap=${class_map}</arg>
<arg>policymap=${policy_map}</arg>
</arguments>
<assign>
<var>&amp;{dic_prf}</var>
</assign>
<msg timestamp="20190113 22:58:12.089" level="INFO">&amp;{dic_prf} = { classmap=auto_ClassMap_v4008 | policymap=auto_PolicyMap_v4009 }</msg>
<status status="PASS" endtime="20190113 22:58:12.089" starttime="20190113 22:58:12.088"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create class-map</arg>
</arguments>
<msg timestamp="20190113 22:58:12.090" level="INFO">create class-map</msg>
<status status="PASS" endtime="20190113 22:58:12.091" starttime="20190113 22:58:12.090"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'untagged'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>untagged=${EMPTY}</arg>
<arg>ELSE IF</arg>
<arg>'any'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>any=${EMPTY}</arg>
<arg>ELSE</arg>
<arg>create dictionary</arg>
<arg>vlan=${match_vlan}</arg>
</arguments>
<assign>
<var>&amp;{dict_match_rule}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>vlan=${match_vlan}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:12.095" starttime="20190113 22:58:12.094"></status>
</kw>
<msg timestamp="20190113 22:58:12.095" level="INFO">&amp;{dict_match_rule} = { vlan=4008 }</msg>
<status status="PASS" endtime="20190113 22:58:12.095" starttime="20190113 22:58:12.091"></status>
</kw>
<kw name="prov_class_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision class-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map}</arg>
<arg>ethernet</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>1</arg>
<arg>&amp;{dict_match_rule}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:58:12.120" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:12.374" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:12.375" starttime="20190113 22:58:12.098"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ${class_map_type} ${class_map_name}</arg>
</arguments>
<msg timestamp="20190113 22:58:12.378" level="INFO">send session_command, cmd=class-map ethernet auto_ClassMap_v4008, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:12.768" level="INFO">session_command result=class-map ethernet auto_ClassMap_v4008
NGPON2X4(config-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 22:58:12.769" starttime="20190113 22:58:12.376"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${flow_type} ${flow_index}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:12.775" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:13.123" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 22:58:13.123" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 22:58:13.123" starttime="20190113 22:58:12.773"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:13.126" starttime="20190113 22:58:13.125"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:13.127" starttime="20190113 22:58:12.770"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:58:13.133" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:58:13.133" starttime="20190113 22:58:13.132"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = vlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:58:13.136" level="INFO">${value} = 4008</msg>
<status status="PASS" endtime="20190113 22:58:13.136" starttime="20190113 22:58:13.135"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:58:13.137" level="INFO">${result_string} =  vlan 4008</msg>
<status status="PASS" endtime="20190113 22:58:13.137" starttime="20190113 22:58:13.136"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:13.138" starttime="20190113 22:58:13.134"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:13.138" starttime="20190113 22:58:13.133"></status>
</kw>
<msg timestamp="20190113 22:58:13.138" level="INFO">${cmd_string} =  vlan 4008</msg>
<status status="PASS" endtime="20190113 22:58:13.138" starttime="20190113 22:58:13.130"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>rule ${rule_index} match ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:13.142" level="INFO">send session_command, cmd=rule 1 match  vlan 4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:13.528" level="INFO">session_command result=rule 1 match  vlan 4008
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 22:58:13.528" level="INFO">${res} = rule 1 match  vlan 4008
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 22:58:13.529" starttime="20190113 22:58:13.140"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:13.531" starttime="20190113 22:58:13.530"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:13.532" starttime="20190113 22:58:13.139"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:58:13.534" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:13.766" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:13.766" starttime="20190113 22:58:13.533"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:13.767" starttime="20190113 22:58:12.096"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create policy-map</arg>
</arguments>
<msg timestamp="20190113 22:58:13.771" level="INFO">create policy-map</msg>
<status status="PASS" endtime="20190113 22:58:13.771" starttime="20190113 22:58:13.769"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ctag_action}'=='add-ctag' or '${ctag_action}'=='add-cevlan-tag' or '${cevlan_action}'=='add-cevlan-tag'</arg>
<arg>release_cmd_adapter</arg>
<arg>${device}</arg>
<arg>${prov_policy_map_config_add_tag}</arg>
<arg>ELSE</arg>
<arg>set variable</arg>
<arg>${ctag_action}</arg>
</arguments>
<assign>
<var>${ctag_action}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${ctag_action}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:13.775" starttime="20190113 22:58:13.774"></status>
</kw>
<msg timestamp="20190113 22:58:13.776" level="INFO">${ctag_action} = translate-cevlan-tag</msg>
<status status="PASS" endtime="20190113 22:58:13.776" starttime="20190113 22:58:13.772"></status>
</kw>
<kw name="prov_policy_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision policy-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>${ctag_action}=${cvlan}</arg>
<arg>${cevlan_action}=${cevlan}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:58:13.782" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:14.043" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:14.044" starttime="20190113 22:58:13.780"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<msg timestamp="20190113 22:58:14.047" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v4009, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:14.366" level="INFO">session_command result=policy-map auto_PolicyMap_v4009
NGPON2X4(config-policy-map-auto_PolicyMap_v4009)</msg>
<status status="PASS" endtime="20190113 22:58:14.366" starttime="20190113 22:58:14.045"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:14.373" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:14.750" level="INFO">session_command result=class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<msg timestamp="20190113 22:58:14.751" level="INFO">${res} = class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 22:58:14.751" starttime="20190113 22:58:14.370"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:14.753" starttime="20190113 22:58:14.752"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:14.753" starttime="20190113 22:58:14.368"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:14.759" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:15.121" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 22:58:15.122" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 22:58:15.122" starttime="20190113 22:58:14.757"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:15.125" starttime="20190113 22:58:15.124"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:15.125" starttime="20190113 22:58:14.755"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:15.126" starttime="20190113 22:58:14.754"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:58:15.134" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:58:15.134" starttime="20190113 22:58:15.133"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = translate-cevlan-tag">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:58:15.137" level="INFO">${value} = 4009</msg>
<status status="PASS" endtime="20190113 22:58:15.137" starttime="20190113 22:58:15.136"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:58:15.139" level="INFO">${result_string} =  translate-cevlan-tag 4009</msg>
<status status="PASS" endtime="20190113 22:58:15.139" starttime="20190113 22:58:15.138"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:15.139" starttime="20190113 22:58:15.135"></status>
</kw>
<kw type="foritem" name="${key} = ">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:58:15.142" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190113 22:58:15.142" starttime="20190113 22:58:15.140"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:58:15.143" level="INFO">${result_string} =  translate-cevlan-tag 4009  </msg>
<status status="PASS" endtime="20190113 22:58:15.143" starttime="20190113 22:58:15.142"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:15.144" starttime="20190113 22:58:15.140"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:15.144" starttime="20190113 22:58:15.134"></status>
</kw>
<msg timestamp="20190113 22:58:15.144" level="INFO">${cmd_string} =  translate-cevlan-tag 4009  </msg>
<status status="PASS" endtime="20190113 22:58:15.145" starttime="20190113 22:58:15.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:15.150" level="INFO">send session_command, cmd= translate-cevlan-tag 4009  , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:15.487" level="INFO">session_command result= translate-cevlan-tag 4009  
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 22:58:15.488" level="INFO">${res} =  translate-cevlan-tag 4009  
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 22:58:15.488" starttime="20190113 22:58:15.148"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:15.491" starttime="20190113 22:58:15.490"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:15.491" starttime="20190113 22:58:15.146"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:15.493" starttime="20190113 22:58:15.145"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:58:15.496" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:15.785" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:15.785" starttime="20190113 22:58:15.494"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:15.793" starttime="20190113 22:58:13.777"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add policy-map to interface</arg>
</arguments>
<msg timestamp="20190113 22:58:15.802" level="INFO">add policy-map to interface</msg>
<status status="PASS" endtime="20190113 22:58:15.803" starttime="20190113 22:58:15.802"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:15.821" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:17.405" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 22:58:17.406" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:17.406" starttime="20190113 22:58:15.812"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:17.409" starttime="20190113 22:58:17.408"></status>
</kw>
<msg timestamp="20190113 22:58:17.409" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:17.409" starttime="20190113 22:58:15.810"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 22:58:17.412" level="INFO">@{list_key} = [ ]</msg>
<status status="PASS" endtime="20190113 22:58:17.412" starttime="20190113 22:58:17.411"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<status status="PASS" endtime="20190113 22:58:17.413" starttime="20190113 22:58:17.412"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:17.413" starttime="20190113 22:58:15.808"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:17.414" starttime="20190113 22:58:15.803"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>no=shutdown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 22:58:17.419" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map= ******</msg>
<status status="PASS" endtime="20190113 22:58:17.419" starttime="20190113 22:58:17.418"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:58:17.422" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:17.683" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:17.683" starttime="20190113 22:58:17.420"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:17.693" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:17.960" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:58:17.961" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:58:17.961" starttime="20190113 22:58:17.690"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:17.965" starttime="20190113 22:58:17.963"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:17.965" starttime="20190113 22:58:17.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:17.975" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:18.757" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 22:58:18.757" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 22:58:18.757" starttime="20190113 22:58:17.972"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:18.760" starttime="20190113 22:58:18.759"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:18.760" starttime="20190113 22:58:17.969"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:18.762" starttime="20190113 22:58:17.967"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:18.764" starttime="20190113 22:58:18.763"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:18.766" starttime="20190113 22:58:18.765"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:18.767" starttime="20190113 22:58:18.766"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:58:18.773" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:58:18.773" starttime="20190113 22:58:18.772"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = no">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:58:18.776" level="INFO">${value} = shutdown</msg>
<status status="PASS" endtime="20190113 22:58:18.777" starttime="20190113 22:58:18.775"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:58:18.778" level="INFO">${result_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 22:58:18.778" starttime="20190113 22:58:18.777"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:18.779" starttime="20190113 22:58:18.775"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:18.779" starttime="20190113 22:58:18.774"></status>
</kw>
<msg timestamp="20190113 22:58:18.780" level="INFO">${cmd_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 22:58:18.780" starttime="20190113 22:58:18.771"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:18.786" level="INFO">send session_command, cmd= no shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:19.261" level="INFO">session_command result= no shutdown
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 22:58:19.262" level="INFO">${res} =  no shutdown
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 22:58:19.262" starttime="20190113 22:58:18.783"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:19.264" starttime="20190113 22:58:19.264"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:19.265" starttime="20190113 22:58:18.782"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:19.266" starttime="20190113 22:58:18.780"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:58:19.270" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:19.544" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:19.544" starttime="20190113 22:58:19.267"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:19.546" starttime="20190113 22:58:17.416"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 22:58:19.551" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map=auto_PolicyMap_v4009 ******</msg>
<status status="PASS" endtime="20190113 22:58:19.551" starttime="20190113 22:58:19.550"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:58:19.553" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:19.814" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:19.815" starttime="20190113 22:58:19.552"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:19.822" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:20.126" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:58:20.127" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:58:20.127" starttime="20190113 22:58:19.819"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:20.130" starttime="20190113 22:58:20.129"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:20.130" starttime="20190113 22:58:19.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:20.139" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:20.407" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 22:58:20.408" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 22:58:20.408" starttime="20190113 22:58:20.136"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:20.410" starttime="20190113 22:58:20.409"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:20.410" starttime="20190113 22:58:20.134"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:20.411" starttime="20190113 22:58:20.132"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:20.417" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v4009, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:20.920" level="INFO">session_command result=policy-map auto_PolicyMap_v4009
NGPON2X4(config-policy-map-auto_PolicyMap_v4009)</msg>
<msg timestamp="20190113 22:58:20.921" level="INFO">${res} = policy-map auto_PolicyMap_v4009
NGPON2X4(config-policy-map-auto_PolicyMap_v4009)</msg>
<status status="PASS" endtime="20190113 22:58:20.921" starttime="20190113 22:58:20.415"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:20.923" starttime="20190113 22:58:20.922"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:20.923" starttime="20190113 22:58:20.413"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:20.924" starttime="20190113 22:58:20.412"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:20.930" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:21.197" level="INFO">session_command result=class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<msg timestamp="20190113 22:58:21.198" level="INFO">${res} = class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 22:58:21.198" starttime="20190113 22:58:20.928"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:21.201" starttime="20190113 22:58:21.199"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:21.201" starttime="20190113 22:58:20.926"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:21.204" starttime="20190113 22:58:20.925"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:21.208" starttime="20190113 22:58:21.206"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:58:21.218" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:58:21.218" starttime="20190113 22:58:21.216"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 22:58:21.219" starttime="20190113 22:58:21.218"></status>
</kw>
<msg timestamp="20190113 22:58:21.220" level="INFO">${cmd_string} = </msg>
<status status="PASS" endtime="20190113 22:58:21.220" starttime="20190113 22:58:21.213"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:21.222" starttime="20190113 22:58:21.221"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:58:21.224" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:21.507" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:21.508" starttime="20190113 22:58:21.222"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:21.509" starttime="20190113 22:58:19.548"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add multicast-profile to interface</arg>
</arguments>
<msg timestamp="20190113 22:58:21.511" level="INFO">add multicast-profile to interface</msg>
<status status="PASS" endtime="20190113 22:58:21.511" starttime="20190113 22:58:21.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>prov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:21.512" starttime="20190113 22:58:21.511"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 22:58:21.513" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 22:58:21.514" starttime="20190113 22:58:21.513"></status>
</kw>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>policy-map=${policy_map}</arg>
<arg>class-map-ethernet=${class_map}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:21.523" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:23.339" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v4009
   class-map-ethernet auto_ClassMap_v4008
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 22:58:23.339" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v4009
   class-map-ethernet auto_ClassMap_v4008
    fl...</msg>
<status status="PASS" endtime="20190113 22:58:23.339" starttime="20190113 22:58:21.520"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:23.342" starttime="20190113 22:58:23.341"></status>
</kw>
<msg timestamp="20190113 22:58:23.343" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v4009
   class-map-ethernet auto_ClassMap_v4008
    fl...</msg>
<status status="PASS" endtime="20190113 22:58:23.343" starttime="20190113 22:58:21.519"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 22:58:23.347" level="INFO">@{list_key} = [ class-map-ethernet | policy-map ]</msg>
<status status="PASS" endtime="20190113 22:58:23.347" starttime="20190113 22:58:23.346"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<kw type="foritem" name="${check_item} = class-map-ethernet">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 22:58:23.349" level="INFO">${exp_value} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 22:58:23.349" starttime="20190113 22:58:23.348"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:23.351" starttime="20190113 22:58:23.350"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:23.351" starttime="20190113 22:58:23.348"></status>
</kw>
<kw type="foritem" name="${check_item} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 22:58:23.353" level="INFO">${exp_value} = auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 22:58:23.353" starttime="20190113 22:58:23.352"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:23.355" starttime="20190113 22:58:23.354"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:23.355" starttime="20190113 22:58:23.351"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:23.355" starttime="20190113 22:58:23.347"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:23.356" starttime="20190113 22:58:21.517"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:23.358" starttime="20190113 22:58:23.357"></status>
</kw>
<msg timestamp="20190113 22:58:23.359" level="INFO">&amp;{dict_prf} = { classmap=auto_ClassMap_v4008 | policymap=auto_PolicyMap_v4009 }</msg>
<status status="PASS" endtime="20190113 22:58:23.359" starttime="20190113 22:58:12.081"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:23.360" starttime="20190113 22:58:12.064"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:23.362" starttime="20190113 22:58:12.050"></status>
</kw>
<kw name="template_bidirection_raw_traffic_and_check">
<arguments>
<arg>${tg_us_param}</arg>
<arg>${tg_ds_param}</arg>
<arg>${us_traffic_filter}</arg>
<arg>${ds_traffic_filter}</arg>
<arg>${traffic_loss_rate}</arg>
</arguments>
<msg timestamp="20190113 22:58:23.401" level="FAIL">No keyword with name 'template_bidirection_raw_traffic_and_check' found.</msg>
<status status="FAIL" endtime="20190113 22:58:23.401" starttime="20190113 22:58:23.399"></status>
</kw>
<kw type="teardown" name="case teardown">
<doc>teardown</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>svc teardown</arg>
</arguments>
<msg timestamp="20190113 22:58:23.420" level="INFO">svc teardown</msg>
<status status="PASS" endtime="20190113 22:58:23.420" starttime="20190113 22:58:23.419"></status>
</kw>
<kw name="subscriber_point_remove_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: delete l2 basic class-map and policy-map, remove service from subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>${match_vlan}</arg>
<arg>${service_vlan}</arg>
<arg>${translate_cvlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 22:58:23.423" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 22:58:23.423" starttime="20190113 22:58:23.422"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove and delete l2 basic service from ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 22:58:23.424" level="INFO">****** [eutA] remove and delete l2 basic service from subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 22:58:23.424" starttime="20190113 22:58:23.423"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:23.428" starttime="20190113 22:58:23.427"></status>
</kw>
<msg timestamp="20190113 22:58:23.429" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 22:58:23.429" starttime="20190113 22:58:23.426"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 22:58:23.430" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 22:58:23.430" starttime="20190113 22:58:23.429"></status>
</kw>
<msg timestamp="20190113 22:58:23.431" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 22:58:23.431" starttime="20190113 22:58:23.425"></status>
</kw>
<kw name="l2_setting_dprov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove l2 basic service from ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 22:58:23.434" level="INFO">****** [eutA] remove l2 basic service from ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 22:58:23.434" starttime="20190113 22:58:23.433"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 22:58:23.436" level="INFO">${class_map} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 22:58:23.436" starttime="20190113 22:58:23.435"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 22:58:23.437" level="INFO">${policy_map} = auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 22:58:23.437" starttime="20190113 22:58:23.436"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 22:58:23.438" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 22:58:23.439" starttime="20190113 22:58:23.438"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:23.441" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:25.352" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v4009
   class-map-ethernet auto_ClassMap_v4008
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 22:58:25.352" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v4009
   class-map-ethernet auto_ClassMap_v4008
    flo...</msg>
<status status="PASS" endtime="20190113 22:58:25.352" starttime="20190113 22:58:23.439"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove multicast-profile from interface</arg>
</arguments>
<msg timestamp="20190113 22:58:25.355" level="INFO">remove multicast-profile from interface</msg>
<status status="PASS" endtime="20190113 22:58:25.355" starttime="20190113 22:58:25.354"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:25.356" starttime="20190113 22:58:25.355"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove policy-map from interface</arg>
</arguments>
<msg timestamp="20190113 22:58:25.357" level="INFO">remove policy-map from interface</msg>
<status status="PASS" endtime="20190113 22:58:25.358" starttime="20190113 22:58:25.357"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:58:25.363" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:25.618" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:25.618" starttime="20190113 22:58:25.361"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:25.632" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:25.929" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:58:25.930" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:58:25.930" starttime="20190113 22:58:25.628"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:25.934" starttime="20190113 22:58:25.932"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:25.934" starttime="20190113 22:58:25.626"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:25.943" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:26.207" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 22:58:26.208" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 22:58:26.208" starttime="20190113 22:58:25.940"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:26.211" starttime="20190113 22:58:26.210"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:26.211" starttime="20190113 22:58:25.938"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:26.213" starttime="20190113 22:58:25.936"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:26.216" starttime="20190113 22:58:26.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:26.218" starttime="20190113 22:58:26.217"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:26.220" starttime="20190113 22:58:26.219"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:58:26.227" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:58:26.227" starttime="20190113 22:58:26.226"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:58:26.230" level="INFO">${value} = auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 22:58:26.230" starttime="20190113 22:58:26.229"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:58:26.231" level="INFO">${result_string} =  policy-map auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 22:58:26.232" starttime="20190113 22:58:26.231"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:26.232" starttime="20190113 22:58:26.228"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:26.232" starttime="20190113 22:58:26.227"></status>
</kw>
<msg timestamp="20190113 22:58:26.233" level="INFO">${cmd_string} =  policy-map auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 22:58:26.233" starttime="20190113 22:58:26.224"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:26.238" level="INFO">send session_command, cmd=no  policy-map auto_PolicyMap_v4009, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:26.744" level="INFO">session_command result=no  policy-map auto_PolicyMap_v4009
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 22:58:26.744" level="INFO">${res} = no  policy-map auto_PolicyMap_v4009
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 22:58:26.744" starttime="20190113 22:58:26.236"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:26.746" starttime="20190113 22:58:26.745"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:26.747" starttime="20190113 22:58:26.235"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:26.748" starttime="20190113 22:58:26.233"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:58:26.750" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:27.099" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:27.099" starttime="20190113 22:58:26.749"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:27.101" starttime="20190113 22:58:25.359"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:27.102" starttime="20190113 22:58:25.358"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove svlan from interface</arg>
</arguments>
<msg timestamp="20190113 22:58:27.104" level="INFO">remove svlan from interface</msg>
<status status="PASS" endtime="20190113 22:58:27.104" starttime="20190113 22:58:27.103"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:58:27.110" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:27.371" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:27.372" starttime="20190113 22:58:27.108"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:27.378" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:27.654" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:58:27.654" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:58:27.654" starttime="20190113 22:58:27.375"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:27.656" starttime="20190113 22:58:27.656"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:27.657" starttime="20190113 22:58:27.373"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:27.659" starttime="20190113 22:58:27.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:27.661" starttime="20190113 22:58:27.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:27.662" starttime="20190113 22:58:27.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:27.664" starttime="20190113 22:58:27.663"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:58:27.670" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 22:58:27.670" starttime="20190113 22:58:27.669"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = vlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 22:58:27.673" level="INFO">${value} = 4002</msg>
<status status="PASS" endtime="20190113 22:58:27.673" starttime="20190113 22:58:27.672"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 22:58:27.675" level="INFO">${result_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 22:58:27.675" starttime="20190113 22:58:27.674"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:27.675" starttime="20190113 22:58:27.671"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:27.675" starttime="20190113 22:58:27.670"></status>
</kw>
<msg timestamp="20190113 22:58:27.676" level="INFO">${cmd_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 22:58:27.676" starttime="20190113 22:58:27.667"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:27.682" level="INFO">send session_command, cmd=no  vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:28.157" level="INFO">session_command result=no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:58:28.157" level="INFO">${res} = no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:58:28.157" starttime="20190113 22:58:27.680"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:28.160" starttime="20190113 22:58:28.159"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:28.160" starttime="20190113 22:58:27.678"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:28.161" starttime="20190113 22:58:27.677"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:58:28.164" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:28.428" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:28.428" starttime="20190113 22:58:28.162"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:28.429" starttime="20190113 22:58:27.106"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:28.430" starttime="20190113 22:58:27.105"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 22:58:28.433" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 22:58:28.433" starttime="20190113 22:58:28.432"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:28.435" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:30.027" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 22:58:30.028" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:30.028" starttime="20190113 22:58:28.433"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete policy-map</arg>
</arguments>
<msg timestamp="20190113 22:58:30.030" level="INFO">delete policy-map</msg>
<status status="PASS" endtime="20190113 22:58:30.030" starttime="20190113 22:58:30.029"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map</arg>
<arg>${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:58:30.034" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:30.318" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:30.319" starttime="20190113 22:58:30.032"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:30.324" level="INFO">send session_command, cmd=no policy-map auto_PolicyMap_v4009, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:31.411" level="INFO">session_command result=no policy-map auto_PolicyMap_v4009
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:58:31.412" level="INFO">${res} = no policy-map auto_PolicyMap_v4009
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:31.412" starttime="20190113 22:58:30.322"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:31.414" starttime="20190113 22:58:31.413"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:31.414" starttime="20190113 22:58:30.320"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:58:31.417" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:31.657" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:31.657" starttime="20190113 22:58:31.416"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:31.659" starttime="20190113 22:58:30.031"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete class-map</arg>
</arguments>
<msg timestamp="20190113 22:58:31.661" level="INFO">delete class-map</msg>
<status status="PASS" endtime="20190113 22:58:31.661" starttime="20190113 22:58:31.661"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:58:31.665" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:31.954" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:31.955" starttime="20190113 22:58:31.663"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:31.962" level="INFO">send session_command, cmd=no class-map ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:32.393" level="INFO">session_command result=no class-map ethernet auto_ClassMap_v4008
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:58:32.394" level="INFO">${res} = no class-map ethernet auto_ClassMap_v4008
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:32.394" starttime="20190113 22:58:31.960"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:32.398" starttime="20190113 22:58:32.397"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:32.399" starttime="20190113 22:58:31.957"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:58:32.408" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:32.862" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:32.863" starttime="20190113 22:58:32.403"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:32.872" starttime="20190113 22:58:31.662"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:32.888" starttime="20190113 22:58:23.432"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:32.906" starttime="20190113 22:58:23.420"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:32.931" starttime="20190113 22:58:23.418"></status>
</kw>
<doc>1 create a class-map to match VLAN x in flow 1 succesfully
2 create a policy-map to bind the class-map with the action of translate-cevlan-tag succesfully
3 add eth-port1 to s-tag with transport-service-profile succesfully
4 apply the s-tag and policy-map to ethernet uni succesfully
5 send upstream traffic with VLAN x to ethernet uni and downstream with s-tag and cetag to eth-port1 eth-port1 can pass the upstream traffic with the right double tag; the client can receive the downstream traffic with tag x</doc>
<tags>
<tag>@author=MinGu</tag>
<tag>@eut=10GE-12</tag>
<tag>@feature=Policy Map</tag>
<tag>@globalid=2532599</tag>
<tag>@priority=P1</tag>
<tag>@subFeature=10GE-12: Policy Map support</tag>
<tag>@tcid=AXOS_E72_PARENT-TC-4352</tag>
<tag>@user_interface=CLI</tag>
</tags>
<status status="FAIL" endtime="20190113 22:58:33.262" critical="yes" starttime="20190113 22:58:11.912">No keyword with name 'template_bidirection_raw_traffic_and_check' found.</status>
</test>
<status status="FAIL" endtime="20190113 22:58:33.729" starttime="20190113 22:58:11.732"></status>
</suite>
<kw type="teardown" name="eth_policy_map_suite_deprovision">
<doc>suite deprovision for sub_feature</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>suite deprovision for sub_feature</arg>
</arguments>
<msg timestamp="20190113 22:58:33.922" level="INFO">suite deprovision for sub_feature</msg>
<status status="PASS" endtime="20190113 22:58:33.922" starttime="20190113 22:58:33.921"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>subscriber_point deprovision</arg>
</arguments>
<msg timestamp="20190113 22:58:33.923" level="INFO">subscriber_point deprovision</msg>
<status status="PASS" endtime="20190113 22:58:33.924" starttime="20190113 22:58:33.923"></status>
</kw>
<kw name="subscriber_point_dprov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: deprovision for subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** subscriber service deprovision for ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 22:58:33.927" level="INFO">****** subscriber service deprovision for subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 22:58:33.927" starttime="20190113 22:58:33.926"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 22:58:33.930" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 22:58:33.930" starttime="20190113 22:58:33.928"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>subscriber_point_${service_model.${subscriber_point}.type}_dprov</arg>
<arg>${device}</arg>
<arg>${subscriber_point}</arg>
</arguments>
<kw name="subscriber_point_eth_dprov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: ethernet port subscriber deprovision (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${subscriber_point}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] ethernet port subscriber deprovision for ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 22:58:33.935" level="INFO">****** [eutA] ethernet port subscriber deprovision for subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 22:58:33.935" starttime="20190113 22:58:33.934"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${subscriber_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 22:58:33.941" level="INFO">${port} = 1/2/x3</msg>
<status status="PASS" endtime="20190113 22:58:33.941" starttime="20190113 22:58:33.940"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** provision port ${port} role and parameter ******</arg>
</arguments>
<msg timestamp="20190113 22:58:33.943" level="INFO">****** provision port 1/2/x3 role and parameter ******</msg>
<status status="PASS" endtime="20190113 22:58:33.943" starttime="20190113 22:58:33.942"></status>
</kw>
<kw name="dprov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>role</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:33.950" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:34.146" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:58:34.146" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:34.146" starttime="20190113 22:58:33.948"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:34.148" starttime="20190113 22:58:34.148"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:34.149" starttime="20190113 22:58:33.946"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:34.154" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:34.508" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:58:34.508" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:58:34.508" starttime="20190113 22:58:34.152"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:34.510" starttime="20190113 22:58:34.509"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:34.511" starttime="20190113 22:58:34.150"></status>
</kw>
<kw type="for" name="${element} IN [ @{list_cmd} ]">
<kw type="foritem" name="${element} = role">
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${element}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:34.519" level="INFO">send session_command, cmd=no role, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:35.279" level="INFO">session_command result=no role
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:58:35.279" level="INFO">${res} = no role
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:58:35.279" starttime="20190113 22:58:34.517"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:35.283" starttime="20190113 22:58:35.282"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:35.283" starttime="20190113 22:58:34.516"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:35.284" starttime="20190113 22:58:34.515"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:35.286" starttime="20190113 22:58:34.514"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:35.293" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:35.503" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 22:58:35.503" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:35.503" starttime="20190113 22:58:35.289"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:35.506" starttime="20190113 22:58:35.505"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:35.506" starttime="20190113 22:58:35.287"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:35.507" starttime="20190113 22:58:33.944"></status>
</kw>
<kw name="shutdown_port" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Puts an interface in shutdown mode</doc>
<arguments>
<arg>${device}</arg>
<arg>ethernet</arg>
<arg>${port}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:35.513" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:35.716" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:58:35.717" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:35.717" starttime="20190113 22:58:35.511"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:35.720" starttime="20190113 22:58:35.719"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:35.720" starttime="20190113 22:58:35.510"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port-type} ${port}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:35.725" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:35.928" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:58:35.929" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:58:35.929" starttime="20190113 22:58:35.723"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:35.932" starttime="20190113 22:58:35.930"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:35.933" starttime="20190113 22:58:35.722"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>shutdown</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:35.937" level="INFO">send session_command, cmd=shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:36.482" level="INFO">session_command result=shutdown
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 22:58:36.483" level="INFO">${res} = shutdown
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 22:58:36.483" starttime="20190113 22:58:35.936"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:36.486" starttime="20190113 22:58:36.485"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:36.487" starttime="20190113 22:58:35.934"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:36.496" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:36.725" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 22:58:36.726" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:36.726" starttime="20190113 22:58:36.493"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:36.730" starttime="20190113 22:58:36.729"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:36.731" starttime="20190113 22:58:36.492"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:36.736" starttime="20190113 22:58:35.509"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:36.738" starttime="20190113 22:58:33.937"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:36.742" starttime="20190113 22:58:33.935"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:36.744" starttime="20190113 22:58:33.932"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:36.745" starttime="20190113 22:58:33.931"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:36.746" starttime="20190113 22:58:33.924"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>service_point remove_svc and deprovision</arg>
</arguments>
<msg timestamp="20190113 22:58:36.749" level="INFO">service_point remove_svc and deprovision</msg>
<status status="PASS" endtime="20190113 22:58:36.749" starttime="20190113 22:58:36.748"></status>
</kw>
<kw name="service_point_remove_vlan" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: remove vlan for service_point</doc>
<arguments>
<arg>service_point_list1</arg>
<arg>${service_vlan}</arg>
</arguments>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${vlan_list}</arg>
</arguments>
<assign>
<var>${vlan_list_str}</var>
</assign>
<msg timestamp="20190113 22:58:36.753" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20190113 22:58:36.753" level="INFO">${vlan_list_str} = 4002</msg>
<status status="PASS" endtime="20190113 22:58:36.753" starttime="20190113 22:58:36.752"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${vlan_list_str}</arg>
<arg>,</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${vlan_list_str}</var>
</assign>
<msg timestamp="20190113 22:58:36.755" level="INFO">${vlan_list_str} = 4002</msg>
<status status="PASS" endtime="20190113 22:58:36.755" starttime="20190113 22:58:36.754"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_TransVlan_${vlan_list_str}</arg>
</arguments>
<assign>
<var>${transport_prf}</var>
</assign>
<msg timestamp="20190113 22:58:36.757" level="INFO">${transport_prf} = auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 22:58:36.757" starttime="20190113 22:58:36.756"></status>
</kw>
<kw type="for" name="${service_point} IN [ @{service_model.${service_point_list}} ]">
<kw type="foritem" name="${service_point} = service_point1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 22:58:36.761" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 22:58:36.761" starttime="20190113 22:58:36.760"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** uplink service remove vlan ${vlan_list} for ${device} ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 22:58:36.762" level="INFO">****** uplink service remove vlan 4002 for eutA service_point1 ******</msg>
<status status="PASS" endtime="20190113 22:58:36.763" starttime="20190113 22:58:36.762"></status>
</kw>
<kw name="service_point_remove_transport_profile" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: remove transport_profile for service_point interface (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${service_point}</arg>
<arg>${transport_prf}</arg>
</arguments>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>'lag'=='${service_model.${service_point}.type}'</arg>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>lag</arg>
<arg>${service_model.${service_point}.name}</arg>
<arg>transport-service-profile=${transport_prf}</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:36.766" starttime="20190113 22:58:36.765"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove transport-service-profile from interface</arg>
</arguments>
<msg timestamp="20190113 22:58:36.768" level="INFO">remove transport-service-profile from interface</msg>
<status status="PASS" endtime="20190113 22:58:36.768" starttime="20190113 22:58:36.767"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${service_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 22:58:36.772" level="INFO">${port} = 1/2/x2</msg>
<status status="PASS" endtime="20190113 22:58:36.772" starttime="20190113 22:58:36.771"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** deprovision port ${port} transport-service-profile******</arg>
</arguments>
<msg timestamp="20190113 22:58:36.773" level="INFO">****** deprovision port 1/2/x2 transport-service-profile******</msg>
<status status="PASS" endtime="20190113 22:58:36.773" starttime="20190113 22:58:36.772"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ethernet ${port}</arg>
</arguments>
<msg timestamp="20190113 22:58:36.777" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x2, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:38.365" level="INFO">session_command result=show running-config interface ethernet 1/2/x2
interface ethernet 1/2/x2
 no shutdown
 role                      inni
 transport-service-profile auto_TransVlan_4002
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:38.366" starttime="20190113 22:58:36.774"></status>
</kw>
<kw name="dprov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>transport-service-profile</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:38.373" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:38.571" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:58:38.571" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:38.571" starttime="20190113 22:58:38.371"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:38.575" starttime="20190113 22:58:38.574"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:38.576" starttime="20190113 22:58:38.369"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:38.582" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:38.799" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 22:58:38.800" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 22:58:38.800" starttime="20190113 22:58:38.579"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:38.804" starttime="20190113 22:58:38.802"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:38.805" starttime="20190113 22:58:38.577"></status>
</kw>
<kw type="for" name="${element} IN [ @{list_cmd} ]">
<kw type="foritem" name="${element} = transport-service-profile">
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${element}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:38.815" level="INFO">send session_command, cmd=no transport-service-profile, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:39.218" level="INFO">session_command result=no transport-service-profile
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 22:58:39.218" level="INFO">${res} = no transport-service-profile
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 22:58:39.219" starttime="20190113 22:58:38.811"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:39.223" starttime="20190113 22:58:39.221"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:39.223" starttime="20190113 22:58:38.809"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:39.225" starttime="20190113 22:58:38.808"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:39.226" starttime="20190113 22:58:38.806"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:39.231" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:39.455" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 22:58:39.456" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:39.456" starttime="20190113 22:58:39.229"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:39.458" starttime="20190113 22:58:39.457"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:39.459" starttime="20190113 22:58:39.227"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:39.460" starttime="20190113 22:58:38.368"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:39.461" starttime="20190113 22:58:36.770"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:39.462" starttime="20190113 22:58:36.768"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:39.463" starttime="20190113 22:58:36.763"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>delete_config_object</arg>
<arg>${device}</arg>
<arg>transport-service-profile</arg>
<arg>${transport_prf}</arg>
</arguments>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>transport-service-profile</arg>
<arg>${transport_prf}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:58:39.469" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:39.689" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:39.689" starttime="20190113 22:58:39.466"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:39.695" level="INFO">send session_command, cmd=no transport-service-profile auto_TransVlan_4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:40.958" level="INFO">session_command result=no transport-service-profile auto_TransVlan_4002
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:58:40.959" level="INFO">${res} = no transport-service-profile auto_TransVlan_4002
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:40.959" starttime="20190113 22:58:39.692"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:40.963" starttime="20190113 22:58:40.962"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:40.964" starttime="20190113 22:58:39.690"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:58:40.970" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:41.183" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:41.183" starttime="20190113 22:58:40.966"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:41.185" starttime="20190113 22:58:39.465"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:41.187" starttime="20190113 22:58:39.464"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:41.188" starttime="20190113 22:58:36.759"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:41.190" starttime="20190113 22:58:36.757"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:41.192" starttime="20190113 22:58:36.751"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete vlan</arg>
</arguments>
<msg timestamp="20190113 22:58:41.195" level="INFO">delete vlan</msg>
<status status="PASS" endtime="20190113 22:58:41.195" starttime="20190113 22:58:41.194"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>eutA</arg>
<arg>vlan</arg>
<arg>${service_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 22:58:41.202" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:41.476" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:41.477" starttime="20190113 22:58:41.196"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:41.482" level="INFO">send session_command, cmd=no vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:43.153" level="INFO">session_command result=no vlan 4002
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:58:43.154" level="INFO">${res} = no vlan 4002
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:43.154" starttime="20190113 22:58:41.480"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:43.158" starttime="20190113 22:58:43.157"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:43.159" starttime="20190113 22:58:41.478"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 22:58:43.162" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:43.368" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:43.369" starttime="20190113 22:58:43.160"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:43.370" starttime="20190113 22:58:41.195"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>service_point deprovision</arg>
</arguments>
<msg timestamp="20190113 22:58:43.378" level="INFO">service_point deprovision</msg>
<status status="PASS" endtime="20190113 22:58:43.378" starttime="20190113 22:58:43.377"></status>
</kw>
<kw name="service_point_dprov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: deprovision for service_point</doc>
<arguments>
<arg>service_point_list1</arg>
</arguments>
<kw type="for" name="${service_point} IN [ @{service_model.${service_point_list}} ]">
<kw type="foritem" name="${service_point} = service_point1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 22:58:43.383" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 22:58:43.383" starttime="20190113 22:58:43.382"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** uplink service deprovision for ${device} ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 22:58:43.384" level="INFO">****** uplink service deprovision for eutA service_point1 ******</msg>
<status status="PASS" endtime="20190113 22:58:43.384" starttime="20190113 22:58:43.383"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>service_point_${service_model.${service_point}.type}_dprov</arg>
<arg>${device}</arg>
<arg>${service_point}</arg>
</arguments>
<kw name="service_point_eth_dprov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: deprovision for eth type service point (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${service_point}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] ethernet port basic deprovision for ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 22:58:43.388" level="INFO">****** [eutA] ethernet port basic deprovision for service_point1 ******</msg>
<status status="PASS" endtime="20190113 22:58:43.388" starttime="20190113 22:58:43.387"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${service_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 22:58:43.391" level="INFO">${port} = 1/2/x2</msg>
<status status="PASS" endtime="20190113 22:58:43.391" starttime="20190113 22:58:43.390"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** provision port ${port} role and parameter ******</arg>
</arguments>
<msg timestamp="20190113 22:58:43.392" level="INFO">****** provision port 1/2/x2 role and parameter ******</msg>
<status status="PASS" endtime="20190113 22:58:43.392" starttime="20190113 22:58:43.391"></status>
</kw>
<kw name="dprov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>role</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:43.397" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:43.609" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:58:43.609" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:43.609" starttime="20190113 22:58:43.395"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:43.617" starttime="20190113 22:58:43.616"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:43.618" starttime="20190113 22:58:43.394"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:43.623" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:43.836" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 22:58:43.837" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 22:58:43.837" starttime="20190113 22:58:43.621"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:43.840" starttime="20190113 22:58:43.839"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:43.841" starttime="20190113 22:58:43.619"></status>
</kw>
<kw type="for" name="${element} IN [ @{list_cmd} ]">
<kw type="foritem" name="${element} = role">
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${element}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:43.850" level="INFO">send session_command, cmd=no role, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:44.812" level="INFO">session_command result=no role
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 22:58:44.813" level="INFO">${res} = no role
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 22:58:44.813" starttime="20190113 22:58:43.847"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:44.816" starttime="20190113 22:58:44.815"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:44.816" starttime="20190113 22:58:43.845"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:44.818" starttime="20190113 22:58:43.844"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:44.819" starttime="20190113 22:58:43.842"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:44.825" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:45.058" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 22:58:45.059" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:45.059" starttime="20190113 22:58:44.822"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:45.062" starttime="20190113 22:58:45.061"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:45.063" starttime="20190113 22:58:44.821"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:45.064" starttime="20190113 22:58:43.393"></status>
</kw>
<kw name="shutdown_port" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Puts an interface in shutdown mode</doc>
<arguments>
<arg>${device}</arg>
<arg>ethernet</arg>
<arg>${port}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:45.071" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:45.294" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 22:58:45.295" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 22:58:45.295" starttime="20190113 22:58:45.068"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:45.297" starttime="20190113 22:58:45.296"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:45.298" starttime="20190113 22:58:45.067"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port-type} ${port}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:45.302" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:45.502" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 22:58:45.503" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 22:58:45.503" starttime="20190113 22:58:45.301"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:45.513" starttime="20190113 22:58:45.511"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:45.513" starttime="20190113 22:58:45.299"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>shutdown</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:45.519" level="INFO">send session_command, cmd=shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:46.082" level="INFO">session_command result=shutdown
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 22:58:46.082" level="INFO">${res} = shutdown
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 22:58:46.082" starttime="20190113 22:58:45.517"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:46.085" starttime="20190113 22:58:46.084"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:46.086" starttime="20190113 22:58:45.515"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 22:58:46.090" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 22:58:46.308" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 22:58:46.309" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 22:58:46.309" starttime="20190113 22:58:46.088"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 22:58:46.314" starttime="20190113 22:58:46.311"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:46.314" starttime="20190113 22:58:46.087"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:46.316" starttime="20190113 22:58:45.066"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:46.317" starttime="20190113 22:58:43.389"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:46.319" starttime="20190113 22:58:43.388"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:46.320" starttime="20190113 22:58:43.386"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:46.322" starttime="20190113 22:58:43.385"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:46.323" starttime="20190113 22:58:43.381"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:46.324" starttime="20190113 22:58:43.379"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:46.325" starttime="20190113 22:58:43.378"></status>
</kw>
<status status="PASS" endtime="20190113 22:58:46.326" starttime="20190113 22:58:33.920"></status>
</kw>
<doc>Initialization file test suites
It is for putting suite level setup and teardown procedures
And setting the forced tags for all the test cases in folder and subfolder</doc>
<status status="FAIL" endtime="20190113 22:58:46.328" starttime="20190113 22:57:10.702"></status>
</suite>
<status status="FAIL" endtime="20190113 22:58:46.334" starttime="20190113 22:57:10.699"></status>
</suite>
<status status="FAIL" endtime="20190113 22:58:46.339" starttime="20190113 22:57:10.696"></status>
</suite>
<status status="FAIL" endtime="20190113 22:58:46.344" starttime="20190113 22:57:10.693"></status>
</suite>
<status status="FAIL" endtime="20190113 22:58:46.349" starttime="20190113 22:57:10.690"></status>
</suite>
<status status="FAIL" endtime="20190113 22:58:46.354" starttime="20190113 22:57:10.685"></status>
</suite>
<status status="FAIL" endtime="20190113 22:58:46.359" starttime="20190113 22:57:10.519"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="3" pass="0">@author=MinGu</stat>
<stat fail="3" pass="0">@eut=10GE-12</stat>
<stat fail="3" pass="0">@feature=Policy Map</stat>
<stat fail="2" pass="0">@globalid=2532599</stat>
<stat fail="1" pass="0">@globalid=2532600</stat>
<stat fail="3" pass="0">@priority=P1</stat>
<stat fail="3" pass="0">@subFeature=10GE-12: Policy Map support</stat>
<stat fail="1" pass="0">@tcid=AXOS_E72_PARENT-TC-4350</stat>
<stat fail="1" pass="0">@tcid=AXOS_E72_PARENT-TC-4351</stat>
<stat fail="1" pass="0">@tcid=AXOS_E72_PARENT-TC-4352</stat>
<stat fail="3" pass="0">@user_interface=CLI</stat>
</tag>
<suite>
<stat fail="3" id="s1" name="AXOS" pass="0">AXOS</stat>
<stat fail="3" id="s1-s1" name="AXOS-automation" pass="0">AXOS.AXOS-automation</stat>
<stat fail="3" id="s1-s1-s1" name="Milan" pass="0">AXOS.AXOS-automation.Milan</stat>
<stat fail="3" id="s1-s1-s1-s1" name="ST Test Cases" pass="0">AXOS.AXOS-automation.Milan.ST Test Cases</stat>
<stat fail="3" id="s1-s1-s1-s1-s1" name="Data" pass="0">AXOS.AXOS-automation.Milan.ST Test Cases.Data</stat>
<stat fail="3" id="s1-s1-s1-s1-s1-s1" name="Policy Map" pass="0">AXOS.AXOS-automation.Milan.ST Test Cases.Data.Policy Map</stat>
<stat fail="3" id="s1-s1-s1-s1-s1-s1-s1" name="Testcase" pass="0">AXOS.AXOS-automation.Milan.ST Test Cases.Data.Policy Map.Testcase</stat>
<stat fail="1" id="s1-s1-s1-s1-s1-s1-s1-s1" name="Tc Add Cevlan Tag" pass="0">AXOS.AXOS-automation.Milan.ST Test Cases.Data.Policy Map.Testcase.Tc Add Cevlan Tag</stat>
<stat fail="1" id="s1-s1-s1-s1-s1-s1-s1-s2" name="Tc Remove Cevlan" pass="0">AXOS.AXOS-automation.Milan.ST Test Cases.Data.Policy Map.Testcase.Tc Remove Cevlan</stat>
<stat fail="1" id="s1-s1-s1-s1-s1-s1-s1-s3" name="Tc Translate Cevlan Tag" pass="0">AXOS.AXOS-automation.Milan.ST Test Cases.Data.Policy Map.Testcase.Tc Translate Cevlan Tag</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
