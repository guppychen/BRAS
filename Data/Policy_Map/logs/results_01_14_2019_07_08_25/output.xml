<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20190113 23:08:56.194" generator="Robot 3.0.4 (Python 2.7.14 on linux2)">
<suite source="/home/guchen/workspace/AXOS" id="s1" name="AXOS">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation" id="s1-s1" name="AXOS-automation">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan" id="s1-s1-s1" name="Milan">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases" id="s1-s1-s1-s1" name="ST Test Cases">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data" id="s1-s1-s1-s1-s1" name="Data">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/Policy_Map" id="s1-s1-s1-s1-s1-s1" name="Policy Map">
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/Policy_Map/testcase" id="s1-s1-s1-s1-s1-s1-s1" name="Testcase">
<kw type="setup" name="eth_policy_map_suite_provision">
<doc>suite provision for sub_feature</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>suite provision for sub_feature</arg>
</arguments>
<msg timestamp="20190113 23:09:27.374" level="INFO">suite provision for sub_feature</msg>
<status status="PASS" endtime="20190113 23:09:27.374" starttime="20190113 23:09:27.373"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>set eut version and release</arg>
</arguments>
<msg timestamp="20190113 23:09:27.376" level="INFO">set eut version and release</msg>
<status status="PASS" endtime="20190113 23:09:27.376" starttime="20190113 23:09:27.375"></status>
</kw>
<kw name="set_eut_version" library="release_adapter">
<doc>set EUT build and release attribution</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>If device is not specified, get it from topo.yaml ${DEVICES} list</arg>
</arguments>
<msg timestamp="20190113 23:09:27.379" level="INFO">If device is not specified, get it from topo.yaml &lt;cafe.core.utils.Param object at 0x7ff58e54bfd0&gt; list</msg>
<status status="PASS" endtime="20190113 23:09:27.379" starttime="20190113 23:09:27.378"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${device}'</arg>
<arg>Create List</arg>
<arg>${device}</arg>
<arg>ELSE</arg>
<arg>get dictionary keys</arg>
<arg>${DEVICES}</arg>
</arguments>
<assign>
<var>${keys}</var>
</assign>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${DEVICES}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:27.382" starttime="20190113 23:09:27.381"></status>
</kw>
<msg timestamp="20190113 23:09:27.382" level="INFO">${keys} = ['eutA', 'tg1']</msg>
<status status="PASS" endtime="20190113 23:09:27.383" starttime="20190113 23:09:27.379"></status>
</kw>
<kw type="for" name="${eut} IN [ @{keys} ]">
<kw type="foritem" name="${eut} = eutA">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current eut is ${eut}, type is ${DEVICES.${eut}.type}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:27.386" starttime="20190113 23:09:27.385"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${DEVICES.${eut}.type}'!='AXOS'</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:27.388" starttime="20190113 23:09:27.387"></status>
</kw>
<kw name="get_eut_version" library="release_adapter">
<tags>
<tag>@author=llin</tag>
</tags>
<doc>this is the keyword used to get single device's build information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>cli</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:31.449" level="INFO">Created ShellDevice(eutA)</msg>
<msg timestamp="20190113 23:09:31.450" level="INFO">send session_command, cmd=cli, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:32.030" level="INFO">session_command result=cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG state persistence control commands
  clear                 - Clear object data
  clock                 - Modify clock
  configure             - Manipulate software configuration information
  copy                  - Copy files
  cpe-upgrade:cpe       - CPE operation
  debug                 - 
  delete                - Delete files
  devtools              - Enable/disable development tools
  download              - Download files
  enable                - Enable EXEC commands
  exit                  - Exit the management session
  folder                - 
  generate              - Generate files
  idle-timeout          - Configure idle timeout
  install               - 
  lock                  - lock a datastore
  logout                - Logout a user
  manual                - Manual operation with alarms
  no                    - Negate a command or set its defaults
  ofa-connect           - Open Flow Connect
  ofa-listener          - Open Flow Listener
  ofa-port              - Open Flow port
  ont-eth               - ONT-ETH efm-loopback-status mode
  ont-firmware-upgrade  - Start software download
  ont-simulation        - ONT simulation commands
  ont-upgrade           - ONT upgrade commands
  paginate              - Paginate output from CLI commands
  perform               - Perform an operation
  ping                  - Ping IP address
  ping6                 - Ping IPv6 address
  quit                  - Exit the management session
  redundancy            - redundancy switchover commands
  reload                - Reboot the current card
  remove-dynamic-policy - 
  replay                - Replay card-config
  restart               - Restart Diameter daemon
  run                   - 
  send                  - Send message to terminal of one or all users
  session               - 
  show                  - Show information about the system
  ssh                   - ssh command
  start                 - Start an operation
  stop                  - Stop an operation
  switch                - Switch network clock
  tcpdump               - tcpdump command
  telnet                - telnet command
  templatize            - Find patterns in subtree.
  terminal              - Set terminal type
  timestamp             - Enable/disable the display of timestamp
  traceroute            - Traceroute IP address
  uninstall             - 
  unlock                - unlock a datastore
  upgrade               - Upgrade commands
  upload                - Upload files
  verify                - 
NGPON2X4</msg>
<msg timestamp="20190113 23:09:32.031" level="INFO">${res} = cli
----------^
syntax error: expecting 
  abort                 - 
  accept                - Accept config
  apply                 - 
  apply-dynamic-policy  - 
  bng-state-persistence - BNG s...</msg>
<status status="PASS" endtime="20190113 23:09:32.031" starttime="20190113 23:09:27.390"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:32.036" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:32.503" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 23:09:32.504" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 23:09:32.504" starttime="20190113 23:09:32.033"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>(description|details)\\s*(.*)\r</arg>
<arg>2</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 23:09:32.507" level="INFO">${matches} = ['IBAXOS191-CI-330', 'IBAXOS191-CI-330']</msg>
<status status="PASS" endtime="20190113 23:09:32.507" starttime="20190113 23:09:32.505"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:32.508" starttime="20190113 23:09:32.508"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 23:09:32.510" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 23:09:32.510" starttime="20190113 23:09:32.509"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${build}</arg>
</arguments>
<msg timestamp="20190113 23:09:32.511" level="INFO">we've got the build informations : IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 23:09:32.512" starttime="20190113 23:09:32.511"></status>
</kw>
<msg timestamp="20190113 23:09:32.512" level="INFO">${build} = IBAXOS191-CI-330</msg>
<status status="PASS" endtime="20190113 23:09:32.512" starttime="20190113 23:09:27.388"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>build</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:32.515" starttime="20190113 23:09:32.514"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s build is ${DEVICES.${eut}.build}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:32.516" starttime="20190113 23:09:32.515"></status>
</kw>
<kw name="get_eut_distro" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to get single device's distro information</doc>
<arguments>
<arg>${eut}</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show version</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:32.520" level="INFO">send session_command, cmd=show version, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:32.986" level="INFO">session_command result=show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
version 1/2
 image-partition      imgx
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Signed-Optics-Enforcement-Disabled
 distro               "IB-AXOS-19.1 2019.01.12 02:16:30"
 schema               18.0.0-ib191
 timestamp            "2019.01.12 02:16:30"
 details              IBAXOS191-CI-330
NGPON2X4</msg>
<msg timestamp="20190113 23:09:32.986" level="INFO">${res} = show version
version 1/1
 image-partition      imgy
 full-release-version dirty
 live-release-version N/A
 image-type           FullRelease
 patches              none
 features             Sign...</msg>
<status status="PASS" endtime="20190113 23:09:32.986" starttime="20190113 23:09:32.518"></status>
</kw>
<kw name="Get Regexp Matches" library="String">
<doc>Returns a list of all non-overlapping matches in the given string.</doc>
<arguments>
<arg>${res}</arg>
<arg>distro\\s*"(.*)"\r</arg>
<arg>1</arg>
</arguments>
<assign>
<var>${matches}</var>
</assign>
<msg timestamp="20190113 23:09:32.990" level="INFO">${matches} = ['IB-AXOS-19.1 2019.01.12 02:16:30', 'IB-AXOS-19.1 2019.01.12 02:16:30']</msg>
<status status="PASS" endtime="20190113 23:09:32.990" starttime="20190113 23:09:32.988"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:32.992" starttime="20190113 23:09:32.991"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${distro}</var>
</assign>
<msg timestamp="20190113 23:09:32.994" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 23:09:32.994" starttime="20190113 23:09:32.992"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the build informations : ${distro}</arg>
</arguments>
<msg timestamp="20190113 23:09:32.995" level="INFO">we've got the build informations : IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 23:09:32.995" starttime="20190113 23:09:32.994"></status>
</kw>
<msg timestamp="20190113 23:09:32.996" level="INFO">${distro} = IB-AXOS-19.1 2019.01.12 02:16:30</msg>
<status status="PASS" endtime="20190113 23:09:32.996" starttime="20190113 23:09:32.517"></status>
</kw>
<kw name="mapping_distro_to_release" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>this is the keyword used to mapping build id to release name</doc>
<arguments>
<arg>${distro}</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<kw name="Remove String Using Regexp" library="String">
<doc>Removes ``patterns`` from the given ``string``.</doc>
<arguments>
<arg>${distro}</arg>
<arg>\\s+.*$</arg>
</arguments>
<assign>
<var>${build}</var>
</assign>
<msg timestamp="20190113 23:09:33.000" level="INFO">${build} = IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 23:09:33.000" starttime="20190113 23:09:32.999"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the branch of the build is : ${build}</arg>
</arguments>
<msg timestamp="20190113 23:09:33.002" level="INFO">the branch of the build is : IB-AXOS-19.1</msg>
<status status="PASS" endtime="20190113 23:09:33.002" starttime="20190113 23:09:33.001"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>open('${map}').readlines()</arg>
</arguments>
<assign>
<var>${fileHandler}</var>
</assign>
<msg timestamp="20190113 23:09:33.004" level="INFO">${fileHandler} = ['Release, Branch\n', 'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2\n', 'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-...</msg>
<status status="PASS" endtime="20190113 23:09:33.004" starttime="20190113 23:09:33.002"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>the mapping file content : ${fileHandler}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.006" starttime="20190113 23:09:33.005"></status>
</kw>
<kw name="Convert To List" library="Collections">
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.007" starttime="20190113 23:09:33.006"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 23:09:33.009" level="INFO">${rowIndex} = 0</msg>
<status status="PASS" endtime="20190113 23:09:33.009" starttime="20190113 23:09:33.008"></status>
</kw>
<kw type="for" name="${rowitem} IN [ @{fileHandler} ]">
<kw type="foritem" name="${rowitem} = Release, Branch&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.012" starttime="20190113 23:09:33.011"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 23:09:33.015" level="FAIL">'Release, Branch
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 23:09:33.015" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 23:09:33.015" starttime="20190113 23:09:33.014"></status>
</kw>
<msg timestamp="20190113 23:09:33.016" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 23:09:33.016" starttime="20190113 23:09:33.013"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 23:09:33.017" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 23:09:33.017" starttime="20190113 23:09:33.016"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.019" starttime="20190113 23:09:33.018"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 23:09:33.020" level="INFO">${rowIndex} = 1</msg>
<status status="PASS" endtime="20190113 23:09:33.020" starttime="20190113 23:09:33.019"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:33.021" starttime="20190113 23:09:33.010"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.023" starttime="20190113 23:09:33.022"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 23:09:33.027" level="FAIL">'AXOS_3_1, IBAXOS31-CI1, MBAXOS31-CI1, IB-AXOS-3.1, MB-AXOS-3.1, FBEEXA9935-CI0, FB-EEXA-9935-GPON8R2
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 23:09:33.027" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 23:09:33.028" starttime="20190113 23:09:33.025"></status>
</kw>
<msg timestamp="20190113 23:09:33.028" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 23:09:33.028" starttime="20190113 23:09:33.024"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 23:09:33.030" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 23:09:33.030" starttime="20190113 23:09:33.029"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.032" starttime="20190113 23:09:33.031"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 23:09:33.033" level="INFO">${rowIndex} = 2</msg>
<status status="PASS" endtime="20190113 23:09:33.033" starttime="20190113 23:09:33.032"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:33.034" starttime="20190113 23:09:33.021"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.036" starttime="20190113 23:09:33.035"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 23:09:33.039" level="FAIL">'AXOS_3_4, IB-AXOS-3.4, FB-EEXA-11124-DUAL-CARD-PFM-PROT, FB-EEXA-11124-SAL-US, PB-AXOS-3.4.3.1
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 23:09:33.039" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 23:09:33.039" starttime="20190113 23:09:33.038"></status>
</kw>
<msg timestamp="20190113 23:09:33.040" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 23:09:33.040" starttime="20190113 23:09:33.037"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 23:09:33.041" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 23:09:33.041" starttime="20190113 23:09:33.040"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.043" starttime="20190113 23:09:33.042"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 23:09:33.045" level="INFO">${rowIndex} = 3</msg>
<status status="PASS" endtime="20190113 23:09:33.045" starttime="20190113 23:09:33.044"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:33.045" starttime="20190113 23:09:33.034"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.048" starttime="20190113 23:09:33.047"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 23:09:33.050" level="FAIL">'AXOS_4_1, EEXA9056-CI, FB-EEXA-9056-35B-Product, FB-EEXA-12718-DUAL-CARD-IGMP
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 23:09:33.051" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 23:09:33.051" starttime="20190113 23:09:33.049"></status>
</kw>
<msg timestamp="20190113 23:09:33.051" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 23:09:33.051" starttime="20190113 23:09:33.048"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 23:09:33.053" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 23:09:33.053" starttime="20190113 23:09:33.052"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.054" starttime="20190113 23:09:33.053"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 23:09:33.056" level="INFO">${rowIndex} = 4</msg>
<status status="PASS" endtime="20190113 23:09:33.056" starttime="20190113 23:09:33.055"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:33.056" starttime="20190113 23:09:33.046"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.059" starttime="20190113 23:09:33.058"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<msg timestamp="20190113 23:09:33.061" level="FAIL">'AXOS_4_2, FB-CPEGA-7838-E7-E9-Convergence, IB-AXOS-4.2, RB-AXOS-4.2.0, PB-AXOS-4.2.0.3
' does not contain 'IB-AXOS-19.1'</msg>
<msg timestamp="20190113 23:09:33.061" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 23:09:33.061" starttime="20190113 23:09:33.060"></status>
</kw>
<msg timestamp="20190113 23:09:33.062" level="INFO">${contain_build} = False</msg>
<status status="PASS" endtime="20190113 23:09:33.062" starttime="20190113 23:09:33.059"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 23:09:33.063" level="INFO">build IB-AXOS-19.1 search result is False</msg>
<status status="PASS" endtime="20190113 23:09:33.063" starttime="20190113 23:09:33.062"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.065" starttime="20190113 23:09:33.064"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rowIndex}+1</arg>
</arguments>
<assign>
<var>${rowIndex}</var>
</assign>
<msg timestamp="20190113 23:09:33.066" level="INFO">${rowIndex} = 5</msg>
<status status="PASS" endtime="20190113 23:09:33.066" starttime="20190113 23:09:33.065"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:33.067" starttime="20190113 23:09:33.057"></status>
</kw>
<kw type="foritem" name="${rowitem} = AXOS_19_1, IB-AXOS-19.1&#10;">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current row index:${rowIndex} item:${rowitem}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.069" starttime="20190113 23:09:33.068"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<assign>
<var>${contain_build}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${rowitem}</arg>
<arg>${build}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.072" starttime="20190113 23:09:33.071"></status>
</kw>
<msg timestamp="20190113 23:09:33.072" level="INFO">${contain_build} = True</msg>
<status status="PASS" endtime="20190113 23:09:33.072" starttime="20190113 23:09:33.070"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>build ${build} search result is ${contain_build}</arg>
</arguments>
<msg timestamp="20190113 23:09:33.074" level="INFO">build IB-AXOS-19.1 search result is True</msg>
<status status="PASS" endtime="20190113 23:09:33.074" starttime="20190113 23:09:33.073"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${contain_build}</arg>
</arguments>
<msg timestamp="20190113 23:09:33.075" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20190113 23:09:33.075" starttime="20190113 23:09:33.074"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:33.076" starttime="20190113 23:09:33.067"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:33.076" starttime="20190113 23:09:33.009"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>'${contain_build}'!='True'</arg>
<arg>NONE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.077" starttime="20190113 23:09:33.076"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we find the release info in ${rowIndex} row</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.079" starttime="20190113 23:09:33.078"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${fileHandler}</arg>
</arguments>
<assign>
<var>${len}</var>
</assign>
<msg timestamp="20190113 23:09:33.080" level="INFO">Length is 6</msg>
<msg timestamp="20190113 23:09:33.081" level="INFO">${len} = 6</msg>
<status status="PASS" endtime="20190113 23:09:33.081" starttime="20190113 23:09:33.079"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>@{fileHandler}[${rowIndex}]</arg>
</arguments>
<assign>
<var>${releaseStr}</var>
</assign>
<msg timestamp="20190113 23:09:33.082" level="DEBUG">Argument types are:
&lt;type 'str'&gt;</msg>
<msg timestamp="20190113 23:09:33.082" level="INFO">${releaseStr} = AXOS_19_1, IB-AXOS-19.1
</msg>
<status status="PASS" endtime="20190113 23:09:33.083" starttime="20190113 23:09:33.081"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>release=${releaseStr}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.084" starttime="20190113 23:09:33.083"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${releaseStr}</arg>
<arg>,</arg>
</arguments>
<assign>
<var>@{matches}</var>
</assign>
<msg timestamp="20190113 23:09:33.086" level="INFO">@{matches} = [ AXOS_19_1 |  IB-AXOS-19.1
 ]</msg>
<status status="PASS" endtime="20190113 23:09:33.086" starttime="20190113 23:09:33.085"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>got the matches: ${matches}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.088" starttime="20190113 23:09:33.086"></status>
</kw>
<kw name="Get From List" library="Collections">
<doc>Returns the value specified with an ``index`` from ``list``.</doc>
<arguments>
<arg>${matches}</arg>
<arg>0</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 23:09:33.089" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 23:09:33.089" starttime="20190113 23:09:33.088"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>we've got the release information: ${release}.</arg>
</arguments>
<msg timestamp="20190113 23:09:33.091" level="INFO">we've got the release information: AXOS_19_1.</msg>
<status status="PASS" endtime="20190113 23:09:33.091" starttime="20190113 23:09:33.090"></status>
</kw>
<msg timestamp="20190113 23:09:33.092" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 23:09:33.092" starttime="20190113 23:09:32.997"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'NONE'=='${release}'</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.094" starttime="20190113 23:09:33.093"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${eut}}</arg>
<arg>release</arg>
<arg>${release}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.096" starttime="20190113 23:09:33.095"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>eut(${eut})'s release is ${DEVICES.${eut}.release}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.098" starttime="20190113 23:09:33.097"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:33.098" starttime="20190113 23:09:27.384"></status>
</kw>
<kw type="foritem" name="${eut} = tg1">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>current eut is ${eut}, type is ${DEVICES.${eut}.type}</arg>
<arg>TRACE</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.102" starttime="20190113 23:09:33.101"></status>
</kw>
<kw name="Continue For Loop If" library="BuiltIn">
<doc>Skips the current for loop iteration if the ``condition`` is true.</doc>
<arguments>
<arg>'${DEVICES.${eut}.type}'!='AXOS'</arg>
</arguments>
<msg timestamp="20190113 23:09:33.104" level="INFO">Continuing for loop from the next iteration.</msg>
<status status="PASS" endtime="20190113 23:09:33.104" starttime="20190113 23:09:33.103"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:33.104" starttime="20190113 23:09:33.100"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:33.105" starttime="20190113 23:09:27.383"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:33.106" starttime="20190113 23:09:27.376"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>service_point_provision for uplink side</arg>
</arguments>
<msg timestamp="20190113 23:09:33.108" level="INFO">service_point_provision for uplink side</msg>
<status status="PASS" endtime="20190113 23:09:33.108" starttime="20190113 23:09:33.107"></status>
</kw>
<kw name="service_point_prov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision for service_point</doc>
<arguments>
<arg>service_point_list1</arg>
</arguments>
<kw type="for" name="${service_point} IN [ @{service_model.${service_point_list}} ]">
<kw type="foritem" name="${service_point} = service_point1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:09:33.112" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:09:33.113" starttime="20190113 23:09:33.111"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** uplink service provision for ${device} ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:09:33.114" level="INFO">****** uplink service provision for eutA service_point1 ******</msg>
<status status="PASS" endtime="20190113 23:09:33.114" starttime="20190113 23:09:33.113"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>service_point_${service_model.${service_point}.type}_prov</arg>
<arg>${device}</arg>
<arg>${service_point}</arg>
</arguments>
<kw name="service_point_eth_prov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision for eth type service point (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${service_point}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] ethernet port basic provision for ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:09:33.118" level="INFO">****** [eutA] ethernet port basic provision for service_point1 ******</msg>
<status status="PASS" endtime="20190113 23:09:33.119" starttime="20190113 23:09:33.117"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${service_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 23:09:33.122" level="INFO">${port} = 1/2/x2</msg>
<status status="PASS" endtime="20190113 23:09:33.122" starttime="20190113 23:09:33.121"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** provision port ${port} role and parameter ******</arg>
</arguments>
<msg timestamp="20190113 23:09:33.123" level="INFO">****** provision port 1/2/x2 role and parameter ******</msg>
<status status="PASS" endtime="20190113 23:09:33.124" starttime="20190113 23:09:33.123"></status>
</kw>
<kw name="prov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>${service_model.${service_point}.attribute.interface_role}</arg>
<arg>ENABLED</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:33.131" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:33.318" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:09:33.319" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:09:33.319" starttime="20190113 23:09:33.128"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.323" starttime="20190113 23:09:33.322"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:33.324" starttime="20190113 23:09:33.127"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:33.329" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:33.624" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:09:33.624" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:09:33.624" starttime="20190113 23:09:33.327"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.627" starttime="20190113 23:09:33.626"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:33.628" starttime="20190113 23:09:33.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${switchport}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>switchport ${switchport}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>switchport ${switchport}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:33.635" level="INFO">send session_command, cmd=switchport ENABLED, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:33.948" level="INFO">session_command result=switchport ENABLED
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:09:33.949" level="INFO">${res} = switchport ENABLED
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:09:33.949" starttime="20190113 23:09:33.633"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:33.952" starttime="20190113 23:09:33.951"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:33.953" starttime="20190113 23:09:33.631"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:33.954" starttime="20190113 23:09:33.630"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${interface_role}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>role ${interface_role}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>role ${interface_role}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:33.962" level="INFO">send session_command, cmd=role inni, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:34.807" level="INFO">session_command result=role inni
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:09:34.808" level="INFO">${res} = role inni
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:09:34.808" starttime="20190113 23:09:33.959"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:34.812" starttime="20190113 23:09:34.810"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:34.812" starttime="20190113 23:09:33.957"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:34.814" starttime="20190113 23:09:33.956"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:34.817" starttime="20190113 23:09:34.815"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:09:34.824" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:09:34.824" starttime="20190113 23:09:34.822"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 23:09:34.825" starttime="20190113 23:09:34.824"></status>
</kw>
<msg timestamp="20190113 23:09:34.826" level="INFO">${cmd_string} = </msg>
<status status="PASS" endtime="20190113 23:09:34.826" starttime="20190113 23:09:34.820"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:34.828" starttime="20190113 23:09:34.827"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:34.834" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:35.059" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:09:35.060" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:09:35.060" starttime="20190113 23:09:34.831"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:35.063" starttime="20190113 23:09:35.062"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:35.063" starttime="20190113 23:09:34.829"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:35.065" starttime="20190113 23:09:33.124"></status>
</kw>
<kw name="no_shutdown_port" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Puts an interface in shutdown mode</doc>
<arguments>
<arg>${device}</arg>
<arg>ethernet</arg>
<arg>${port}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:35.072" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:35.263" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:09:35.263" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:09:35.264" starttime="20190113 23:09:35.070"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:35.269" starttime="20190113 23:09:35.268"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:35.270" starttime="20190113 23:09:35.068"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port-type} ${port}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:35.277" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:35.474" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:09:35.475" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:09:35.475" starttime="20190113 23:09:35.274"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:35.485" starttime="20190113 23:09:35.484"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:35.486" starttime="20190113 23:09:35.272"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no shutdown</arg>
<arg>30</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:35.491" level="INFO">send session_command, cmd=no shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:36.200" level="INFO">session_command result=no shutdown
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:09:36.200" level="INFO">${res} = no shutdown
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:09:36.200" starttime="20190113 23:09:35.488"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:36.203" starttime="20190113 23:09:36.202"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:36.203" starttime="20190113 23:09:35.487"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:36.209" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:36.405" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:09:36.406" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:09:36.406" starttime="20190113 23:09:36.207"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:36.408" starttime="20190113 23:09:36.407"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:36.409" starttime="20190113 23:09:36.205"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:36.410" starttime="20190113 23:09:35.066"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:36.411" starttime="20190113 23:09:33.120"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:36.412" starttime="20190113 23:09:33.119"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:36.413" starttime="20190113 23:09:33.116"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:36.414" starttime="20190113 23:09:33.115"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:36.415" starttime="20190113 23:09:33.110"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:36.416" starttime="20190113 23:09:33.109"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:36.417" starttime="20190113 23:09:33.109"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>service_point add svc</arg>
</arguments>
<msg timestamp="20190113 23:09:36.419" level="INFO">service_point add svc</msg>
<status status="PASS" endtime="20190113 23:09:36.419" starttime="20190113 23:09:36.418"></status>
</kw>
<kw name="prov_vlan" library="keyword_command">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description: provision vlan</doc>
<arguments>
<arg>eutA</arg>
<arg>${service_vlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>vlan ${vlan}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 23:09:36.424" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 23:09:36.424" starttime="20190113 23:09:36.423"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${l2-dhcp-profile}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} l2-dhcp-profile ${l2-dhcp-profile}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 23:09:36.426" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 23:09:36.426" starttime="20190113 23:09:36.425"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${igmp-profile}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} igmp-profile ${igmp-profile}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 23:09:36.429" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 23:09:36.429" starttime="20190113 23:09:36.427"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${pppoe-ia-id-profile}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} pppoe-ia-id-profile ${pppoe-ia-id-profile}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 23:09:36.431" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 23:09:36.431" starttime="20190113 23:09:36.430"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${mac-learning}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} mac-learning ${mac-learning}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 23:09:36.433" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 23:09:36.434" starttime="20190113 23:09:36.432"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${mode}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} mode ${mode}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 23:09:36.435" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 23:09:36.436" starttime="20190113 23:09:36.434"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${source-verify}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} source-verify ${source-verify}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 23:09:36.438" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 23:09:36.438" starttime="20190113 23:09:36.436"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${mff}'=='${EMPTY}'</arg>
<arg>${cmd_str}</arg>
<arg>${cmd_str} mff ${mff}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<msg timestamp="20190113 23:09:36.440" level="INFO">${cmd_str} = vlan 4002</msg>
<status status="PASS" endtime="20190113 23:09:36.440" starttime="20190113 23:09:36.439"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:09:36.443" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:36.641" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:09:36.642" starttime="20190113 23:09:36.441"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_str}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:36.647" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:37.901" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:09:37.901" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:09:37.901" starttime="20190113 23:09:36.645"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:37.905" starttime="20190113 23:09:37.903"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:37.905" starttime="20190113 23:09:36.643"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:09:37.913" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:09:37.913" starttime="20190113 23:09:37.911"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 23:09:37.914" starttime="20190113 23:09:37.913"></status>
</kw>
<msg timestamp="20190113 23:09:37.915" level="INFO">${cmd_str} = </msg>
<status status="PASS" endtime="20190113 23:09:37.915" starttime="20190113 23:09:37.910"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${cmd_str}'!='${EMPTY}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_str}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:37.917" starttime="20190113 23:09:37.915"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:09:37.919" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:38.141" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:09:38.142" starttime="20190113 23:09:37.917"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:38.143" starttime="20190113 23:09:36.420"></status>
</kw>
<kw name="service_point_add_vlan" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: add vlan for service_point</doc>
<arguments>
<arg>service_point_list1</arg>
<arg>${service_vlan}</arg>
</arguments>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${vlan_list}</arg>
</arguments>
<assign>
<var>${vlan_list_str}</var>
</assign>
<msg timestamp="20190113 23:09:38.147" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20190113 23:09:38.148" level="INFO">${vlan_list_str} = 4002</msg>
<status status="PASS" endtime="20190113 23:09:38.148" starttime="20190113 23:09:38.146"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${vlan_list_str}</arg>
<arg>,</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${vlan_list_str}</var>
</assign>
<msg timestamp="20190113 23:09:38.149" level="INFO">${vlan_list_str} = 4002</msg>
<status status="PASS" endtime="20190113 23:09:38.149" starttime="20190113 23:09:38.148"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_TransVlan_${vlan_list_str}</arg>
</arguments>
<assign>
<var>${transport_prf}</var>
</assign>
<msg timestamp="20190113 23:09:38.151" level="INFO">${transport_prf} = auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 23:09:38.151" starttime="20190113 23:09:38.150"></status>
</kw>
<kw type="for" name="${service_point} IN [ @{service_model.${service_point_list}} ]">
<kw type="foritem" name="${service_point} = service_point1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:09:38.155" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:09:38.155" starttime="20190113 23:09:38.154"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** uplink service add vlan ${vlan_list} for ${device} ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:09:38.157" level="INFO">****** uplink service add vlan 4002 for eutA service_point1 ******</msg>
<status status="PASS" endtime="20190113 23:09:38.157" starttime="20190113 23:09:38.156"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create transport-service-profile</arg>
</arguments>
<msg timestamp="20190113 23:09:38.158" level="INFO">create transport-service-profile</msg>
<status status="PASS" endtime="20190113 23:09:38.159" starttime="20190113 23:09:38.158"></status>
</kw>
<kw name="prov_transport_service_profile" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Puts an interface in shutdown mode</doc>
<arguments>
<arg>${device}</arg>
<arg>${transport_prf}</arg>
<arg>${vlan_list}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:38.165" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:38.362" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:09:38.363" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:09:38.363" starttime="20190113 23:09:38.162"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:38.366" starttime="20190113 23:09:38.365"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:38.367" starttime="20190113 23:09:38.161"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>transport-service-profile ${transport-service-profile}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:38.373" level="INFO">send session_command, cmd=transport-service-profile auto_TransVlan_4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:38.677" level="INFO">session_command result=transport-service-profile auto_TransVlan_4002
NGPON2X4(config-transport-service-profile-auto_TransVlan_4002)</msg>
<msg timestamp="20190113 23:09:38.678" level="INFO">${res} = transport-service-profile auto_TransVlan_4002
NGPON2X4(config-transport-service-profile-auto_TransVlan_4002)</msg>
<status status="PASS" endtime="20190113 23:09:38.678" starttime="20190113 23:09:38.371"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:38.681" starttime="20190113 23:09:38.680"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:38.682" starttime="20190113 23:09:38.368"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan-list ${vlan-list}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:38.687" level="INFO">send session_command, cmd=vlan-list 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:38.988" level="INFO">session_command result=vlan-list 4002
NGPON2X4(config-transport-service-profile-auto_TransVlan_4002)</msg>
<msg timestamp="20190113 23:09:38.989" level="INFO">${res} = vlan-list 4002
NGPON2X4(config-transport-service-profile-auto_TransVlan_4002)</msg>
<status status="PASS" endtime="20190113 23:09:38.989" starttime="20190113 23:09:38.685"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:38.992" starttime="20190113 23:09:38.991"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:38.992" starttime="20190113 23:09:38.683"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:38.998" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:39.194" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:09:39.195" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:09:39.195" starttime="20190113 23:09:38.996"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:39.198" starttime="20190113 23:09:39.197"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:39.198" starttime="20190113 23:09:38.994"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:39.200" starttime="20190113 23:09:38.159"></status>
</kw>
<kw name="service_point_add_transport_profile" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: add transport_profile to service_point interface (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${service_point}</arg>
<arg>${transport_prf}</arg>
</arguments>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>'lag'=='${service_model.${service_point}.type}'</arg>
<arg>prov_interface</arg>
<arg>${device}</arg>
<arg>lag</arg>
<arg>${service_model.${service_point}.name}</arg>
<arg>transport-service-profile=${transport_prf}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:39.204" starttime="20190113 23:09:39.203"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add transport-service-profile to interface</arg>
</arguments>
<msg timestamp="20190113 23:09:39.205" level="INFO">add transport-service-profile to interface</msg>
<status status="PASS" endtime="20190113 23:09:39.205" starttime="20190113 23:09:39.204"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${service_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 23:09:39.209" level="INFO">${port} = 1/2/x2</msg>
<status status="PASS" endtime="20190113 23:09:39.209" starttime="20190113 23:09:39.207"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** provision port ${port} transport-service-profile ******</arg>
</arguments>
<msg timestamp="20190113 23:09:39.210" level="INFO">****** provision port 1/2/x2 transport-service-profile ******</msg>
<status status="PASS" endtime="20190113 23:09:39.210" starttime="20190113 23:09:39.209"></status>
</kw>
<kw name="prov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>transport-service-profile=${transport_prf}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:39.217" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:39.417" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:09:39.418" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:09:39.418" starttime="20190113 23:09:39.214"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:39.421" starttime="20190113 23:09:39.420"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:39.421" starttime="20190113 23:09:39.213"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:39.427" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:39.652" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:09:39.653" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:09:39.653" starttime="20190113 23:09:39.424"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:39.656" starttime="20190113 23:09:39.655"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:39.657" starttime="20190113 23:09:39.422"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${switchport}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>switchport ${switchport}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:39.659" starttime="20190113 23:09:39.658"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${interface_role}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>role ${interface_role}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:39.661" starttime="20190113 23:09:39.660"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:39.662" starttime="20190113 23:09:39.661"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:09:39.668" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:09:39.668" starttime="20190113 23:09:39.667"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = transport-service-profile">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:09:39.671" level="INFO">${value} = auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 23:09:39.671" starttime="20190113 23:09:39.670"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:09:39.673" level="INFO">${result_string} =  transport-service-profile auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 23:09:39.673" starttime="20190113 23:09:39.672"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:39.673" starttime="20190113 23:09:39.669"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:39.673" starttime="20190113 23:09:39.668"></status>
</kw>
<msg timestamp="20190113 23:09:39.674" level="INFO">${cmd_string} =  transport-service-profile auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 23:09:39.674" starttime="20190113 23:09:39.665"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:39.680" level="INFO">send session_command, cmd= transport-service-profile auto_TransVlan_4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:40.094" level="INFO">session_command result= transport-service-profile auto_TransVlan_4002
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:09:40.094" level="INFO">${res} =  transport-service-profile auto_TransVlan_4002
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:09:40.094" starttime="20190113 23:09:39.678"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:40.097" starttime="20190113 23:09:40.096"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:40.098" starttime="20190113 23:09:39.676"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:40.106" starttime="20190113 23:09:39.675"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:40.124" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:40.338" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:09:40.338" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:09:40.339" starttime="20190113 23:09:40.117"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:40.341" starttime="20190113 23:09:40.340"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:40.342" starttime="20190113 23:09:40.114"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:40.344" starttime="20190113 23:09:39.211"></status>
</kw>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ${port_type} ${port_name} ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>ethernet</arg>
<arg>${port}</arg>
<arg>transport-service-profile=${transport_prf}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:40.362" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x2 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:42.054" level="INFO">session_command result=show running-config interface ethernet 1/2/x2 
interface ethernet 1/2/x2
 no shutdown
 role                      inni
 transport-service-profile auto_TransVlan_4002
!
NGPON2X4</msg>
<msg timestamp="20190113 23:09:42.054" level="INFO">${res} = show running-config interface ethernet 1/2/x2 
interface ethernet 1/2/x2
 no shutdown
 role                      inni
 transport-service-profile auto_TransVlan_4002
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:09:42.054" starttime="20190113 23:09:40.358"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:42.057" starttime="20190113 23:09:42.056"></status>
</kw>
<msg timestamp="20190113 23:09:42.058" level="INFO">${res} = show running-config interface ethernet 1/2/x2 
interface ethernet 1/2/x2
 no shutdown
 role                      inni
 transport-service-profile auto_TransVlan_4002
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:09:42.058" starttime="20190113 23:09:40.357"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 23:09:42.060" level="INFO">@{list_key} = [ transport-service-profile ]</msg>
<status status="PASS" endtime="20190113 23:09:42.060" starttime="20190113 23:09:42.059"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<kw type="foritem" name="${check_item} = transport-service-profile">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 23:09:42.063" level="INFO">${exp_value} = auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 23:09:42.063" starttime="20190113 23:09:42.062"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:42.065" starttime="20190113 23:09:42.064"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:42.066" starttime="20190113 23:09:42.061"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:42.066" starttime="20190113 23:09:42.061"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:42.067" starttime="20190113 23:09:40.354"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:42.068" starttime="20190113 23:09:39.207"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:42.069" starttime="20190113 23:09:39.206"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:42.071" starttime="20190113 23:09:39.201"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:42.073" starttime="20190113 23:09:38.153"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:42.074" starttime="20190113 23:09:38.152"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:42.076" starttime="20190113 23:09:38.145"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>subscriber_point_operation for subscriber side</arg>
</arguments>
<msg timestamp="20190113 23:09:42.080" level="INFO">subscriber_point_operation for subscriber side</msg>
<status status="PASS" endtime="20190113 23:09:42.081" starttime="20190113 23:09:42.079"></status>
</kw>
<kw name="subscriber_point_prov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision for subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** subscriber service provision for ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:09:42.084" level="INFO">****** subscriber service provision for subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:09:42.085" starttime="20190113 23:09:42.083"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:09:42.086" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:09:42.087" starttime="20190113 23:09:42.085"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>subscriber_point_${service_model.${subscriber_point}.type}_prov</arg>
<arg>${device}</arg>
<arg>${subscriber_point}</arg>
</arguments>
<kw name="subscriber_point_eth_prov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: ethernet port subscriber provision (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${subscriber_point}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] ethernet port subscriber provision for ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:09:42.091" level="INFO">****** [eutA] ethernet port subscriber provision for subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:09:42.091" starttime="20190113 23:09:42.090"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${subscriber_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 23:09:42.095" level="INFO">${port} = 1/2/x3</msg>
<status status="PASS" endtime="20190113 23:09:42.095" starttime="20190113 23:09:42.093"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** provision port ${port} role and parameter ******</arg>
</arguments>
<msg timestamp="20190113 23:09:42.096" level="INFO">****** provision port 1/2/x3 role and parameter ******</msg>
<status status="PASS" endtime="20190113 23:09:42.097" starttime="20190113 23:09:42.096"></status>
</kw>
<kw name="prov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_role}</arg>
<arg>ENABLED</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:42.103" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:42.292" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:09:42.293" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:09:42.293" starttime="20190113 23:09:42.101"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:42.296" starttime="20190113 23:09:42.295"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:42.297" starttime="20190113 23:09:42.099"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:42.302" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:42.535" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:09:42.535" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:09:42.535" starttime="20190113 23:09:42.300"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:42.542" starttime="20190113 23:09:42.541"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:42.542" starttime="20190113 23:09:42.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${switchport}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>switchport ${switchport}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>switchport ${switchport}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:42.549" level="INFO">send session_command, cmd=switchport ENABLED, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:42.849" level="INFO">session_command result=switchport ENABLED
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:09:42.849" level="INFO">${res} = switchport ENABLED
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:09:42.849" starttime="20190113 23:09:42.547"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:42.853" starttime="20190113 23:09:42.851"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:42.853" starttime="20190113 23:09:42.545"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:42.854" starttime="20190113 23:09:42.544"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${interface_role}"!="${EMPTY}"</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>role ${interface_role}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>role ${interface_role}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:42.862" level="INFO">send session_command, cmd=role uni, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:43.626" level="INFO">session_command result=role uni
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:09:43.626" level="INFO">${res} = role uni
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:09:43.626" starttime="20190113 23:09:42.859"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:43.629" starttime="20190113 23:09:43.628"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:43.630" starttime="20190113 23:09:42.857"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:43.631" starttime="20190113 23:09:42.856"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:43.634" starttime="20190113 23:09:43.632"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:09:43.641" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:09:43.641" starttime="20190113 23:09:43.640"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 23:09:43.642" starttime="20190113 23:09:43.642"></status>
</kw>
<msg timestamp="20190113 23:09:43.643" level="INFO">${cmd_string} = </msg>
<status status="PASS" endtime="20190113 23:09:43.643" starttime="20190113 23:09:43.638"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:43.645" starttime="20190113 23:09:43.644"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:43.650" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:43.847" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:09:43.848" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:09:43.848" starttime="20190113 23:09:43.647"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:43.851" starttime="20190113 23:09:43.850"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:43.852" starttime="20190113 23:09:43.646"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:43.853" starttime="20190113 23:09:42.097"></status>
</kw>
<kw name="no_shutdown_port" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Puts an interface in shutdown mode</doc>
<arguments>
<arg>${device}</arg>
<arg>ethernet</arg>
<arg>${port}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:43.863" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:44.066" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:09:44.067" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:09:44.067" starttime="20190113 23:09:43.860"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:44.070" starttime="20190113 23:09:44.069"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:44.071" starttime="20190113 23:09:43.858"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port-type} ${port}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:44.077" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:44.285" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:09:44.285" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:09:44.285" starttime="20190113 23:09:44.074"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:44.288" starttime="20190113 23:09:44.287"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:44.288" starttime="20190113 23:09:44.072"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no shutdown</arg>
<arg>30</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:44.293" level="INFO">send session_command, cmd=no shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:45.040" level="INFO">session_command result=no shutdown
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:09:45.041" level="INFO">${res} = no shutdown
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:09:45.041" starttime="20190113 23:09:44.291"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:45.044" starttime="20190113 23:09:45.043"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:45.045" starttime="20190113 23:09:44.290"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:45.052" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:45.253" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:09:45.253" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:09:45.253" starttime="20190113 23:09:45.049"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:45.256" starttime="20190113 23:09:45.255"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:45.257" starttime="20190113 23:09:45.047"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:45.258" starttime="20190113 23:09:43.855"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:45.260" starttime="20190113 23:09:42.093"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:45.261" starttime="20190113 23:09:42.092"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:45.262" starttime="20190113 23:09:42.089"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:45.263" starttime="20190113 23:09:42.087"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:45.266" starttime="20190113 23:09:42.082"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:45.267" starttime="20190113 23:09:27.371"></status>
</kw>
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/Policy_Map/testcase/tc_add_cevlan_tag.robot" id="s1-s1-s1-s1-s1-s1-s1-s1" name="Tc Add Cevlan Tag">
<test id="s1-s1-s1-s1-s1-s1-s1-s1-t1" name="tc_add_cevlan_tag">
<kw type="setup" name="case setup">
<doc>setup</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:1 create a class-map to match untag in flow 1</arg>
</arguments>
<msg timestamp="20190113 23:09:45.586" level="INFO">STEP:1 create a class-map to match untag in flow 1</msg>
<status status="PASS" endtime="20190113 23:09:45.586" starttime="20190113 23:09:45.585"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:2 create a policy-map to bind the class-map and add cevlan tag x</arg>
</arguments>
<msg timestamp="20190113 23:09:45.587" level="INFO">STEP:2 create a policy-map to bind the class-map and add cevlan tag x</msg>
<status status="PASS" endtime="20190113 23:09:45.588" starttime="20190113 23:09:45.587"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:3 add eth-port1 to s-tag with transport-service-profile (done in suite_setup)</arg>
</arguments>
<msg timestamp="20190113 23:09:45.589" level="INFO">STEP:3 add eth-port1 to s-tag with transport-service-profile (done in suite_setup)</msg>
<status status="PASS" endtime="20190113 23:09:45.589" starttime="20190113 23:09:45.588"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:4 apply the s-tag and policy-map to ethernet uni</arg>
</arguments>
<msg timestamp="20190113 23:09:45.592" level="INFO">STEP:4 apply the s-tag and policy-map to ethernet uni</msg>
<status status="PASS" endtime="20190113 23:09:45.592" starttime="20190113 23:09:45.591"></status>
</kw>
<kw name="subscriber_point_add_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create l2 basic class-map and policy-map, add service to subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>untagged</arg>
<arg>${service_vlan}</arg>
<arg>add-ctag</arg>
<arg>${cvlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:09:45.604" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:09:45.604" starttime="20190113 23:09:45.603"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] create and add l2 basic service to ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:09:45.606" level="INFO">****** [eutA] create and add l2 basic service to subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:09:45.606" starttime="20190113 23:09:45.605"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:45.611" starttime="20190113 23:09:45.610"></status>
</kw>
<msg timestamp="20190113 23:09:45.612" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 23:09:45.612" starttime="20190113 23:09:45.609"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 23:09:45.614" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 23:09:45.614" starttime="20190113 23:09:45.613"></status>
</kw>
<msg timestamp="20190113 23:09:45.615" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 23:09:45.615" starttime="20190113 23:09:45.607"></status>
</kw>
<kw name="l2_setting_prov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${ctag_action}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan_action}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<assign>
<var>&amp;{dict_prf}</var>
</assign>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] add l2 basic service to ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:09:45.627" level="INFO">****** [eutA] add l2 basic service to ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 23:09:45.627" starttime="20190113 23:09:45.626"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 23:09:45.629" level="INFO">${class_map} = auto_ClassMap_vuntagged</msg>
<status status="PASS" endtime="20190113 23:09:45.629" starttime="20190113 23:09:45.628"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 23:09:45.631" level="INFO">${policy_map} = auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 23:09:45.632" starttime="20190113 23:09:45.630"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>classmap=${class_map}</arg>
<arg>policymap=${policy_map}</arg>
</arguments>
<assign>
<var>&amp;{dic_prf}</var>
</assign>
<msg timestamp="20190113 23:09:45.634" level="INFO">&amp;{dic_prf} = { classmap=auto_ClassMap_vuntagged | policymap=auto_PolicyMap_v1000 }</msg>
<status status="PASS" endtime="20190113 23:09:45.634" starttime="20190113 23:09:45.632"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create class-map</arg>
</arguments>
<msg timestamp="20190113 23:09:45.635" level="INFO">create class-map</msg>
<status status="PASS" endtime="20190113 23:09:45.636" starttime="20190113 23:09:45.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'untagged'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>untagged=${EMPTY}</arg>
<arg>ELSE IF</arg>
<arg>'any'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>any=${EMPTY}</arg>
<arg>ELSE</arg>
<arg>create dictionary</arg>
<arg>vlan=${match_vlan}</arg>
</arguments>
<assign>
<var>&amp;{dict_match_rule}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>untagged=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:45.639" starttime="20190113 23:09:45.638"></status>
</kw>
<msg timestamp="20190113 23:09:45.640" level="INFO">&amp;{dict_match_rule} = { untagged= }</msg>
<status status="PASS" endtime="20190113 23:09:45.640" starttime="20190113 23:09:45.636"></status>
</kw>
<kw name="prov_class_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision class-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map}</arg>
<arg>ethernet</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>1</arg>
<arg>&amp;{dict_match_rule}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:09:45.647" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:45.921" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:09:45.921" starttime="20190113 23:09:45.643"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ${class_map_type} ${class_map_name}</arg>
</arguments>
<msg timestamp="20190113 23:09:45.927" level="INFO">send session_command, cmd=class-map ethernet auto_ClassMap_vuntagged, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:46.437" level="INFO">session_command result=class-map ethernet auto_ClassMap_vuntagged
NGPON2X4(config-ethernet-auto_ClassMap_vuntagged)</msg>
<status status="PASS" endtime="20190113 23:09:46.438" starttime="20190113 23:09:45.924"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${flow_type} ${flow_index}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:46.444" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:46.808" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:09:46.809" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:09:46.809" starttime="20190113 23:09:46.442"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:46.812" starttime="20190113 23:09:46.811"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:46.813" starttime="20190113 23:09:46.440"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:09:46.822" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:09:46.822" starttime="20190113 23:09:46.821"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = untagged">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:09:46.827" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190113 23:09:46.827" starttime="20190113 23:09:46.825"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:09:46.829" level="INFO">${result_string} =  untagged </msg>
<status status="PASS" endtime="20190113 23:09:46.829" starttime="20190113 23:09:46.827"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:46.829" starttime="20190113 23:09:46.824"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:46.830" starttime="20190113 23:09:46.823"></status>
</kw>
<msg timestamp="20190113 23:09:46.830" level="INFO">${cmd_string} =  untagged </msg>
<status status="PASS" endtime="20190113 23:09:46.831" starttime="20190113 23:09:46.818"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>rule ${rule_index} match ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:46.837" level="INFO">send session_command, cmd=rule 1 match  untagged , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:47.237" level="INFO">session_command result=rule 1 match  untagged 
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:09:47.238" level="INFO">${res} = rule 1 match  untagged 
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:09:47.238" starttime="20190113 23:09:46.834"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:47.241" starttime="20190113 23:09:47.240"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:47.242" starttime="20190113 23:09:46.832"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:09:47.245" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:47.498" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:09:47.499" starttime="20190113 23:09:47.243"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:47.500" starttime="20190113 23:09:45.641"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create policy-map</arg>
</arguments>
<msg timestamp="20190113 23:09:47.503" level="INFO">create policy-map</msg>
<status status="PASS" endtime="20190113 23:09:47.503" starttime="20190113 23:09:47.502"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ctag_action}'=='add-ctag' or '${ctag_action}'=='add-cevlan-tag' or '${cevlan_action}'=='add-cevlan-tag'</arg>
<arg>release_cmd_adapter</arg>
<arg>${device}</arg>
<arg>${prov_policy_map_config_add_tag}</arg>
<arg>ELSE</arg>
<arg>set variable</arg>
<arg>${ctag_action}</arg>
</arguments>
<assign>
<var>${ctag_action}</var>
</assign>
<kw name="release_cmd_adapter" library="release_adapter">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: cmd adapter in different release</doc>
<arguments>
<arg>${device}</arg>
<arg>${prov_policy_map_config_add_tag}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>if no 'release' item in topo.yaml set it to DEFAULT</arg>
</arguments>
<msg timestamp="20190113 23:09:47.511" level="INFO">if no 'release' item in topo.yaml set it to DEFAULT</msg>
<status status="PASS" endtime="20190113 23:09:47.511" starttime="20190113 23:09:47.510"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${DEVICES.${device}}</arg>
<arg>release</arg>
</arguments>
<assign>
<var>${passed}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${DEVICES.${device}}</arg>
<arg>release</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:47.514" starttime="20190113 23:09:47.513"></status>
</kw>
<msg timestamp="20190113 23:09:47.514" level="INFO">${passed} = True</msg>
<status status="PASS" endtime="20190113 23:09:47.514" starttime="20190113 23:09:47.512"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${passed}</arg>
<arg>${DEVICES.${device}.release}</arg>
<arg>DEFAULT</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 23:09:47.516" level="INFO">${release} = AXOS_19_1</msg>
<status status="PASS" endtime="20190113 23:09:47.517" starttime="20190113 23:09:47.515"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>get release ${release}</arg>
</arguments>
<msg timestamp="20190113 23:09:47.518" level="INFO">get release AXOS_19_1</msg>
<status status="PASS" endtime="20190113 23:09:47.518" starttime="20190113 23:09:47.517"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>set release to 'DEFAULT' if release is not key in cmd_key dictionary</arg>
</arguments>
<msg timestamp="20190113 23:09:47.520" level="INFO">set release to 'DEFAULT' if release is not key in cmd_key dictionary</msg>
<status status="PASS" endtime="20190113 23:09:47.520" starttime="20190113 23:09:47.519"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${cmd_param}</arg>
<arg>${release}</arg>
</arguments>
<assign>
<var>${passed}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${cmd_param}</arg>
<arg>${release}</arg>
</arguments>
<msg timestamp="20190113 23:09:47.523" level="FAIL">Dictionary does not contain key 'AXOS_19_1'.</msg>
<msg timestamp="20190113 23:09:47.523" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20190113 23:09:47.523" starttime="20190113 23:09:47.522"></status>
</kw>
<msg timestamp="20190113 23:09:47.524" level="INFO">${passed} = False</msg>
<status status="PASS" endtime="20190113 23:09:47.524" starttime="20190113 23:09:47.521"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${passed}</arg>
<arg>${release}</arg>
<arg>DEFAULT</arg>
</arguments>
<assign>
<var>${release}</var>
</assign>
<msg timestamp="20190113 23:09:47.526" level="INFO">${release} = DEFAULT</msg>
<status status="PASS" endtime="20190113 23:09:47.526" starttime="20190113 23:09:47.525"></status>
</kw>
<kw name="Log List" library="Collections">
<doc>Logs the length and contents of the ``list`` using given ``level``.</doc>
<arguments>
<arg>${cmd_var_item}</arg>
</arguments>
<msg timestamp="20190113 23:09:47.527" level="INFO">List is empty.</msg>
<status status="PASS" endtime="20190113 23:09:47.528" starttime="20190113 23:09:47.527"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=','</arg>
<arg>@{cmd_var_item}</arg>
</arguments>
<assign>
<var>${item}</var>
</assign>
<msg timestamp="20190113 23:09:47.529" level="INFO">${item} = </msg>
<status status="PASS" endtime="20190113 23:09:47.530" starttime="20190113 23:09:47.528"></status>
</kw>
<kw name="Log Dictionary" library="Collections">
<doc>Logs the size and contents of the ``dictionary`` using given ``level``.</doc>
<arguments>
<arg>${cmd_param}</arg>
</arguments>
<msg timestamp="20190113 23:09:47.531" level="INFO">Dictionary size is 2 and it contains following items:
AXOS_4_1: add-ctag
DEFAULT: add-cevlan-tag</msg>
<status status="PASS" endtime="20190113 23:09:47.531" starttime="20190113 23:09:47.530"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${item}"=="${EMPTY}"</arg>
<arg>Set Variable</arg>
<arg>&amp;{cmd_param}[${release}]</arg>
<arg>ELSE</arg>
<arg>evaluate</arg>
<arg>'&amp;{cmd_param}[${release}]'%('${item}')</arg>
</arguments>
<assign>
<var>${cmd_str}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>&amp;{cmd_param}[${release}]</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:47.534" starttime="20190113 23:09:47.533"></status>
</kw>
<msg timestamp="20190113 23:09:47.535" level="INFO">${cmd_str} = add-cevlan-tag</msg>
<status status="PASS" endtime="20190113 23:09:47.535" starttime="20190113 23:09:47.532"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>return string is "${cmd_str}" for release ${release}</arg>
</arguments>
<msg timestamp="20190113 23:09:47.536" level="INFO">return string is "add-cevlan-tag" for release DEFAULT</msg>
<status status="PASS" endtime="20190113 23:09:47.536" starttime="20190113 23:09:47.535"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:47.537" starttime="20190113 23:09:47.509"></status>
</kw>
<msg timestamp="20190113 23:09:47.537" level="INFO">${ctag_action} = add-cevlan-tag</msg>
<status status="PASS" endtime="20190113 23:09:47.537" starttime="20190113 23:09:47.504"></status>
</kw>
<kw name="prov_policy_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision policy-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>${ctag_action}=${cvlan}</arg>
<arg>${cevlan_action}=${cevlan}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:09:47.542" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:47.813" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:09:47.814" starttime="20190113 23:09:47.540"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<msg timestamp="20190113 23:09:47.817" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v1000, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:48.142" level="INFO">session_command result=policy-map auto_PolicyMap_v1000
NGPON2X4(config-policy-map-auto_PolicyMap_v1000)</msg>
<status status="PASS" endtime="20190113 23:09:48.143" starttime="20190113 23:09:47.815"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:48.149" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_vuntagged, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:48.546" level="INFO">session_command result=class-map-ethernet auto_ClassMap_vuntagged
NGPON2X4(config-class-map-ethernet-auto_ClassMap_vuntagged)</msg>
<msg timestamp="20190113 23:09:48.546" level="INFO">${res} = class-map-ethernet auto_ClassMap_vuntagged
NGPON2X4(config-class-map-ethernet-auto_ClassMap_vuntagged)</msg>
<status status="PASS" endtime="20190113 23:09:48.546" starttime="20190113 23:09:48.146"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:48.550" starttime="20190113 23:09:48.548"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:48.550" starttime="20190113 23:09:48.144"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:48.557" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:48.923" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:09:48.923" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:09:48.923" starttime="20190113 23:09:48.555"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:48.927" starttime="20190113 23:09:48.926"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:48.927" starttime="20190113 23:09:48.553"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:48.929" starttime="20190113 23:09:48.552"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:09:48.937" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:09:48.937" starttime="20190113 23:09:48.935"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = add-cevlan-tag">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:09:48.941" level="INFO">${value} = 1000</msg>
<status status="PASS" endtime="20190113 23:09:48.941" starttime="20190113 23:09:48.940"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:09:48.943" level="INFO">${result_string} =  add-cevlan-tag 1000</msg>
<status status="PASS" endtime="20190113 23:09:48.943" starttime="20190113 23:09:48.942"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:48.943" starttime="20190113 23:09:48.939"></status>
</kw>
<kw type="foritem" name="${key} = ">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:09:48.945" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190113 23:09:48.946" starttime="20190113 23:09:48.944"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:09:48.947" level="INFO">${result_string} =  add-cevlan-tag 1000  </msg>
<status status="PASS" endtime="20190113 23:09:48.947" starttime="20190113 23:09:48.946"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:48.948" starttime="20190113 23:09:48.943"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:48.948" starttime="20190113 23:09:48.938"></status>
</kw>
<msg timestamp="20190113 23:09:48.948" level="INFO">${cmd_string} =  add-cevlan-tag 1000  </msg>
<status status="PASS" endtime="20190113 23:09:48.949" starttime="20190113 23:09:48.933"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:48.956" level="INFO">send session_command, cmd= add-cevlan-tag 1000  , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:49.319" level="INFO">session_command result= add-cevlan-tag 1000  
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:09:49.320" level="INFO">${res} =  add-cevlan-tag 1000  
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:09:49.320" starttime="20190113 23:09:48.953"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:49.323" starttime="20190113 23:09:49.322"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:49.323" starttime="20190113 23:09:48.951"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:49.325" starttime="20190113 23:09:48.949"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:09:49.328" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:49.625" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:09:49.625" starttime="20190113 23:09:49.326"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:49.627" starttime="20190113 23:09:47.538"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add policy-map to interface</arg>
</arguments>
<msg timestamp="20190113 23:09:49.630" level="INFO">add policy-map to interface</msg>
<status status="PASS" endtime="20190113 23:09:49.630" starttime="20190113 23:09:49.629"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:49.643" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:51.390" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 23:09:51.390" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:09:51.390" starttime="20190113 23:09:49.640"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:51.397" starttime="20190113 23:09:51.396"></status>
</kw>
<msg timestamp="20190113 23:09:51.398" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:09:51.398" starttime="20190113 23:09:49.638"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 23:09:51.401" level="INFO">@{list_key} = [ ]</msg>
<status status="PASS" endtime="20190113 23:09:51.401" starttime="20190113 23:09:51.400"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<status status="PASS" endtime="20190113 23:09:51.402" starttime="20190113 23:09:51.401"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:51.402" starttime="20190113 23:09:49.636"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:51.404" starttime="20190113 23:09:49.631"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>no=shutdown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:09:51.409" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map= ******</msg>
<status status="PASS" endtime="20190113 23:09:51.410" starttime="20190113 23:09:51.408"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:09:51.413" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:51.671" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:09:51.672" starttime="20190113 23:09:51.410"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:51.677" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:51.974" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:09:51.974" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:09:51.974" starttime="20190113 23:09:51.675"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:51.977" starttime="20190113 23:09:51.976"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:51.978" starttime="20190113 23:09:51.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:51.986" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:52.853" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:09:52.854" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:09:52.854" starttime="20190113 23:09:51.984"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:52.858" starttime="20190113 23:09:52.856"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:52.858" starttime="20190113 23:09:51.982"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:52.860" starttime="20190113 23:09:51.980"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:52.864" starttime="20190113 23:09:52.862"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:52.866" starttime="20190113 23:09:52.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:52.868" starttime="20190113 23:09:52.867"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:09:52.876" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:09:52.876" starttime="20190113 23:09:52.875"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = no">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:09:52.880" level="INFO">${value} = shutdown</msg>
<status status="PASS" endtime="20190113 23:09:52.881" starttime="20190113 23:09:52.879"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:09:52.883" level="INFO">${result_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 23:09:52.883" starttime="20190113 23:09:52.881"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:52.883" starttime="20190113 23:09:52.878"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:52.884" starttime="20190113 23:09:52.877"></status>
</kw>
<msg timestamp="20190113 23:09:52.884" level="INFO">${cmd_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 23:09:52.884" starttime="20190113 23:09:52.873"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:52.892" level="INFO">send session_command, cmd= no shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:53.320" level="INFO">session_command result= no shutdown
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:09:53.321" level="INFO">${res} =  no shutdown
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:09:53.321" starttime="20190113 23:09:52.890"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:53.324" starttime="20190113 23:09:53.323"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:53.324" starttime="20190113 23:09:52.887"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:53.325" starttime="20190113 23:09:52.886"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:09:53.329" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:53.633" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:09:53.633" starttime="20190113 23:09:53.327"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:53.635" starttime="20190113 23:09:51.406"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:09:53.640" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map=auto_PolicyMap_v1000 ******</msg>
<status status="PASS" endtime="20190113 23:09:53.641" starttime="20190113 23:09:53.639"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:09:53.643" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:53.912" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:09:53.912" starttime="20190113 23:09:53.641"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:53.919" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:54.223" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:09:54.224" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:09:54.224" starttime="20190113 23:09:53.917"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:54.227" starttime="20190113 23:09:54.226"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:54.227" starttime="20190113 23:09:53.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:54.234" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:54.521" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:09:54.522" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:09:54.522" starttime="20190113 23:09:54.232"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:54.525" starttime="20190113 23:09:54.524"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:54.525" starttime="20190113 23:09:54.230"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:54.526" starttime="20190113 23:09:54.229"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:54.533" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v1000, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:55.099" level="INFO">session_command result=policy-map auto_PolicyMap_v1000
NGPON2X4(config-policy-map-auto_PolicyMap_v1000)</msg>
<msg timestamp="20190113 23:09:55.100" level="INFO">${res} = policy-map auto_PolicyMap_v1000
NGPON2X4(config-policy-map-auto_PolicyMap_v1000)</msg>
<status status="PASS" endtime="20190113 23:09:55.100" starttime="20190113 23:09:54.531"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:55.103" starttime="20190113 23:09:55.102"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:55.104" starttime="20190113 23:09:54.529"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:55.105" starttime="20190113 23:09:54.528"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:55.113" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_vuntagged, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:55.380" level="INFO">session_command result=class-map-ethernet auto_ClassMap_vuntagged
NGPON2X4(config-class-map-ethernet-auto_ClassMap_vuntagged)</msg>
<msg timestamp="20190113 23:09:55.381" level="INFO">${res} = class-map-ethernet auto_ClassMap_vuntagged
NGPON2X4(config-class-map-ethernet-auto_ClassMap_vuntagged)</msg>
<status status="PASS" endtime="20190113 23:09:55.381" starttime="20190113 23:09:55.110"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:55.383" starttime="20190113 23:09:55.382"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:55.384" starttime="20190113 23:09:55.108"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:55.385" starttime="20190113 23:09:55.107"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:55.387" starttime="20190113 23:09:55.386"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:09:55.393" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:09:55.393" starttime="20190113 23:09:55.392"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 23:09:55.395" starttime="20190113 23:09:55.394"></status>
</kw>
<msg timestamp="20190113 23:09:55.395" level="INFO">${cmd_string} = </msg>
<status status="PASS" endtime="20190113 23:09:55.395" starttime="20190113 23:09:55.391"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:55.397" starttime="20190113 23:09:55.396"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:09:55.399" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:55.703" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:09:55.704" starttime="20190113 23:09:55.397"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:55.706" starttime="20190113 23:09:53.637"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add multicast-profile to interface</arg>
</arguments>
<msg timestamp="20190113 23:09:55.709" level="INFO">add multicast-profile to interface</msg>
<status status="PASS" endtime="20190113 23:09:55.709" starttime="20190113 23:09:55.708"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>prov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:55.712" starttime="20190113 23:09:55.710"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:09:55.713" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:09:55.713" starttime="20190113 23:09:55.712"></status>
</kw>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>policy-map=${policy_map}</arg>
<arg>class-map-ethernet=${class_map}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:09:55.724" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:09:57.702" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v1000
   class-map-ethernet auto_ClassMap_vuntagged
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 23:09:57.702" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v1000
   class-map-ethernet auto_ClassMap_vuntagged
  ...</msg>
<status status="PASS" endtime="20190113 23:09:57.702" starttime="20190113 23:09:55.721"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:57.706" starttime="20190113 23:09:57.705"></status>
</kw>
<msg timestamp="20190113 23:09:57.706" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v1000
   class-map-ethernet auto_ClassMap_vuntagged
  ...</msg>
<status status="PASS" endtime="20190113 23:09:57.706" starttime="20190113 23:09:55.719"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 23:09:57.709" level="INFO">@{list_key} = [ class-map-ethernet | policy-map ]</msg>
<status status="PASS" endtime="20190113 23:09:57.709" starttime="20190113 23:09:57.708"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<kw type="foritem" name="${check_item} = class-map-ethernet">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 23:09:57.712" level="INFO">${exp_value} = auto_ClassMap_vuntagged</msg>
<status status="PASS" endtime="20190113 23:09:57.712" starttime="20190113 23:09:57.711"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:57.714" starttime="20190113 23:09:57.713"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:57.714" starttime="20190113 23:09:57.710"></status>
</kw>
<kw type="foritem" name="${check_item} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 23:09:57.716" level="INFO">${exp_value} = auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 23:09:57.716" starttime="20190113 23:09:57.715"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:57.718" starttime="20190113 23:09:57.717"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:57.718" starttime="20190113 23:09:57.714"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:57.719" starttime="20190113 23:09:57.709"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:57.719" starttime="20190113 23:09:55.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:57.722" starttime="20190113 23:09:57.721"></status>
</kw>
<msg timestamp="20190113 23:09:57.723" level="INFO">&amp;{dict_prf} = { classmap=auto_ClassMap_vuntagged | policymap=auto_PolicyMap_v1000 }</msg>
<status status="PASS" endtime="20190113 23:09:57.723" starttime="20190113 23:09:45.623"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:57.724" starttime="20190113 23:09:45.600"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:57.725" starttime="20190113 23:09:45.584"></status>
</kw>
<kw name="template_bidirection_raw_traffic_and_check" library="template_bidirection_raw_traffic_and_check">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>create bidirection raw traffic, send traffic and check packet loss, analyze packet with filter</doc>
<arguments>
<arg>${tg_us_param}</arg>
<arg>${tg_ds_param}</arg>
<arg>${us_traffic_filter}</arg>
<arg>${ds_traffic_filter}</arg>
<arg>${traffic_loss_rate}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create upstream traffic</arg>
</arguments>
<msg timestamp="20190113 23:09:57.834" level="INFO">create upstream traffic</msg>
<status status="PASS" endtime="20190113 23:09:57.834" starttime="20190113 23:09:57.833"></status>
</kw>
<kw name="create_raw_traffic_udp" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create bound traffic with udp head on traffic generater</doc>
<arguments>
<arg>tg1</arg>
<arg>upstream</arg>
<arg>service_p1</arg>
<arg>subscriber_p1</arg>
<arg>&amp;{tg_us_param}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${tg} port ${src_port} to ${dst_port}] create raw traffic with mac_dst:${mac_dst} mac_src:${mac_src} ip_dst:${ip_dst} ip_src:${ip_src} ovlan:${ovlan} ivlan:${ivlan}******</arg>
</arguments>
<msg timestamp="20190113 23:09:57.864" level="INFO">****** [tg1 port subscriber_p1 to service_p1] create raw traffic with mac_dst:00:00:00:67:00:01 mac_src:00:00:00:11:11:11 ip_dst:10.1.67.100 ip_src:10.1.67.10 ovlan: ivlan:******</msg>
<status status="PASS" endtime="20190113 23:09:57.864" starttime="20190113 23:09:57.863"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>mac_dst=${mac_dst}</arg>
<arg>mac_src=${mac_src}</arg>
<arg>l3_protocol=ipv4</arg>
<arg>ip_dst_addr=${ip_dst}</arg>
<arg>ip_src_addr=${ip_src}</arg>
<arg>l4_protocol=udp</arg>
<arg>udp_dst_port=${udp_dst_port}</arg>
<arg>udp_src_port=${udp_src_port}</arg>
<arg>length_mode=fixed</arg>
<arg>frame_size=${frame_size}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:57.867" starttime="20190113 23:09:57.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>evaluate</arg>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<assign>
<var>${rate_bps}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:57.870" starttime="20190113 23:09:57.869"></status>
</kw>
<msg timestamp="20190113 23:09:57.871" level="INFO">${rate_bps} = 10000000</msg>
<status status="PASS" endtime="20190113 23:09:57.871" starttime="20190113 23:09:57.868"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'!='${rate_pps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_pps=${rate_pps}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:09:57.874" starttime="20190113 23:09:57.873"></status>
</kw>
<status status="PASS" endtime="20190113 23:09:57.875" starttime="20190113 23:09:57.871"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'=='${ovlan}'</arg>
<arg>TG Create Untagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'=='${ivlan}'</arg>
<arg>TG Create Single Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE</arg>
<arg>TG Create Double Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ivlan}</arg>
<arg>${ivlan_pbit}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<kw name="Tg Create Untagged Stream On Port" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Create untag stream by name on traffic generator port.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<msg timestamp="20190113 23:10:28.706" level="INFO">11/9 11/8
CsHLT::traffic_conf create 11/8 { -mac_src 00:00:00:11:11:11 -l4_protocol udp -name upstream -ip_dst_addr 10.1.67.100 -mac_dst 00:00:00:67:00:01 -udp_src_port 6000 -ip_src_addr 10.1.67.10 -length_mode fixed -rate_bps 10000000 -frame_size 512 -l3_protocol ipv4 -udp_dst_port 6000}
create traffic is in process...
create traffic is done!
SUCCESS
streamblock1</msg>
<status status="PASS" endtime="20190113 23:10:28.707" starttime="20190113 23:09:57.877"></status>
</kw>
<status status="PASS" endtime="20190113 23:10:28.708" starttime="20190113 23:09:57.875"></status>
</kw>
<status status="PASS" endtime="20190113 23:10:28.710" starttime="20190113 23:09:57.860"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create downstream traffic</arg>
</arguments>
<msg timestamp="20190113 23:10:28.713" level="INFO">create downstream traffic</msg>
<status status="PASS" endtime="20190113 23:10:28.714" starttime="20190113 23:10:28.712"></status>
</kw>
<kw name="create_raw_traffic_udp" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create bound traffic with udp head on traffic generater</doc>
<arguments>
<arg>tg1</arg>
<arg>downstream</arg>
<arg>subscriber_p1</arg>
<arg>service_p1</arg>
<arg>&amp;{tg_ds_param}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${tg} port ${src_port} to ${dst_port}] create raw traffic with mac_dst:${mac_dst} mac_src:${mac_src} ip_dst:${ip_dst} ip_src:${ip_src} ovlan:${ovlan} ivlan:${ivlan}******</arg>
</arguments>
<msg timestamp="20190113 23:10:28.736" level="INFO">****** [tg1 port service_p1 to subscriber_p1] create raw traffic with mac_dst:00:00:00:11:11:11 mac_src:00:00:00:67:00:01 ip_dst:10.1.67.10 ip_src:10.1.67.100 ovlan:4002 ivlan:1000******</msg>
<status status="PASS" endtime="20190113 23:10:28.737" starttime="20190113 23:10:28.735"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>mac_dst=${mac_dst}</arg>
<arg>mac_src=${mac_src}</arg>
<arg>l3_protocol=ipv4</arg>
<arg>ip_dst_addr=${ip_dst}</arg>
<arg>ip_src_addr=${ip_src}</arg>
<arg>l4_protocol=udp</arg>
<arg>udp_dst_port=${udp_dst_port}</arg>
<arg>udp_src_port=${udp_src_port}</arg>
<arg>length_mode=fixed</arg>
<arg>frame_size=${frame_size}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:10:28.739" starttime="20190113 23:10:28.737"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>evaluate</arg>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<assign>
<var>${rate_bps}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<status status="PASS" endtime="20190113 23:10:28.743" starttime="20190113 23:10:28.742"></status>
</kw>
<msg timestamp="20190113 23:10:28.743" level="INFO">${rate_bps} = 10000000</msg>
<status status="PASS" endtime="20190113 23:10:28.743" starttime="20190113 23:10:28.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'!='${rate_pps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_pps=${rate_pps}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:10:28.747" starttime="20190113 23:10:28.746"></status>
</kw>
<status status="PASS" endtime="20190113 23:10:28.747" starttime="20190113 23:10:28.744"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'=='${ovlan}'</arg>
<arg>TG Create Untagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'=='${ivlan}'</arg>
<arg>TG Create Single Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE</arg>
<arg>TG Create Double Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ivlan}</arg>
<arg>${ivlan_pbit}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<kw name="Tg Create Double Tagged Stream On Port" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Create double tag stream by name on traffic generator port.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ivlan}</arg>
<arg>${ivlan_pbit}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<msg timestamp="20190113 23:10:29.837" level="INFO">CsHLT::traffic_conf create 11/9 { -vlan_user_priority 0 -vlan_id_outer 4002 -mac_dst 00:00:00:11:11:11 -ip_dst_addr 10.1.67.10 -ip_src_addr 10.1.67.100 -frame_size 512 -l2_encap ethernet_ii_vlan -l3_protocol ipv4 -vlan_outer_user_priority 0 -udp_dst_port 6000 -vlan_id 1000 -mac_src 00:00:00:67:00:01 -l4_protocol udp -name downstream -length_mode fixed -udp_src_port 6000 -rate_bps 10000000}
create traffic is in process...
create traffic is done!
SUCCESS
streamblock2</msg>
<status status="PASS" endtime="20190113 23:10:29.838" starttime="20190113 23:10:28.749"></status>
</kw>
<status status="PASS" endtime="20190113 23:10:29.840" starttime="20190113 23:10:28.748"></status>
</kw>
<status status="PASS" endtime="20190113 23:10:29.842" starttime="20190113 23:10:28.732"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>send traffic and capture</arg>
</arguments>
<msg timestamp="20190113 23:10:29.846" level="INFO">send traffic and capture</msg>
<status status="PASS" endtime="20190113 23:10:29.846" starttime="20190113 23:10:29.844"></status>
</kw>
<kw name="Tg Clear Traffic Stats" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Clear Traffic statistics.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:10:36.903" starttime="20190113 23:10:29.847"></status>
</kw>
<kw name="start_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:start capture before start traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Config Packet Buffers" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Define how the buffers will be managed for packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<msg timestamp="20190113 23:10:36.959" level="INFO">[CsHLT::packetConfigBuffers port1 stop {}
stop capture buffer is in process...
response info: ====&gt; {status 1}
stop capture buffer is done!
SUCCESS
]</msg>
<status status="PASS" endtime="20190113 23:10:36.959" starttime="20190113 23:10:36.908"></status>
</kw>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>start</arg>
</arguments>
<status status="PASS" endtime="20190113 23:10:38.935" starttime="20190113 23:10:36.962"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after start_capture</arg>
</arguments>
<msg timestamp="20190113 23:10:38.941" level="INFO">wait 1s after start_capture</msg>
<status status="PASS" endtime="20190113 23:10:38.941" starttime="20190113 23:10:38.940"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:10:39.943" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:10:39.943" starttime="20190113 23:10:38.941"></status>
</kw>
<status status="PASS" endtime="20190113 23:10:39.944" starttime="20190113 23:10:36.906"></status>
</kw>
<kw name="start_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:start capture before start traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Config Packet Buffers" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Define how the buffers will be managed for packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<msg timestamp="20190113 23:10:39.994" level="INFO">[CsHLT::packetConfigBuffers port2 stop {}
stop capture buffer is in process...
response info: ====&gt; {status 1}
stop capture buffer is done!
SUCCESS
]</msg>
<status status="PASS" endtime="20190113 23:10:39.994" starttime="20190113 23:10:39.948"></status>
</kw>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>start</arg>
</arguments>
<status status="PASS" endtime="20190113 23:10:42.252" starttime="20190113 23:10:39.998"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after start_capture</arg>
</arguments>
<msg timestamp="20190113 23:10:42.254" level="INFO">wait 1s after start_capture</msg>
<status status="PASS" endtime="20190113 23:10:42.254" starttime="20190113 23:10:42.253"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:10:43.256" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:10:43.256" starttime="20190113 23:10:42.255"></status>
</kw>
<status status="PASS" endtime="20190113 23:10:43.257" starttime="20190113 23:10:39.947"></status>
</kw>
<kw name="Tg Start All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Start All the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:10:53.817" starttime="20190113 23:10:43.259"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${traffic_run_time}</arg>
<arg>Wait for traffic run</arg>
</arguments>
<msg timestamp="20190113 23:11:03.827" level="INFO">Slept 10 seconds</msg>
<msg timestamp="20190113 23:11:03.828" level="INFO">Wait for traffic run</msg>
<status status="PASS" endtime="20190113 23:11:03.828" starttime="20190113 23:10:53.826"></status>
</kw>
<kw name="Tg Stop All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Stop all the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:12.543" starttime="20190113 23:11:03.829"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${stc_wait_time}</arg>
<arg>wait for stc stop</arg>
</arguments>
<msg timestamp="20190113 23:11:17.549" level="INFO">Slept 5 seconds</msg>
<msg timestamp="20190113 23:11:17.550" level="INFO">wait for stc stop</msg>
<status status="PASS" endtime="20190113 23:11:17.550" starttime="20190113 23:11:12.546"></status>
</kw>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:19.157" starttime="20190113 23:11:17.552"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:11:19.159" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:11:19.160" starttime="20190113 23:11:19.158"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:11:20.161" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:11:20.162" starttime="20190113 23:11:19.160"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:20.162" starttime="20190113 23:11:17.551"></status>
</kw>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:22.468" starttime="20190113 23:11:20.166"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:11:22.472" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:11:22.472" starttime="20190113 23:11:22.470"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:11:23.474" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:11:23.475" starttime="20190113 23:11:22.473"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:23.475" starttime="20190113 23:11:20.164"></status>
</kw>
<kw name="Tg Verify Traffic Loss Rate For All Streams Is Within" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Verify the packages loss rate of all the created stream in traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>${traffic_loss_rate}</arg>
</arguments>
<msg timestamp="20190113 23:11:24.112" level="INFO">[CsHLT::print_stats 
printing stats...
#############################################
port1:
    stream:
        streamblock2:
            rx:
                misinserted_pkts: 0
                total_pkt_bytes: 15934968
                prbs_bit_errors: 0
                ipv4_outer_present: 0
                min_delay: 5.2575
                ipv6_outer_present: 0
                rx_sig_count: 31617
                max_delay: 6.1925
                avg_delay: 5.828769807382105
                duplicate_pkts: 0
                out_of_sequence_pkts: 0
                total_pkts: 31617
                rx_sig_rate: 0
                dropped_pkts: 77
                first_tstamp: 0.0
                udp_present: 1
                total_pkt_bit_rate: 0
                ipv4_present: 1
                min_pkt_length: 0
                last_tstamp: 0.0
                total_pkt_rate: 0
                max_pkt_length: 0
                ipv6_present: 0
                rx_port: 10.245.252.60-11-8 //11/8  10.245.252.60-11-8 //11/8 
                tcp_present: 0
                dropped_pkts_percent: 0.24294819208683033
            tx:
                total_pkt_bytes: 16227328
                total_pkt_rate: 0
                total_pkts: 31694
                ipv4_outer_present: 0
                udp_present: 1
                ipv6_present: 0
                total_pkt_bit_rate: 0
                ipv6_outer_present: 0
                tcp_present: 0
                ipv4_present: 1
status: 1
#############################################
SUCCESS
]
[CsHLT::print_stats 
printing stats...
#############################################
port2:
    stream:
        streamblock1:
            rx:
                misinserted_pkts: 0
                total_pkt_bytes: 16465280
                prbs_bit_errors: 0
                ipv4_outer_present: 0
                min_delay: 5.1925
                ipv6_outer_present: 0
                rx_sig_count: 31664
                max_delay: 6.025
                avg_delay: 5.745207964881254
                duplicate_pkts: 0
                out_of_sequence_pkts: 0
                total_pkts: 31664
                rx_sig_rate: 0
                dropped_pkts: 0
                first_tstamp: 0.0
                udp_present: 1
                total_pkt_bit_rate: 0
                ipv4_present: 1
                min_pkt_length: 0
                last_tstamp: 0.0
                total_pkt_rate: 0
                max_pkt_length: 0
                ipv6_present: 0
                rx_port: 10.245.252.60-11-9 //11/9  10.245.252.60-11-9 //11/9 
                tcp_present: 0
                dropped_pkts_percent: 0.0
            tx:
                total_pkt_bytes: 16211968
                total_pkt_rate: 0
                total_pkts: 31664
                ipv4_outer_present: 0
                udp_present: 1
                ipv6_present: 0
                total_pkt_bit_rate: 0
                ipv6_outer_present: 0
                tcp_present: 0
                ipv4_present: 1
status: 1
#############################################
SUCCESS
]</msg>
<msg timestamp="20190113 23:11:24.113" level="FAIL">ValueError: session(tg1): verify traffic loss within. failed (loss_rate: 0.00121531614003 percent: 0.001)</msg>
<msg timestamp="20190113 23:11:24.113" level="DEBUG">Traceback (most recent call last):
  File "/etc/barista/packages/caferobot/trafficgen/trafficgen.py", line 1458, in tg_verify_traffic_loss_rate_for_all_streams_is_Within
    result = _gen.verify_traffic_loss_within(rate)
  File "/etc/barista/packages/cafe/runner/decorators.py", line 80, in wrapper
    r = func(*args, **kwargs)
  File "/etc/barista/packages/cafe/app/driver/stc.py", line 809, in verify_traffic_loss_within
    raise ValueError("session(%s): verify traffic loss within. failed (loss_rate: %s percent: %s)" % (self.name, loss_rate, allowed_loss))</msg>
<status status="FAIL" endtime="20190113 23:11:24.113" starttime="20190113 23:11:23.477"></status>
</kw>
<kw type="teardown" name="traffic_teardown" library="template_bidirection_raw_traffic_and_check">
<doc>teardown</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>stop_capture</arg>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:25.514" starttime="20190113 23:11:24.118"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:11:25.517" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:11:25.517" starttime="20190113 23:11:25.516"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:11:26.518" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:11:26.519" starttime="20190113 23:11:25.517"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:26.520" starttime="20190113 23:11:24.117"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:26.521" starttime="20190113 23:11:24.116"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>stop_capture</arg>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:27.109" starttime="20190113 23:11:26.525"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:11:27.111" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:11:27.111" starttime="20190113 23:11:27.110"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:11:28.115" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:11:28.115" starttime="20190113 23:11:27.112"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:28.116" starttime="20190113 23:11:26.524"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:28.119" starttime="20190113 23:11:26.523"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Tg Stop All Traffic</arg>
<arg>tg1</arg>
</arguments>
<kw name="Tg Stop All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Stop all the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:35.894" starttime="20190113 23:11:28.121"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:35.904" starttime="20190113 23:11:28.120"></status>
</kw>
<kw name="Tg Delete All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Delete all the traffic in given traffic generator.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<msg timestamp="20190113 23:11:51.047" level="INFO">###############################
res is: CsHLT::traffic_conf reset None {}
reset traffic is in process...
reset traffic is done!
SUCCESS

###############################</msg>
<status status="PASS" endtime="20190113 23:11:51.047" starttime="20190113 23:11:35.906"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:51.049" starttime="20190113 23:11:24.115"></status>
</kw>
<status status="FAIL" endtime="20190113 23:11:51.051" starttime="20190113 23:09:57.831"></status>
</kw>
<kw type="teardown" name="case teardown">
<doc>teardown</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>svc teardown</arg>
</arguments>
<msg timestamp="20190113 23:11:51.077" level="INFO">svc teardown</msg>
<status status="PASS" endtime="20190113 23:11:51.078" starttime="20190113 23:11:51.076"></status>
</kw>
<kw name="subscriber_point_remove_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: delete l2 basic class-map and policy-map, remove service from subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>untagged</arg>
<arg>${service_vlan}</arg>
<arg>${cvlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:11:51.084" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:11:51.084" starttime="20190113 23:11:51.081"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove and delete l2 basic service from ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:11:51.086" level="INFO">****** [eutA] remove and delete l2 basic service from subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:11:51.087" starttime="20190113 23:11:51.085"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:51.091" starttime="20190113 23:11:51.090"></status>
</kw>
<msg timestamp="20190113 23:11:51.092" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 23:11:51.092" starttime="20190113 23:11:51.089"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 23:11:51.093" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 23:11:51.093" starttime="20190113 23:11:51.092"></status>
</kw>
<msg timestamp="20190113 23:11:51.094" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 23:11:51.094" starttime="20190113 23:11:51.087"></status>
</kw>
<kw name="l2_setting_dprov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove l2 basic service from ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:11:51.098" level="INFO">****** [eutA] remove l2 basic service from ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 23:11:51.098" starttime="20190113 23:11:51.097"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 23:11:51.099" level="INFO">${class_map} = auto_ClassMap_vuntagged</msg>
<status status="PASS" endtime="20190113 23:11:51.099" starttime="20190113 23:11:51.098"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 23:11:51.101" level="INFO">${policy_map} = auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 23:11:51.101" starttime="20190113 23:11:51.100"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:11:51.102" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:11:51.103" starttime="20190113 23:11:51.102"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:11:51.105" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:11:53.001" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v1000
   class-map-ethernet auto_ClassMap_vuntagged
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 23:11:53.001" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v1000
   class-map-ethernet auto_ClassMap_vuntagged
   ...</msg>
<status status="PASS" endtime="20190113 23:11:53.002" starttime="20190113 23:11:51.103"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove multicast-profile from interface</arg>
</arguments>
<msg timestamp="20190113 23:11:53.004" level="INFO">remove multicast-profile from interface</msg>
<status status="PASS" endtime="20190113 23:11:53.005" starttime="20190113 23:11:53.003"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:53.007" starttime="20190113 23:11:53.005"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove policy-map from interface</arg>
</arguments>
<msg timestamp="20190113 23:11:53.009" level="INFO">remove policy-map from interface</msg>
<status status="PASS" endtime="20190113 23:11:53.009" starttime="20190113 23:11:53.008"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:11:53.017" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:11:53.309" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:11:53.310" starttime="20190113 23:11:53.015"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:11:53.315" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:11:53.712" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:11:53.713" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:11:53.713" starttime="20190113 23:11:53.313"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:53.715" starttime="20190113 23:11:53.714"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:53.716" starttime="20190113 23:11:53.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:11:53.722" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:11:54.039" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:11:54.039" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:11:54.040" starttime="20190113 23:11:53.720"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:54.042" starttime="20190113 23:11:54.041"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:54.043" starttime="20190113 23:11:53.719"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:54.044" starttime="20190113 23:11:53.717"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:54.046" starttime="20190113 23:11:54.045"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:54.048" starttime="20190113 23:11:54.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:54.049" starttime="20190113 23:11:54.048"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:11:54.055" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:11:54.055" starttime="20190113 23:11:54.054"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:11:54.059" level="INFO">${value} = auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 23:11:54.059" starttime="20190113 23:11:54.058"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:11:54.061" level="INFO">${result_string} =  policy-map auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 23:11:54.061" starttime="20190113 23:11:54.059"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:54.061" starttime="20190113 23:11:54.057"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:54.062" starttime="20190113 23:11:54.056"></status>
</kw>
<msg timestamp="20190113 23:11:54.062" level="INFO">${cmd_string} =  policy-map auto_PolicyMap_v1000</msg>
<status status="PASS" endtime="20190113 23:11:54.062" starttime="20190113 23:11:54.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:11:54.069" level="INFO">send session_command, cmd=no  policy-map auto_PolicyMap_v1000, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:11:54.555" level="INFO">session_command result=no  policy-map auto_PolicyMap_v1000
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:11:54.556" level="INFO">${res} = no  policy-map auto_PolicyMap_v1000
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:11:54.556" starttime="20190113 23:11:54.066"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:54.559" starttime="20190113 23:11:54.558"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:54.560" starttime="20190113 23:11:54.065"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:54.561" starttime="20190113 23:11:54.063"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:11:54.564" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:11:54.932" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:11:54.933" starttime="20190113 23:11:54.563"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:54.934" starttime="20190113 23:11:53.012"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:54.936" starttime="20190113 23:11:53.010"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove svlan from interface</arg>
</arguments>
<msg timestamp="20190113 23:11:54.940" level="INFO">remove svlan from interface</msg>
<status status="PASS" endtime="20190113 23:11:54.940" starttime="20190113 23:11:54.939"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:11:54.952" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:11:55.286" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:11:55.287" starttime="20190113 23:11:54.949"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:11:55.293" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:11:55.560" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:11:55.560" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:11:55.560" starttime="20190113 23:11:55.291"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:55.563" starttime="20190113 23:11:55.562"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:55.563" starttime="20190113 23:11:55.289"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:55.565" starttime="20190113 23:11:55.564"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:55.566" starttime="20190113 23:11:55.566"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:55.568" starttime="20190113 23:11:55.567"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:55.569" starttime="20190113 23:11:55.568"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:11:55.574" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:11:55.574" starttime="20190113 23:11:55.573"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = vlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:11:55.577" level="INFO">${value} = 4002</msg>
<status status="PASS" endtime="20190113 23:11:55.577" starttime="20190113 23:11:55.576"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:11:55.579" level="INFO">${result_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 23:11:55.579" starttime="20190113 23:11:55.578"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:55.579" starttime="20190113 23:11:55.575"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:55.579" starttime="20190113 23:11:55.575"></status>
</kw>
<msg timestamp="20190113 23:11:55.580" level="INFO">${cmd_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 23:11:55.580" starttime="20190113 23:11:55.572"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:11:55.586" level="INFO">send session_command, cmd=no  vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:11:56.166" level="INFO">session_command result=no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:11:56.167" level="INFO">${res} = no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:11:56.167" starttime="20190113 23:11:55.583"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:56.170" starttime="20190113 23:11:56.169"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:56.170" starttime="20190113 23:11:55.582"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:56.173" starttime="20190113 23:11:55.581"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:11:56.181" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:11:56.468" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:11:56.469" starttime="20190113 23:11:56.178"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:56.470" starttime="20190113 23:11:54.945"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:56.471" starttime="20190113 23:11:54.942"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:11:56.473" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:11:56.473" starttime="20190113 23:11:56.472"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:11:56.475" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:11:58.106" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 23:11:58.106" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:11:58.107" starttime="20190113 23:11:56.473"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete policy-map</arg>
</arguments>
<msg timestamp="20190113 23:11:58.111" level="INFO">delete policy-map</msg>
<status status="PASS" endtime="20190113 23:11:58.111" starttime="20190113 23:11:58.110"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map</arg>
<arg>${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:11:58.116" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:11:58.380" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:11:58.380" starttime="20190113 23:11:58.113"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:11:58.407" level="INFO">send session_command, cmd=no policy-map auto_PolicyMap_v1000, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:11:59.704" level="INFO">session_command result=no policy-map auto_PolicyMap_v1000
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:11:59.704" level="INFO">${res} = no policy-map auto_PolicyMap_v1000
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:11:59.704" starttime="20190113 23:11:58.384"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:11:59.710" starttime="20190113 23:11:59.708"></status>
</kw>
<status status="PASS" endtime="20190113 23:11:59.710" starttime="20190113 23:11:58.382"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:11:59.714" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:00.237" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:12:00.238" starttime="20190113 23:11:59.712"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:00.239" starttime="20190113 23:11:58.112"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete class-map</arg>
</arguments>
<msg timestamp="20190113 23:12:00.241" level="INFO">delete class-map</msg>
<status status="PASS" endtime="20190113 23:12:00.241" starttime="20190113 23:12:00.240"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:12:00.246" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:00.743" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:12:00.743" starttime="20190113 23:12:00.243"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:12:00.753" level="INFO">send session_command, cmd=no class-map ethernet auto_ClassMap_vuntagged, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:01.316" level="INFO">session_command result=no class-map ethernet auto_ClassMap_vuntagged
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:12:01.316" level="INFO">${res} = no class-map ethernet auto_ClassMap_vuntagged
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:12:01.316" starttime="20190113 23:12:00.749"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:01.341" starttime="20190113 23:12:01.340"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:01.342" starttime="20190113 23:12:00.746"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:12:01.345" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:01.638" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:12:01.639" starttime="20190113 23:12:01.343"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:01.640" starttime="20190113 23:12:00.242"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:01.641" starttime="20190113 23:11:51.095"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:01.642" starttime="20190113 23:11:51.079"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:01.643" starttime="20190113 23:11:51.074"></status>
</kw>
<doc>1 create a class-map to match untag in flow 1 succesfully
2 create a policy-map to bind the class-map and add cevlan tag x succesfully
3 add eth-port1 to s-tag with transport-service-profile succesfully
4 apply the s-tag and policy-map to ethernet uni succesfully
5 send untag upstream traffic to ethernet uni and downstream with s-tag and c-tag to eth-port1 eth-port1 can pass the upstream traffic with right double tag; client can receive the downstream traffic with untag.</doc>
<tags>
<tag>@author=MinGu</tag>
<tag>@eut=10GE-12</tag>
<tag>@feature=Policy Map</tag>
<tag>@globalid=2532599</tag>
<tag>@priority=P1</tag>
<tag>@subFeature=10GE-12: Policy Map support</tag>
<tag>@tcid=AXOS_E72_PARENT-TC-4350</tag>
<tag>@user_interface=CLI</tag>
</tags>
<status status="FAIL" endtime="20190113 23:12:01.666" critical="yes" starttime="20190113 23:09:45.433">ValueError: session(tg1): verify traffic loss within. failed (loss_rate: 0.00121531614003 percent: 0.001)</status>
</test>
<status status="FAIL" endtime="20190113 23:12:01.735" starttime="20190113 23:09:45.268"></status>
</suite>
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/Policy_Map/testcase/tc_remove_cevlan.robot" id="s1-s1-s1-s1-s1-s1-s1-s2" name="Tc Remove Cevlan">
<test id="s1-s1-s1-s1-s1-s1-s1-s2-t1" name="tc_remove_cevlan">
<kw type="setup" name="case setup">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:1 create a class-map to match VLAN x in flow 1</arg>
</arguments>
<msg timestamp="20190113 23:12:02.250" level="INFO">STEP:1 create a class-map to match VLAN x in flow 1</msg>
<status status="PASS" endtime="20190113 23:12:02.250" starttime="20190113 23:12:02.249"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:2 create a policy-map to bind the class-map with the action of remove cevlan</arg>
</arguments>
<msg timestamp="20190113 23:12:02.251" level="INFO">STEP:2 create a policy-map to bind the class-map with the action of remove cevlan</msg>
<status status="PASS" endtime="20190113 23:12:02.251" starttime="20190113 23:12:02.250"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:3 add eth-port1 to s-tag with transport-service-profile</arg>
</arguments>
<msg timestamp="20190113 23:12:02.252" level="INFO">STEP:3 add eth-port1 to s-tag with transport-service-profile</msg>
<status status="PASS" endtime="20190113 23:12:02.252" starttime="20190113 23:12:02.252"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:4 apply the s-tag and policy-map to ethernet uni</arg>
</arguments>
<msg timestamp="20190113 23:12:02.253" level="INFO">STEP:4 apply the s-tag and policy-map to ethernet uni</msg>
<status status="PASS" endtime="20190113 23:12:02.254" starttime="20190113 23:12:02.253"></status>
</kw>
<kw name="subscriber_point_add_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create l2 basic class-map and policy-map, add service to subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>${match_vlan}</arg>
<arg>${service_vlan}</arg>
<arg>remove-cevlan</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:12:02.262" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:12:02.263" starttime="20190113 23:12:02.261"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] create and add l2 basic service to ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:12:02.264" level="INFO">****** [eutA] create and add l2 basic service to subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:12:02.264" starttime="20190113 23:12:02.263"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:02.268" starttime="20190113 23:12:02.267"></status>
</kw>
<msg timestamp="20190113 23:12:02.268" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 23:12:02.268" starttime="20190113 23:12:02.266"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 23:12:02.269" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 23:12:02.269" starttime="20190113 23:12:02.269"></status>
</kw>
<msg timestamp="20190113 23:12:02.270" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 23:12:02.270" starttime="20190113 23:12:02.265"></status>
</kw>
<kw name="l2_setting_prov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${ctag_action}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan_action}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<assign>
<var>&amp;{dict_prf}</var>
</assign>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] add l2 basic service to ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:12:02.280" level="INFO">****** [eutA] add l2 basic service to ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 23:12:02.280" starttime="20190113 23:12:02.279"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 23:12:02.282" level="INFO">${class_map} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 23:12:02.282" starttime="20190113 23:12:02.281"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 23:12:02.284" level="INFO">${policy_map} = auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 23:12:02.284" starttime="20190113 23:12:02.283"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>classmap=${class_map}</arg>
<arg>policymap=${policy_map}</arg>
</arguments>
<assign>
<var>&amp;{dic_prf}</var>
</assign>
<msg timestamp="20190113 23:12:02.286" level="INFO">&amp;{dic_prf} = { classmap=auto_ClassMap_v4008 | policymap=auto_PolicyMap_v }</msg>
<status status="PASS" endtime="20190113 23:12:02.286" starttime="20190113 23:12:02.284"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create class-map</arg>
</arguments>
<msg timestamp="20190113 23:12:02.287" level="INFO">create class-map</msg>
<status status="PASS" endtime="20190113 23:12:02.287" starttime="20190113 23:12:02.286"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'untagged'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>untagged=${EMPTY}</arg>
<arg>ELSE IF</arg>
<arg>'any'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>any=${EMPTY}</arg>
<arg>ELSE</arg>
<arg>create dictionary</arg>
<arg>vlan=${match_vlan}</arg>
</arguments>
<assign>
<var>&amp;{dict_match_rule}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>vlan=${match_vlan}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:02.290" starttime="20190113 23:12:02.289"></status>
</kw>
<msg timestamp="20190113 23:12:02.290" level="INFO">&amp;{dict_match_rule} = { vlan=4008 }</msg>
<status status="PASS" endtime="20190113 23:12:02.290" starttime="20190113 23:12:02.288"></status>
</kw>
<kw name="prov_class_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision class-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map}</arg>
<arg>ethernet</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>1</arg>
<arg>&amp;{dict_match_rule}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:12:02.300" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:02.612" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:12:02.613" starttime="20190113 23:12:02.293"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ${class_map_type} ${class_map_name}</arg>
</arguments>
<msg timestamp="20190113 23:12:02.616" level="INFO">send session_command, cmd=class-map ethernet auto_ClassMap_v4008, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:03.120" level="INFO">session_command result=class-map ethernet auto_ClassMap_v4008
NGPON2X4(config-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 23:12:03.120" starttime="20190113 23:12:02.614"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${flow_type} ${flow_index}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:12:03.132" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:03.499" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:12:03.500" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:12:03.500" starttime="20190113 23:12:03.123"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:03.502" starttime="20190113 23:12:03.501"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:03.503" starttime="20190113 23:12:03.122"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:12:03.509" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:12:03.509" starttime="20190113 23:12:03.508"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = vlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:12:03.511" level="INFO">${value} = 4008</msg>
<status status="PASS" endtime="20190113 23:12:03.512" starttime="20190113 23:12:03.511"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:12:03.513" level="INFO">${result_string} =  vlan 4008</msg>
<status status="PASS" endtime="20190113 23:12:03.513" starttime="20190113 23:12:03.512"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:03.513" starttime="20190113 23:12:03.510"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:03.514" starttime="20190113 23:12:03.509"></status>
</kw>
<msg timestamp="20190113 23:12:03.514" level="INFO">${cmd_string} =  vlan 4008</msg>
<status status="PASS" endtime="20190113 23:12:03.514" starttime="20190113 23:12:03.507"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>rule ${rule_index} match ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:12:03.518" level="INFO">send session_command, cmd=rule 1 match  vlan 4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:03.898" level="INFO">session_command result=rule 1 match  vlan 4008
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:12:03.898" level="INFO">${res} = rule 1 match  vlan 4008
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:12:03.898" starttime="20190113 23:12:03.516"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:03.901" starttime="20190113 23:12:03.900"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:03.901" starttime="20190113 23:12:03.515"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:12:03.904" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:04.177" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:12:04.177" starttime="20190113 23:12:03.902"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:04.178" starttime="20190113 23:12:02.291"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create policy-map</arg>
</arguments>
<msg timestamp="20190113 23:12:04.181" level="INFO">create policy-map</msg>
<status status="PASS" endtime="20190113 23:12:04.181" starttime="20190113 23:12:04.180"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ctag_action}'=='add-ctag' or '${ctag_action}'=='add-cevlan-tag' or '${cevlan_action}'=='add-cevlan-tag'</arg>
<arg>release_cmd_adapter</arg>
<arg>${device}</arg>
<arg>${prov_policy_map_config_add_tag}</arg>
<arg>ELSE</arg>
<arg>set variable</arg>
<arg>${ctag_action}</arg>
</arguments>
<assign>
<var>${ctag_action}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${ctag_action}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:04.184" starttime="20190113 23:12:04.183"></status>
</kw>
<msg timestamp="20190113 23:12:04.184" level="INFO">${ctag_action} = remove-cevlan</msg>
<status status="PASS" endtime="20190113 23:12:04.184" starttime="20190113 23:12:04.182"></status>
</kw>
<kw name="prov_policy_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision policy-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>${ctag_action}=${cvlan}</arg>
<arg>${cevlan_action}=${cevlan}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:12:04.199" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:04.495" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:12:04.496" starttime="20190113 23:12:04.187"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<msg timestamp="20190113 23:12:04.512" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:04.850" level="INFO">session_command result=policy-map auto_PolicyMap_v
NGPON2X4(config-policy-map-auto_PolicyMap_v)</msg>
<status status="PASS" endtime="20190113 23:12:04.850" starttime="20190113 23:12:04.503"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:12:04.857" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:05.317" level="INFO">session_command result=class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<msg timestamp="20190113 23:12:05.317" level="INFO">${res} = class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 23:12:05.317" starttime="20190113 23:12:04.854"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:05.320" starttime="20190113 23:12:05.319"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:05.320" starttime="20190113 23:12:04.852"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:12:05.326" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:05.688" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:12:05.689" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:12:05.689" starttime="20190113 23:12:05.324"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:05.691" starttime="20190113 23:12:05.690"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:05.692" starttime="20190113 23:12:05.322"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:05.693" starttime="20190113 23:12:05.321"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:12:05.699" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:12:05.700" starttime="20190113 23:12:05.698"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = remove-cevlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:12:05.702" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190113 23:12:05.702" starttime="20190113 23:12:05.701"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:12:05.704" level="INFO">${result_string} =  remove-cevlan </msg>
<status status="PASS" endtime="20190113 23:12:05.704" starttime="20190113 23:12:05.703"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:05.704" starttime="20190113 23:12:05.701"></status>
</kw>
<kw type="foritem" name="${key} = ">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:12:05.707" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190113 23:12:05.707" starttime="20190113 23:12:05.706"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:12:05.708" level="INFO">${result_string} =  remove-cevlan   </msg>
<status status="PASS" endtime="20190113 23:12:05.709" starttime="20190113 23:12:05.708"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:05.709" starttime="20190113 23:12:05.705"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:05.709" starttime="20190113 23:12:05.700"></status>
</kw>
<msg timestamp="20190113 23:12:05.710" level="INFO">${cmd_string} =  remove-cevlan   </msg>
<status status="PASS" endtime="20190113 23:12:05.710" starttime="20190113 23:12:05.697"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:12:05.715" level="INFO">send session_command, cmd= remove-cevlan   , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:06.062" level="INFO">session_command result= remove-cevlan   
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:12:06.062" level="INFO">${res} =  remove-cevlan   
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:12:06.062" starttime="20190113 23:12:05.713"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:06.065" starttime="20190113 23:12:06.064"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:06.065" starttime="20190113 23:12:05.712"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:06.066" starttime="20190113 23:12:05.710"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:12:06.069" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:06.437" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:12:06.437" starttime="20190113 23:12:06.068"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:06.439" starttime="20190113 23:12:04.185"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add policy-map to interface</arg>
</arguments>
<msg timestamp="20190113 23:12:06.441" level="INFO">add policy-map to interface</msg>
<status status="PASS" endtime="20190113 23:12:06.441" starttime="20190113 23:12:06.440"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:12:06.453" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:07.993" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 23:12:07.994" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:12:07.994" starttime="20190113 23:12:06.451"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:07.996" starttime="20190113 23:12:07.995"></status>
</kw>
<msg timestamp="20190113 23:12:07.997" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:12:07.997" starttime="20190113 23:12:06.449"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 23:12:08.000" level="INFO">@{list_key} = [ ]</msg>
<status status="PASS" endtime="20190113 23:12:08.000" starttime="20190113 23:12:07.999"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<status status="PASS" endtime="20190113 23:12:08.002" starttime="20190113 23:12:08.001"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:08.003" starttime="20190113 23:12:06.447"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:08.004" starttime="20190113 23:12:06.442"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>no=shutdown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:12:08.010" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map= ******</msg>
<status status="PASS" endtime="20190113 23:12:08.010" starttime="20190113 23:12:08.009"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:12:08.014" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:08.291" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:12:08.292" starttime="20190113 23:12:08.011"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:12:08.298" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:08.612" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:12:08.613" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:12:08.613" starttime="20190113 23:12:08.296"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:08.615" starttime="20190113 23:12:08.615"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:08.616" starttime="20190113 23:12:08.294"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:12:08.622" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:09.506" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:12:09.506" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:12:09.506" starttime="20190113 23:12:08.620"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:09.509" starttime="20190113 23:12:09.508"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:09.509" starttime="20190113 23:12:08.619"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:09.510" starttime="20190113 23:12:08.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:09.513" starttime="20190113 23:12:09.512"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:09.514" starttime="20190113 23:12:09.513"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:09.516" starttime="20190113 23:12:09.515"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:12:09.522" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:12:09.522" starttime="20190113 23:12:09.521"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = no">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:12:09.525" level="INFO">${value} = shutdown</msg>
<status status="PASS" endtime="20190113 23:12:09.525" starttime="20190113 23:12:09.524"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:12:09.527" level="INFO">${result_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 23:12:09.527" starttime="20190113 23:12:09.526"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:09.527" starttime="20190113 23:12:09.523"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:09.528" starttime="20190113 23:12:09.522"></status>
</kw>
<msg timestamp="20190113 23:12:09.528" level="INFO">${cmd_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 23:12:09.528" starttime="20190113 23:12:09.519"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:12:09.534" level="INFO">send session_command, cmd= no shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:10.050" level="INFO">session_command result= no shutdown
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:12:10.051" level="INFO">${res} =  no shutdown
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:12:10.051" starttime="20190113 23:12:09.532"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:10.054" starttime="20190113 23:12:10.053"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:10.054" starttime="20190113 23:12:09.530"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:10.055" starttime="20190113 23:12:09.529"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:12:10.058" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:10.385" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:12:10.386" starttime="20190113 23:12:10.057"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:10.387" starttime="20190113 23:12:08.006"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:12:10.392" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map=auto_PolicyMap_v ******</msg>
<status status="PASS" endtime="20190113 23:12:10.392" starttime="20190113 23:12:10.391"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:12:10.395" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:10.730" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:12:10.731" starttime="20190113 23:12:10.393"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:12:10.737" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:11.041" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:12:11.041" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:12:11.042" starttime="20190113 23:12:10.735"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:11.044" starttime="20190113 23:12:11.043"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:11.045" starttime="20190113 23:12:10.733"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:12:11.053" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:11.335" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:12:11.336" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:12:11.336" starttime="20190113 23:12:11.050"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:11.338" starttime="20190113 23:12:11.337"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:11.338" starttime="20190113 23:12:11.048"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:11.339" starttime="20190113 23:12:11.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:12:11.345" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:11.892" level="INFO">session_command result=policy-map auto_PolicyMap_v
NGPON2X4(config-policy-map-auto_PolicyMap_v)</msg>
<msg timestamp="20190113 23:12:11.892" level="INFO">${res} = policy-map auto_PolicyMap_v
NGPON2X4(config-policy-map-auto_PolicyMap_v)</msg>
<status status="PASS" endtime="20190113 23:12:11.892" starttime="20190113 23:12:11.343"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:11.901" starttime="20190113 23:12:11.900"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:11.902" starttime="20190113 23:12:11.341"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:11.909" starttime="20190113 23:12:11.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:12:11.921" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:12.297" level="INFO">session_command result=class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<msg timestamp="20190113 23:12:12.297" level="INFO">${res} = class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 23:12:12.297" starttime="20190113 23:12:11.919"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:12.300" starttime="20190113 23:12:12.299"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:12.301" starttime="20190113 23:12:11.918"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:12.302" starttime="20190113 23:12:11.916"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:12.304" starttime="20190113 23:12:12.303"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:12:12.310" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:12:12.310" starttime="20190113 23:12:12.309"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 23:12:12.311" starttime="20190113 23:12:12.310"></status>
</kw>
<msg timestamp="20190113 23:12:12.311" level="INFO">${cmd_string} = </msg>
<status status="PASS" endtime="20190113 23:12:12.311" starttime="20190113 23:12:12.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:12.313" starttime="20190113 23:12:12.312"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:12:12.315" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:12.562" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:12:12.562" starttime="20190113 23:12:12.313"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:12.564" starttime="20190113 23:12:10.389"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add multicast-profile to interface</arg>
</arguments>
<msg timestamp="20190113 23:12:12.566" level="INFO">add multicast-profile to interface</msg>
<status status="PASS" endtime="20190113 23:12:12.566" starttime="20190113 23:12:12.565"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>prov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:12.567" starttime="20190113 23:12:12.566"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:12:12.568" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:12:12.569" starttime="20190113 23:12:12.568"></status>
</kw>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>policy-map=${policy_map}</arg>
<arg>class-map-ethernet=${class_map}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:12:12.577" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:12:14.573" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v
   class-map-ethernet auto_ClassMap_v4008
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 23:12:14.574" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v
   class-map-ethernet auto_ClassMap_v4008
    flow 1...</msg>
<status status="PASS" endtime="20190113 23:12:14.574" starttime="20190113 23:12:12.576"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:14.576" starttime="20190113 23:12:14.575"></status>
</kw>
<msg timestamp="20190113 23:12:14.577" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v
   class-map-ethernet auto_ClassMap_v4008
    flow 1...</msg>
<status status="PASS" endtime="20190113 23:12:14.577" starttime="20190113 23:12:12.574"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 23:12:14.579" level="INFO">@{list_key} = [ class-map-ethernet | policy-map ]</msg>
<status status="PASS" endtime="20190113 23:12:14.579" starttime="20190113 23:12:14.578"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<kw type="foritem" name="${check_item} = class-map-ethernet">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 23:12:14.582" level="INFO">${exp_value} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 23:12:14.582" starttime="20190113 23:12:14.581"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:14.583" starttime="20190113 23:12:14.582"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:14.584" starttime="20190113 23:12:14.580"></status>
</kw>
<kw type="foritem" name="${check_item} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 23:12:14.586" level="INFO">${exp_value} = auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 23:12:14.586" starttime="20190113 23:12:14.585"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:14.587" starttime="20190113 23:12:14.586"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:14.587" starttime="20190113 23:12:14.584"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:14.594" starttime="20190113 23:12:14.579"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:14.594" starttime="20190113 23:12:12.572"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:14.598" starttime="20190113 23:12:14.597"></status>
</kw>
<msg timestamp="20190113 23:12:14.599" level="INFO">&amp;{dict_prf} = { classmap=auto_ClassMap_v4008 | policymap=auto_PolicyMap_v }</msg>
<status status="PASS" endtime="20190113 23:12:14.599" starttime="20190113 23:12:02.276"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:14.608" starttime="20190113 23:12:02.260"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:14.609" starttime="20190113 23:12:02.248"></status>
</kw>
<kw name="template_bidirection_raw_traffic_and_check" library="template_bidirection_raw_traffic_and_check">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>create bidirection raw traffic, send traffic and check packet loss, analyze packet with filter</doc>
<arguments>
<arg>${tg_us_param}</arg>
<arg>${tg_ds_param}</arg>
<arg>${us_traffic_filter}</arg>
<arg>${ds_traffic_filter}</arg>
<arg>${traffic_loss_rate}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create upstream traffic</arg>
</arguments>
<msg timestamp="20190113 23:12:14.643" level="INFO">create upstream traffic</msg>
<status status="PASS" endtime="20190113 23:12:14.643" starttime="20190113 23:12:14.642"></status>
</kw>
<kw name="create_raw_traffic_udp" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create bound traffic with udp head on traffic generater</doc>
<arguments>
<arg>tg1</arg>
<arg>upstream</arg>
<arg>service_p1</arg>
<arg>subscriber_p1</arg>
<arg>&amp;{tg_us_param}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${tg} port ${src_port} to ${dst_port}] create raw traffic with mac_dst:${mac_dst} mac_src:${mac_src} ip_dst:${ip_dst} ip_src:${ip_src} ovlan:${ovlan} ivlan:${ivlan}******</arg>
</arguments>
<msg timestamp="20190113 23:12:14.662" level="INFO">****** [tg1 port subscriber_p1 to service_p1] create raw traffic with mac_dst:00:00:00:67:00:01 mac_src:00:00:00:11:11:11 ip_dst:10.1.67.100 ip_src:10.1.67.10 ovlan:4008 ivlan:******</msg>
<status status="PASS" endtime="20190113 23:12:14.662" starttime="20190113 23:12:14.661"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>mac_dst=${mac_dst}</arg>
<arg>mac_src=${mac_src}</arg>
<arg>l3_protocol=ipv4</arg>
<arg>ip_dst_addr=${ip_dst}</arg>
<arg>ip_src_addr=${ip_src}</arg>
<arg>l4_protocol=udp</arg>
<arg>udp_dst_port=${udp_dst_port}</arg>
<arg>udp_src_port=${udp_src_port}</arg>
<arg>length_mode=fixed</arg>
<arg>frame_size=${frame_size}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:14.664" starttime="20190113 23:12:14.663"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>evaluate</arg>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<assign>
<var>${rate_bps}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:14.667" starttime="20190113 23:12:14.666"></status>
</kw>
<msg timestamp="20190113 23:12:14.667" level="INFO">${rate_bps} = 10000000</msg>
<status status="PASS" endtime="20190113 23:12:14.667" starttime="20190113 23:12:14.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'!='${rate_pps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_pps=${rate_pps}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:14.670" starttime="20190113 23:12:14.669"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:14.670" starttime="20190113 23:12:14.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'=='${ovlan}'</arg>
<arg>TG Create Untagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'=='${ivlan}'</arg>
<arg>TG Create Single Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE</arg>
<arg>TG Create Double Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ivlan}</arg>
<arg>${ivlan_pbit}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<kw name="Tg Create Single Tagged Stream On Port" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Create single tagged stream by name on traffic generator port.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<msg timestamp="20190113 23:12:15.961" level="INFO">CsHLT::traffic_conf create 11/8 { -vlan_user_priority 0 -mac_src 00:00:00:11:11:11 -l4_protocol udp -name upstream -ip_dst_addr 10.1.67.100 -mac_dst 00:00:00:67:00:01 -frame_size 512 -udp_src_port 6000 -ip_src_addr 10.1.67.10 -rate_bps 10000000 -length_mode fixed -l2_encap ethernet_ii_vlan -l3_protocol ipv4 -udp_dst_port 6000 -vlan_id 4008}
create traffic is in process...
create traffic is done!
SUCCESS
streamblock3</msg>
<status status="PASS" endtime="20190113 23:12:15.961" starttime="20190113 23:12:14.673"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:15.963" starttime="20190113 23:12:14.671"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:15.966" starttime="20190113 23:12:14.659"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create downstream traffic</arg>
</arguments>
<msg timestamp="20190113 23:12:15.970" level="INFO">create downstream traffic</msg>
<status status="PASS" endtime="20190113 23:12:15.970" starttime="20190113 23:12:15.969"></status>
</kw>
<kw name="create_raw_traffic_udp" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create bound traffic with udp head on traffic generater</doc>
<arguments>
<arg>tg1</arg>
<arg>downstream</arg>
<arg>subscriber_p1</arg>
<arg>service_p1</arg>
<arg>&amp;{tg_ds_param}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${tg} port ${src_port} to ${dst_port}] create raw traffic with mac_dst:${mac_dst} mac_src:${mac_src} ip_dst:${ip_dst} ip_src:${ip_src} ovlan:${ovlan} ivlan:${ivlan}******</arg>
</arguments>
<msg timestamp="20190113 23:12:15.995" level="INFO">****** [tg1 port service_p1 to subscriber_p1] create raw traffic with mac_dst:00:00:00:11:11:11 mac_src:00:00:00:67:00:01 ip_dst:10.1.67.10 ip_src:10.1.67.100 ovlan:4002 ivlan:******</msg>
<status status="PASS" endtime="20190113 23:12:16.004" starttime="20190113 23:12:15.994"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>mac_dst=${mac_dst}</arg>
<arg>mac_src=${mac_src}</arg>
<arg>l3_protocol=ipv4</arg>
<arg>ip_dst_addr=${ip_dst}</arg>
<arg>ip_src_addr=${ip_src}</arg>
<arg>l4_protocol=udp</arg>
<arg>udp_dst_port=${udp_dst_port}</arg>
<arg>udp_src_port=${udp_src_port}</arg>
<arg>length_mode=fixed</arg>
<arg>frame_size=${frame_size}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:16.006" starttime="20190113 23:12:16.005"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>evaluate</arg>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<assign>
<var>${rate_bps}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:16.009" starttime="20190113 23:12:16.008"></status>
</kw>
<msg timestamp="20190113 23:12:16.009" level="INFO">${rate_bps} = 10000000</msg>
<status status="PASS" endtime="20190113 23:12:16.009" starttime="20190113 23:12:16.007"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'!='${rate_pps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_pps=${rate_pps}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:16.012" starttime="20190113 23:12:16.011"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:16.012" starttime="20190113 23:12:16.010"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'=='${ovlan}'</arg>
<arg>TG Create Untagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'=='${ivlan}'</arg>
<arg>TG Create Single Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE</arg>
<arg>TG Create Double Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ivlan}</arg>
<arg>${ivlan_pbit}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<kw name="Tg Create Single Tagged Stream On Port" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Create single tagged stream by name on traffic generator port.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<msg timestamp="20190113 23:12:17.286" level="INFO">CsHLT::traffic_conf create 11/9 { -vlan_user_priority 0 -mac_src 00:00:00:67:00:01 -l4_protocol udp -name downstream -ip_dst_addr 10.1.67.10 -mac_dst 00:00:00:11:11:11 -frame_size 512 -udp_src_port 6000 -ip_src_addr 10.1.67.100 -rate_bps 10000000 -length_mode fixed -l2_encap ethernet_ii_vlan -l3_protocol ipv4 -udp_dst_port 6000 -vlan_id 4002}
create traffic is in process...
create traffic is done!
SUCCESS
streamblock4</msg>
<status status="PASS" endtime="20190113 23:12:17.287" starttime="20190113 23:12:16.021"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:17.288" starttime="20190113 23:12:16.013"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:17.289" starttime="20190113 23:12:15.991"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>send traffic and capture</arg>
</arguments>
<msg timestamp="20190113 23:12:17.291" level="INFO">send traffic and capture</msg>
<status status="PASS" endtime="20190113 23:12:17.291" starttime="20190113 23:12:17.290"></status>
</kw>
<kw name="Tg Clear Traffic Stats" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Clear Traffic statistics.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:24.330" starttime="20190113 23:12:17.292"></status>
</kw>
<kw name="start_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:start capture before start traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Config Packet Buffers" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Define how the buffers will be managed for packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<msg timestamp="20190113 23:12:24.373" level="INFO">[CsHLT::packetConfigBuffers port1 stop {}
stop capture buffer is in process...
response info: ====&gt; {status 1}
stop capture buffer is done!
SUCCESS
]</msg>
<status status="PASS" endtime="20190113 23:12:24.373" starttime="20190113 23:12:24.332"></status>
</kw>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>start</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:25.266" starttime="20190113 23:12:24.374"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after start_capture</arg>
</arguments>
<msg timestamp="20190113 23:12:25.269" level="INFO">wait 1s after start_capture</msg>
<status status="PASS" endtime="20190113 23:12:25.269" starttime="20190113 23:12:25.268"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:12:26.277" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:12:26.277" starttime="20190113 23:12:25.270"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:26.278" starttime="20190113 23:12:24.331"></status>
</kw>
<kw name="start_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:start capture before start traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Config Packet Buffers" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Define how the buffers will be managed for packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<msg timestamp="20190113 23:12:26.343" level="INFO">[CsHLT::packetConfigBuffers port2 stop {}
stop capture buffer is in process...
response info: ====&gt; {status 1}
stop capture buffer is done!
SUCCESS
]</msg>
<status status="PASS" endtime="20190113 23:12:26.343" starttime="20190113 23:12:26.292"></status>
</kw>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>start</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:28.038" starttime="20190113 23:12:26.345"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after start_capture</arg>
</arguments>
<msg timestamp="20190113 23:12:28.044" level="INFO">wait 1s after start_capture</msg>
<status status="PASS" endtime="20190113 23:12:28.045" starttime="20190113 23:12:28.043"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:12:29.047" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:12:29.048" starttime="20190113 23:12:28.045"></status>
</kw>
<status status="PASS" endtime="20190113 23:12:29.049" starttime="20190113 23:12:26.290"></status>
</kw>
<kw name="Tg Start All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Start All the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:39.634" starttime="20190113 23:12:29.057"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${traffic_run_time}</arg>
<arg>Wait for traffic run</arg>
</arguments>
<msg timestamp="20190113 23:12:49.637" level="INFO">Slept 10 seconds</msg>
<msg timestamp="20190113 23:12:49.638" level="INFO">Wait for traffic run</msg>
<status status="PASS" endtime="20190113 23:12:49.638" starttime="20190113 23:12:39.636"></status>
</kw>
<kw name="Tg Stop All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Stop all the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:12:58.104" starttime="20190113 23:12:49.639"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${stc_wait_time}</arg>
<arg>wait for stc stop</arg>
</arguments>
<msg timestamp="20190113 23:13:03.106" level="INFO">Slept 5 seconds</msg>
<msg timestamp="20190113 23:13:03.107" level="INFO">wait for stc stop</msg>
<status status="PASS" endtime="20190113 23:13:03.107" starttime="20190113 23:12:58.105"></status>
</kw>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:04.574" starttime="20190113 23:13:03.112"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:13:04.577" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:13:04.577" starttime="20190113 23:13:04.576"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:13:05.578" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:13:05.579" starttime="20190113 23:13:04.577"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:05.579" starttime="20190113 23:13:03.109"></status>
</kw>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:07.738" starttime="20190113 23:13:05.583"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:13:07.742" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:13:07.742" starttime="20190113 23:13:07.741"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:13:08.744" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:13:08.745" starttime="20190113 23:13:07.743"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:08.746" starttime="20190113 23:13:05.581"></status>
</kw>
<kw name="Tg Verify Traffic Loss Rate For All Streams Is Within" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Verify the packages loss rate of all the created stream in traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>${traffic_loss_rate}</arg>
</arguments>
<msg timestamp="20190113 23:13:09.582" level="INFO">[CsHLT::print_stats 
printing stats...
#############################################
port1:
    stream:
        streamblock4:
            rx:
                misinserted_pkts: 0
                total_pkt_bytes: 16030720
                prbs_bit_errors: 0
                ipv4_outer_present: 0
                min_delay: 5.275
                ipv6_outer_present: 0
                rx_sig_count: 31310
                max_delay: 6.185
                avg_delay: 5.829620887895242
                duplicate_pkts: 0
                out_of_sequence_pkts: 0
                total_pkts: 31310
                rx_sig_rate: 0
                dropped_pkts: 80
                first_tstamp: 0.0
                udp_present: 1
                total_pkt_bit_rate: 0
                ipv4_present: 1
                min_pkt_length: 0
                last_tstamp: 0.0
                total_pkt_rate: 0
                max_pkt_length: 0
                ipv6_present: 0
                rx_port: 10.245.252.60-11-8 //11/8  10.245.252.60-11-8 //11/8 
                tcp_present: 0
                dropped_pkts_percent: 0.2548582351067219
            tx:
                total_pkt_bytes: 16071680
                total_pkt_rate: 0
                total_pkts: 31390
                ipv4_outer_present: 0
                udp_present: 1
                ipv6_present: 0
                total_pkt_bit_rate: 0
                ipv6_outer_present: 0
                tcp_present: 0
                ipv4_present: 1
status: 1
#############################################
SUCCESS
]
[CsHLT::print_stats 
printing stats...
#############################################
port2:
    stream:
        streamblock3:
            rx:
                misinserted_pkts: 0
                total_pkt_bytes: 16048640
                prbs_bit_errors: 0
                ipv4_outer_present: 0
                min_delay: 5.2125
                ipv6_outer_present: 0
                rx_sig_count: 31345
                max_delay: 6.015
                avg_delay: 5.731708725474557
                duplicate_pkts: 0
                out_of_sequence_pkts: 0
                total_pkts: 31345
                rx_sig_rate: 0
                dropped_pkts: 0
                first_tstamp: 0.0
                udp_present: 1
                total_pkt_bit_rate: 0
                ipv4_present: 1
                min_pkt_length: 0
                last_tstamp: 0.0
                total_pkt_rate: 0
                max_pkt_length: 0
                ipv6_present: 0
                rx_port: 10.245.252.60-11-9 //11/9  10.245.252.60-11-9 //11/9 
                tcp_present: 0
                dropped_pkts_percent: 0.0
            tx:
                total_pkt_bytes: 16048640
                total_pkt_rate: 0
                total_pkts: 31345
                ipv4_outer_present: 0
                udp_present: 1
                ipv6_present: 0
                total_pkt_bit_rate: 0
                ipv6_outer_present: 0
                tcp_present: 0
                ipv4_present: 1
status: 1
#############################################
SUCCESS
]</msg>
<msg timestamp="20190113 23:13:09.582" level="FAIL">ValueError: session(tg1): verify traffic loss within. failed (loss_rate: 0.00127520522834 percent: 0.001)</msg>
<msg timestamp="20190113 23:13:09.583" level="DEBUG">Traceback (most recent call last):
  File "/etc/barista/packages/caferobot/trafficgen/trafficgen.py", line 1458, in tg_verify_traffic_loss_rate_for_all_streams_is_Within
    result = _gen.verify_traffic_loss_within(rate)
  File "/etc/barista/packages/cafe/runner/decorators.py", line 80, in wrapper
    r = func(*args, **kwargs)
  File "/etc/barista/packages/cafe/app/driver/stc.py", line 809, in verify_traffic_loss_within
    raise ValueError("session(%s): verify traffic loss within. failed (loss_rate: %s percent: %s)" % (self.name, loss_rate, allowed_loss))</msg>
<status status="FAIL" endtime="20190113 23:13:09.583" starttime="20190113 23:13:08.747"></status>
</kw>
<kw type="teardown" name="traffic_teardown" library="template_bidirection_raw_traffic_and_check">
<doc>teardown</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>stop_capture</arg>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:10.847" starttime="20190113 23:13:09.588"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:13:10.850" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:13:10.851" starttime="20190113 23:13:10.849"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:13:11.853" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:13:11.853" starttime="20190113 23:13:10.851"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:11.854" starttime="20190113 23:13:09.587"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:11.855" starttime="20190113 23:13:09.586"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>stop_capture</arg>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:12.410" starttime="20190113 23:13:11.859"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:13:12.414" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:13:12.414" starttime="20190113 23:13:12.412"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:13:13.415" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:13:13.416" starttime="20190113 23:13:12.414"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:13.417" starttime="20190113 23:13:11.858"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:13.418" starttime="20190113 23:13:11.857"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Tg Stop All Traffic</arg>
<arg>tg1</arg>
</arguments>
<kw name="Tg Stop All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Stop all the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:21.467" starttime="20190113 23:13:13.420"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:21.469" starttime="20190113 23:13:13.419"></status>
</kw>
<kw name="Tg Delete All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Delete all the traffic in given traffic generator.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<msg timestamp="20190113 23:13:36.275" level="INFO">###############################
res is: CsHLT::traffic_conf reset None {}
reset traffic is in process...
reset traffic is done!
SUCCESS

###############################</msg>
<status status="PASS" endtime="20190113 23:13:36.275" starttime="20190113 23:13:21.470"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:36.277" starttime="20190113 23:13:09.584"></status>
</kw>
<status status="FAIL" endtime="20190113 23:13:36.278" starttime="20190113 23:12:14.641"></status>
</kw>
<kw type="teardown" name="case teardown">
<kw name="Log" library="BuiltIn">
<arguments>
<arg>svc teardown</arg>
</arguments>
<msg timestamp="20190113 23:13:36.331" level="INFO">svc teardown</msg>
<status status="PASS" endtime="20190113 23:13:36.331" starttime="20190113 23:13:36.330"></status>
</kw>
<kw name="subscriber_point_remove_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: delete l2 basic class-map and policy-map, remove service from subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>${match_vlan}</arg>
<arg>${service_vlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:13:36.336" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:13:36.336" starttime="20190113 23:13:36.335"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove and delete l2 basic service from ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:13:36.337" level="INFO">****** [eutA] remove and delete l2 basic service from subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:13:36.338" starttime="20190113 23:13:36.337"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:36.342" starttime="20190113 23:13:36.341"></status>
</kw>
<msg timestamp="20190113 23:13:36.343" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 23:13:36.343" starttime="20190113 23:13:36.340"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 23:13:36.344" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 23:13:36.345" starttime="20190113 23:13:36.343"></status>
</kw>
<msg timestamp="20190113 23:13:36.345" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 23:13:36.345" starttime="20190113 23:13:36.339"></status>
</kw>
<kw name="l2_setting_dprov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove l2 basic service from ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:13:36.349" level="INFO">****** [eutA] remove l2 basic service from ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 23:13:36.349" starttime="20190113 23:13:36.348"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 23:13:36.351" level="INFO">${class_map} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 23:13:36.351" starttime="20190113 23:13:36.350"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 23:13:36.353" level="INFO">${policy_map} = auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 23:13:36.353" starttime="20190113 23:13:36.351"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:13:36.354" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:13:36.354" starttime="20190113 23:13:36.354"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:36.357" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:38.295" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v
   class-map-ethernet auto_ClassMap_v4008
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 23:13:38.296" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v
   class-map-ethernet auto_ClassMap_v4008
    flow 1...</msg>
<status status="PASS" endtime="20190113 23:13:38.296" starttime="20190113 23:13:36.355"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove multicast-profile from interface</arg>
</arguments>
<msg timestamp="20190113 23:13:38.299" level="INFO">remove multicast-profile from interface</msg>
<status status="PASS" endtime="20190113 23:13:38.299" starttime="20190113 23:13:38.298"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:38.302" starttime="20190113 23:13:38.300"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove policy-map from interface</arg>
</arguments>
<msg timestamp="20190113 23:13:38.303" level="INFO">remove policy-map from interface</msg>
<status status="PASS" endtime="20190113 23:13:38.303" starttime="20190113 23:13:38.302"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:13:38.310" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:38.596" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:13:38.597" starttime="20190113 23:13:38.308"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:38.605" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:38.995" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:13:38.995" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:13:38.995" starttime="20190113 23:13:38.602"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:38.998" starttime="20190113 23:13:38.997"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:38.999" starttime="20190113 23:13:38.600"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:39.006" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:39.300" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:13:39.301" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:13:39.301" starttime="20190113 23:13:39.004"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:39.304" starttime="20190113 23:13:39.303"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:39.305" starttime="20190113 23:13:39.002"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:39.306" starttime="20190113 23:13:39.000"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:39.308" starttime="20190113 23:13:39.307"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:39.310" starttime="20190113 23:13:39.309"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:39.311" starttime="20190113 23:13:39.310"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:13:39.317" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:13:39.317" starttime="20190113 23:13:39.316"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:13:39.320" level="INFO">${value} = auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 23:13:39.320" starttime="20190113 23:13:39.319"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:13:39.322" level="INFO">${result_string} =  policy-map auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 23:13:39.322" starttime="20190113 23:13:39.321"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:39.322" starttime="20190113 23:13:39.318"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:39.323" starttime="20190113 23:13:39.317"></status>
</kw>
<msg timestamp="20190113 23:13:39.323" level="INFO">${cmd_string} =  policy-map auto_PolicyMap_v</msg>
<status status="PASS" endtime="20190113 23:13:39.323" starttime="20190113 23:13:39.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:39.332" level="INFO">send session_command, cmd=no  policy-map auto_PolicyMap_v, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:39.792" level="INFO">session_command result=no  policy-map auto_PolicyMap_v
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:13:39.792" level="INFO">${res} = no  policy-map auto_PolicyMap_v
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:13:39.793" starttime="20190113 23:13:39.327"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:39.796" starttime="20190113 23:13:39.794"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:39.796" starttime="20190113 23:13:39.325"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:39.797" starttime="20190113 23:13:39.324"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:13:39.801" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:40.117" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:13:40.117" starttime="20190113 23:13:39.799"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:40.118" starttime="20190113 23:13:38.305"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:40.119" starttime="20190113 23:13:38.304"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove svlan from interface</arg>
</arguments>
<msg timestamp="20190113 23:13:40.122" level="INFO">remove svlan from interface</msg>
<status status="PASS" endtime="20190113 23:13:40.122" starttime="20190113 23:13:40.121"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:13:40.128" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:40.426" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:13:40.426" starttime="20190113 23:13:40.126"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:40.432" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:40.704" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:13:40.705" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:13:40.705" starttime="20190113 23:13:40.430"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:40.708" starttime="20190113 23:13:40.707"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:40.709" starttime="20190113 23:13:40.428"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:40.712" starttime="20190113 23:13:40.711"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:40.714" starttime="20190113 23:13:40.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:40.716" starttime="20190113 23:13:40.715"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:40.718" starttime="20190113 23:13:40.717"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:13:40.726" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:13:40.726" starttime="20190113 23:13:40.725"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = vlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:13:40.730" level="INFO">${value} = 4002</msg>
<status status="PASS" endtime="20190113 23:13:40.730" starttime="20190113 23:13:40.728"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:13:40.732" level="INFO">${result_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 23:13:40.732" starttime="20190113 23:13:40.731"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:40.732" starttime="20190113 23:13:40.727"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:40.733" starttime="20190113 23:13:40.726"></status>
</kw>
<msg timestamp="20190113 23:13:40.733" level="INFO">${cmd_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 23:13:40.733" starttime="20190113 23:13:40.722"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:40.753" level="INFO">send session_command, cmd=no  vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:41.290" level="INFO">session_command result=no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:13:41.291" level="INFO">${res} = no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:13:41.291" starttime="20190113 23:13:40.739"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:41.294" starttime="20190113 23:13:41.293"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:41.295" starttime="20190113 23:13:40.736"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:41.296" starttime="20190113 23:13:40.734"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:13:41.300" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:41.565" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:13:41.566" starttime="20190113 23:13:41.298"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:41.567" starttime="20190113 23:13:40.124"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:41.568" starttime="20190113 23:13:40.123"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:13:41.570" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:13:41.570" starttime="20190113 23:13:41.569"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:41.573" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:43.143" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 23:13:43.143" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:13:43.143" starttime="20190113 23:13:41.571"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete policy-map</arg>
</arguments>
<msg timestamp="20190113 23:13:43.146" level="INFO">delete policy-map</msg>
<status status="PASS" endtime="20190113 23:13:43.146" starttime="20190113 23:13:43.145"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map</arg>
<arg>${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:13:43.150" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:43.458" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:13:43.459" starttime="20190113 23:13:43.148"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:43.464" level="INFO">send session_command, cmd=no policy-map auto_PolicyMap_v, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:44.475" level="INFO">session_command result=no policy-map auto_PolicyMap_v
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:13:44.476" level="INFO">${res} = no policy-map auto_PolicyMap_v
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:13:44.476" starttime="20190113 23:13:43.462"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:44.479" starttime="20190113 23:13:44.478"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:44.479" starttime="20190113 23:13:43.460"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:13:44.487" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:44.822" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:13:44.822" starttime="20190113 23:13:44.481"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:44.824" starttime="20190113 23:13:43.147"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete class-map</arg>
</arguments>
<msg timestamp="20190113 23:13:44.826" level="INFO">delete class-map</msg>
<status status="PASS" endtime="20190113 23:13:44.826" starttime="20190113 23:13:44.825"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:13:44.830" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:45.131" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:13:45.132" starttime="20190113 23:13:44.828"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:45.137" level="INFO">send session_command, cmd=no class-map ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:45.477" level="INFO">session_command result=no class-map ethernet auto_ClassMap_v4008
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:13:45.477" level="INFO">${res} = no class-map ethernet auto_ClassMap_v4008
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:13:45.478" starttime="20190113 23:13:45.135"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:45.481" starttime="20190113 23:13:45.480"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:45.482" starttime="20190113 23:13:45.133"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:13:45.486" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:45.774" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:13:45.775" starttime="20190113 23:13:45.484"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:45.776" starttime="20190113 23:13:44.827"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:45.777" starttime="20190113 23:13:36.346"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:45.779" starttime="20190113 23:13:36.332"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:45.780" starttime="20190113 23:13:36.328"></status>
</kw>
<doc>1 create a class-map to match VLAN x in flow 1 succesfully
2 create a policy-map to bind the class-map with the action of remove cevlan succesfully
3 add eth-port1 to s-tag with transport-service-profile succesfully
4 apply the s-tag and policy-map to ethernet uni succesfully
5 send upstream traffic with VLAN x to ethernet uni and downstream with s-tag to eth-port1 eth-port1 can pass the upstream traffic with right tag; client can receive the downstream traffic with tag x</doc>
<tags>
<tag>@author=MinGu</tag>
<tag>@eut=10GE-12</tag>
<tag>@feature=Policy Map</tag>
<tag>@globalid=2532600</tag>
<tag>@priority=P1</tag>
<tag>@subFeature=10GE-12: Policy Map support</tag>
<tag>@tcid=AXOS_E72_PARENT-TC-4351</tag>
<tag>@user_interface=CLI</tag>
</tags>
<status status="FAIL" endtime="20190113 23:13:45.818" critical="yes" starttime="20190113 23:12:02.061">ValueError: session(tg1): verify traffic loss within. failed (loss_rate: 0.00127520522834 percent: 0.001)</status>
</test>
<status status="FAIL" endtime="20190113 23:13:45.972" starttime="20190113 23:12:01.858"></status>
</suite>
<suite source="/home/guchen/workspace/AXOS/AXOS-automation/Milan/ST_Test_Cases/Data/Policy_Map/testcase/tc_translate_cevlan_tag.robot" id="s1-s1-s1-s1-s1-s1-s1-s3" name="Tc Translate Cevlan Tag">
<test id="s1-s1-s1-s1-s1-s1-s1-s3-t1" name="tc_translate_cevlan_tag">
<kw type="setup" name="case setup">
<doc>setup</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:1 create a class-map to match VLAN x in flow 1</arg>
</arguments>
<msg timestamp="20190113 23:13:46.441" level="INFO">STEP:1 create a class-map to match VLAN x in flow 1</msg>
<status status="PASS" endtime="20190113 23:13:46.441" starttime="20190113 23:13:46.440"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:2 create a policy-map to bind the class-map with the action of translate-cevlan-tag</arg>
</arguments>
<msg timestamp="20190113 23:13:46.442" level="INFO">STEP:2 create a policy-map to bind the class-map with the action of translate-cevlan-tag</msg>
<status status="PASS" endtime="20190113 23:13:46.442" starttime="20190113 23:13:46.442"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:3 add eth-port1 to s-tag with transport-service-profile</arg>
</arguments>
<msg timestamp="20190113 23:13:46.444" level="INFO">STEP:3 add eth-port1 to s-tag with transport-service-profile</msg>
<status status="PASS" endtime="20190113 23:13:46.444" starttime="20190113 23:13:46.443"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>STEP:4 apply the s-tag and policy-map to ethernet uni</arg>
</arguments>
<msg timestamp="20190113 23:13:46.445" level="INFO">STEP:4 apply the s-tag and policy-map to ethernet uni</msg>
<status status="PASS" endtime="20190113 23:13:46.446" starttime="20190113 23:13:46.445"></status>
</kw>
<kw name="subscriber_point_add_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create l2 basic class-map and policy-map, add service to subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>${match_vlan}</arg>
<arg>${service_vlan}</arg>
<arg>translate-cevlan-tag</arg>
<arg>${translate_cvlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:13:46.456" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:13:46.456" starttime="20190113 23:13:46.454"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] create and add l2 basic service to ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:13:46.457" level="INFO">****** [eutA] create and add l2 basic service to subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:13:46.457" starttime="20190113 23:13:46.456"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:46.462" starttime="20190113 23:13:46.461"></status>
</kw>
<msg timestamp="20190113 23:13:46.463" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 23:13:46.463" starttime="20190113 23:13:46.460"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 23:13:46.465" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 23:13:46.465" starttime="20190113 23:13:46.464"></status>
</kw>
<msg timestamp="20190113 23:13:46.466" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 23:13:46.466" starttime="20190113 23:13:46.458"></status>
</kw>
<kw name="l2_setting_prov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${ctag_action}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan_action}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<assign>
<var>&amp;{dict_prf}</var>
</assign>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] add l2 basic service to ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:13:46.479" level="INFO">****** [eutA] add l2 basic service to ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 23:13:46.480" starttime="20190113 23:13:46.478"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 23:13:46.481" level="INFO">${class_map} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 23:13:46.482" starttime="20190113 23:13:46.480"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 23:13:46.483" level="INFO">${policy_map} = auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 23:13:46.483" starttime="20190113 23:13:46.482"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>classmap=${class_map}</arg>
<arg>policymap=${policy_map}</arg>
</arguments>
<assign>
<var>&amp;{dic_prf}</var>
</assign>
<msg timestamp="20190113 23:13:46.485" level="INFO">&amp;{dic_prf} = { classmap=auto_ClassMap_v4008 | policymap=auto_PolicyMap_v4009 }</msg>
<status status="PASS" endtime="20190113 23:13:46.486" starttime="20190113 23:13:46.484"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create class-map</arg>
</arguments>
<msg timestamp="20190113 23:13:46.487" level="INFO">create class-map</msg>
<status status="PASS" endtime="20190113 23:13:46.487" starttime="20190113 23:13:46.486"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'untagged'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>untagged=${EMPTY}</arg>
<arg>ELSE IF</arg>
<arg>'any'=='${match_vlan}'</arg>
<arg>create dictionary</arg>
<arg>any=${EMPTY}</arg>
<arg>ELSE</arg>
<arg>create dictionary</arg>
<arg>vlan=${match_vlan}</arg>
</arguments>
<assign>
<var>&amp;{dict_match_rule}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on the given ``items``.</doc>
<arguments>
<arg>vlan=${match_vlan}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:46.490" starttime="20190113 23:13:46.489"></status>
</kw>
<msg timestamp="20190113 23:13:46.491" level="INFO">&amp;{dict_match_rule} = { vlan=4008 }</msg>
<status status="PASS" endtime="20190113 23:13:46.491" starttime="20190113 23:13:46.488"></status>
</kw>
<kw name="prov_class_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision class-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map}</arg>
<arg>ethernet</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>1</arg>
<arg>&amp;{dict_match_rule}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:13:46.497" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:46.856" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:13:46.856" starttime="20190113 23:13:46.494"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ${class_map_type} ${class_map_name}</arg>
</arguments>
<msg timestamp="20190113 23:13:46.861" level="INFO">send session_command, cmd=class-map ethernet auto_ClassMap_v4008, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:47.396" level="INFO">session_command result=class-map ethernet auto_ClassMap_v4008
NGPON2X4(config-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 23:13:47.397" starttime="20190113 23:13:46.858"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${flow_type} ${flow_index}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:47.403" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:47.791" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:13:47.792" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:13:47.792" starttime="20190113 23:13:47.401"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:47.794" starttime="20190113 23:13:47.793"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:47.795" starttime="20190113 23:13:47.399"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:13:47.802" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:13:47.802" starttime="20190113 23:13:47.801"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = vlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:13:47.805" level="INFO">${value} = 4008</msg>
<status status="PASS" endtime="20190113 23:13:47.805" starttime="20190113 23:13:47.804"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:13:47.807" level="INFO">${result_string} =  vlan 4008</msg>
<status status="PASS" endtime="20190113 23:13:47.808" starttime="20190113 23:13:47.806"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:47.808" starttime="20190113 23:13:47.804"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:47.808" starttime="20190113 23:13:47.803"></status>
</kw>
<msg timestamp="20190113 23:13:47.809" level="INFO">${cmd_string} =  vlan 4008</msg>
<status status="PASS" endtime="20190113 23:13:47.809" starttime="20190113 23:13:47.800"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>rule ${rule_index} match ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:47.814" level="INFO">send session_command, cmd=rule 1 match  vlan 4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:48.214" level="INFO">session_command result=rule 1 match  vlan 4008
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:13:48.214" level="INFO">${res} = rule 1 match  vlan 4008
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:13:48.214" starttime="20190113 23:13:47.811"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:48.217" starttime="20190113 23:13:48.216"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:48.217" starttime="20190113 23:13:47.809"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:13:48.220" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:48.518" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:13:48.518" starttime="20190113 23:13:48.219"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:48.519" starttime="20190113 23:13:46.492"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create policy-map</arg>
</arguments>
<msg timestamp="20190113 23:13:48.521" level="INFO">create policy-map</msg>
<status status="PASS" endtime="20190113 23:13:48.522" starttime="20190113 23:13:48.521"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ctag_action}'=='add-ctag' or '${ctag_action}'=='add-cevlan-tag' or '${cevlan_action}'=='add-cevlan-tag'</arg>
<arg>release_cmd_adapter</arg>
<arg>${device}</arg>
<arg>${prov_policy_map_config_add_tag}</arg>
<arg>ELSE</arg>
<arg>set variable</arg>
<arg>${ctag_action}</arg>
</arguments>
<assign>
<var>${ctag_action}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${ctag_action}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:48.525" starttime="20190113 23:13:48.524"></status>
</kw>
<msg timestamp="20190113 23:13:48.525" level="INFO">${ctag_action} = translate-cevlan-tag</msg>
<status status="PASS" endtime="20190113 23:13:48.525" starttime="20190113 23:13:48.522"></status>
</kw>
<kw name="prov_policy_map" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: provision policy-map</doc>
<arguments>
<arg>${device}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
<arg>flow</arg>
<arg>1</arg>
<arg>${ctag_action}=${cvlan}</arg>
<arg>${cevlan_action}=${cevlan}</arg>
<arg>&amp;{dict_policy_map_option_cmd}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:13:48.530" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:48.802" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:13:48.802" starttime="20190113 23:13:48.528"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<msg timestamp="20190113 23:13:48.806" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v4009, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:49.144" level="INFO">session_command result=policy-map auto_PolicyMap_v4009
NGPON2X4(config-policy-map-auto_PolicyMap_v4009)</msg>
<status status="PASS" endtime="20190113 23:13:49.144" starttime="20190113 23:13:48.804"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:49.150" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:49.602" level="INFO">session_command result=class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<msg timestamp="20190113 23:13:49.603" level="INFO">${res} = class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 23:13:49.603" starttime="20190113 23:13:49.148"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:49.605" starttime="20190113 23:13:49.604"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:49.606" starttime="20190113 23:13:49.146"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:49.613" level="INFO">send session_command, cmd=flow 1, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:50.021" level="INFO">session_command result=flow 1
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:13:50.022" level="INFO">${res} = flow 1
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:13:50.022" starttime="20190113 23:13:49.611"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:50.026" starttime="20190113 23:13:50.024"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:50.026" starttime="20190113 23:13:49.609"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:50.028" starttime="20190113 23:13:49.608"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:13:50.035" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:13:50.035" starttime="20190113 23:13:50.034"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = translate-cevlan-tag">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:13:50.039" level="INFO">${value} = 4009</msg>
<status status="PASS" endtime="20190113 23:13:50.039" starttime="20190113 23:13:50.038"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:13:50.041" level="INFO">${result_string} =  translate-cevlan-tag 4009</msg>
<status status="PASS" endtime="20190113 23:13:50.041" starttime="20190113 23:13:50.039"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:50.041" starttime="20190113 23:13:50.037"></status>
</kw>
<kw type="foritem" name="${key} = ">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:13:50.044" level="INFO">${value} = </msg>
<status status="PASS" endtime="20190113 23:13:50.044" starttime="20190113 23:13:50.042"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:13:50.045" level="INFO">${result_string} =  translate-cevlan-tag 4009  </msg>
<status status="PASS" endtime="20190113 23:13:50.046" starttime="20190113 23:13:50.044"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:50.046" starttime="20190113 23:13:50.041"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:50.046" starttime="20190113 23:13:50.036"></status>
</kw>
<msg timestamp="20190113 23:13:50.047" level="INFO">${cmd_string} =  translate-cevlan-tag 4009  </msg>
<status status="PASS" endtime="20190113 23:13:50.047" starttime="20190113 23:13:50.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:50.053" level="INFO">send session_command, cmd= translate-cevlan-tag 4009  , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:50.444" level="INFO">session_command result= translate-cevlan-tag 4009  
NGPON2X4(config-flow-1)</msg>
<msg timestamp="20190113 23:13:50.444" level="INFO">${res} =  translate-cevlan-tag 4009  
NGPON2X4(config-flow-1)</msg>
<status status="PASS" endtime="20190113 23:13:50.444" starttime="20190113 23:13:50.051"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:50.447" starttime="20190113 23:13:50.446"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:50.448" starttime="20190113 23:13:50.049"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:50.449" starttime="20190113 23:13:50.048"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:13:50.452" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:50.743" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:13:50.744" starttime="20190113 23:13:50.450"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:50.745" starttime="20190113 23:13:48.526"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add policy-map to interface</arg>
</arguments>
<msg timestamp="20190113 23:13:50.747" level="INFO">add policy-map to interface</msg>
<status status="PASS" endtime="20190113 23:13:50.748" starttime="20190113 23:13:50.747"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:50.763" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:52.442" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 23:13:52.443" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:13:52.443" starttime="20190113 23:13:50.760"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:52.446" starttime="20190113 23:13:52.445"></status>
</kw>
<msg timestamp="20190113 23:13:52.446" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:13:52.446" starttime="20190113 23:13:50.757"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 23:13:52.449" level="INFO">@{list_key} = [ ]</msg>
<status status="PASS" endtime="20190113 23:13:52.449" starttime="20190113 23:13:52.448"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<status status="PASS" endtime="20190113 23:13:52.451" starttime="20190113 23:13:52.450"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:52.451" starttime="20190113 23:13:50.754"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:52.452" starttime="20190113 23:13:50.748"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>no=shutdown</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:13:52.458" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map= ******</msg>
<status status="PASS" endtime="20190113 23:13:52.458" starttime="20190113 23:13:52.457"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:13:52.460" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:52.774" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:13:52.774" starttime="20190113 23:13:52.459"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:52.780" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:53.062" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:13:53.063" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:13:53.063" starttime="20190113 23:13:52.778"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:53.067" starttime="20190113 23:13:53.065"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:53.067" starttime="20190113 23:13:52.776"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:53.076" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:53.896" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:13:53.896" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:13:53.896" starttime="20190113 23:13:53.073"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:53.900" starttime="20190113 23:13:53.898"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:53.900" starttime="20190113 23:13:53.071"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:53.902" starttime="20190113 23:13:53.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:53.905" starttime="20190113 23:13:53.904"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:53.908" starttime="20190113 23:13:53.906"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:53.911" starttime="20190113 23:13:53.909"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:13:53.919" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:13:53.919" starttime="20190113 23:13:53.918"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = no">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:13:53.924" level="INFO">${value} = shutdown</msg>
<status status="PASS" endtime="20190113 23:13:53.924" starttime="20190113 23:13:53.922"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:13:53.927" level="INFO">${result_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 23:13:53.927" starttime="20190113 23:13:53.925"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:53.928" starttime="20190113 23:13:53.921"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:53.928" starttime="20190113 23:13:53.920"></status>
</kw>
<msg timestamp="20190113 23:13:53.929" level="INFO">${cmd_string} =  no shutdown</msg>
<status status="PASS" endtime="20190113 23:13:53.929" starttime="20190113 23:13:53.915"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:53.937" level="INFO">send session_command, cmd= no shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:54.370" level="INFO">session_command result= no shutdown
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:13:54.371" level="INFO">${res} =  no shutdown
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:13:54.371" starttime="20190113 23:13:53.934"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:54.373" starttime="20190113 23:13:54.372"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:54.374" starttime="20190113 23:13:53.932"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:54.375" starttime="20190113 23:13:53.930"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:13:54.378" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:54.676" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:13:54.676" starttime="20190113 23:13:54.376"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:54.677" starttime="20190113 23:13:52.454"></status>
</kw>
<kw name="prov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface provision, especially for add svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>${policy_map}</arg>
<arg>class-map-ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] provision interface ${port_type} ${port_name}: svlan=${svc_vlan}, policy-map=${policy_map_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:13:54.683" level="INFO">****** [eutA] provision interface ethernet 1/2/x3: svlan=4002, policy-map=auto_PolicyMap_v4009 ******</msg>
<status status="PASS" endtime="20190113 23:13:54.683" starttime="20190113 23:13:54.682"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:13:54.691" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:54.974" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:13:54.974" starttime="20190113 23:13:54.684"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:54.980" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:55.227" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:13:55.227" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:13:55.228" starttime="20190113 23:13:54.978"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:55.230" starttime="20190113 23:13:55.229"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:55.231" starttime="20190113 23:13:54.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:55.237" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:55.529" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:13:55.529" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:13:55.529" starttime="20190113 23:13:55.235"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:55.532" starttime="20190113 23:13:55.531"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:55.532" starttime="20190113 23:13:55.233"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:55.534" starttime="20190113 23:13:55.232"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:55.540" level="INFO">send session_command, cmd=policy-map auto_PolicyMap_v4009, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:56.065" level="INFO">session_command result=policy-map auto_PolicyMap_v4009
NGPON2X4(config-policy-map-auto_PolicyMap_v4009)</msg>
<msg timestamp="20190113 23:13:56.065" level="INFO">${res} = policy-map auto_PolicyMap_v4009
NGPON2X4(config-policy-map-auto_PolicyMap_v4009)</msg>
<status status="PASS" endtime="20190113 23:13:56.065" starttime="20190113 23:13:55.538"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:56.068" starttime="20190113 23:13:56.067"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:56.069" starttime="20190113 23:13:55.536"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:56.070" starttime="20190113 23:13:55.535"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:56.078" level="INFO">send session_command, cmd=class-map-ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:56.382" level="INFO">session_command result=class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<msg timestamp="20190113 23:13:56.382" level="INFO">${res} = class-map-ethernet auto_ClassMap_v4008
NGPON2X4(config-class-map-ethernet-auto_ClassMap_v4008)</msg>
<status status="PASS" endtime="20190113 23:13:56.383" starttime="20190113 23:13:56.075"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:56.386" starttime="20190113 23:13:56.384"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:56.386" starttime="20190113 23:13:56.073"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:56.388" starttime="20190113 23:13:56.072"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:56.390" starttime="20190113 23:13:56.389"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:13:56.395" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:13:56.395" starttime="20190113 23:13:56.394"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<status status="PASS" endtime="20190113 23:13:56.396" starttime="20190113 23:13:56.395"></status>
</kw>
<msg timestamp="20190113 23:13:56.396" level="INFO">${cmd_string} = </msg>
<status status="PASS" endtime="20190113 23:13:56.396" starttime="20190113 23:13:56.393"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${cmd_string}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:56.398" starttime="20190113 23:13:56.397"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:13:56.405" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:56.691" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:13:56.692" starttime="20190113 23:13:56.398"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:56.693" starttime="20190113 23:13:54.680"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>add multicast-profile to interface</arg>
</arguments>
<msg timestamp="20190113 23:13:56.695" level="INFO">add multicast-profile to interface</msg>
<status status="PASS" endtime="20190113 23:13:56.695" starttime="20190113 23:13:56.694"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>prov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:56.697" starttime="20190113 23:13:56.696"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:13:56.698" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:13:56.698" starttime="20190113 23:13:56.697"></status>
</kw>
<kw name="check_running_config_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: check "show running-config interface ethernet 1/2/x3 ${query_cmd}" information</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>policy-map=${policy_map}</arg>
<arg>class-map-ethernet=${class_map}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name} ${query_cmd}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:13:56.708" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3 , prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:13:58.521" level="INFO">session_command result=show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v4009
   class-map-ethernet auto_ClassMap_v4008
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 23:13:58.522" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v4009
   class-map-ethernet auto_ClassMap_v4008
    fl...</msg>
<status status="PASS" endtime="20190113 23:13:58.522" starttime="20190113 23:13:56.705"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:58.524" starttime="20190113 23:13:58.524"></status>
</kw>
<msg timestamp="20190113 23:13:58.525" level="INFO">${res} = show running-config interface ethernet 1/2/x3 
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v4009
   class-map-ethernet auto_ClassMap_v4008
    fl...</msg>
<status status="PASS" endtime="20190113 23:13:58.525" starttime="20190113 23:13:56.704"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
</arguments>
<assign>
<var>@{list_key}</var>
</assign>
<msg timestamp="20190113 23:13:58.527" level="INFO">@{list_key} = [ class-map-ethernet | policy-map ]</msg>
<status status="PASS" endtime="20190113 23:13:58.528" starttime="20190113 23:13:58.527"></status>
</kw>
<kw type="for" name="${check_item} IN [ @{list_key} ]">
<kw type="foritem" name="${check_item} = class-map-ethernet">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 23:13:58.530" level="INFO">${exp_value} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 23:13:58.530" starttime="20190113 23:13:58.529"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:58.532" starttime="20190113 23:13:58.531"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:58.532" starttime="20190113 23:13:58.528"></status>
</kw>
<kw type="foritem" name="${check_item} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict_check_item}</arg>
<arg>${check_item}</arg>
</arguments>
<assign>
<var>${exp_value}</var>
</assign>
<msg timestamp="20190113 23:13:58.534" level="INFO">${exp_value} = auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 23:13:58.534" starttime="20190113 23:13:58.533"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${res}</arg>
<arg>${check_item}\\s+${exp_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:58.535" starttime="20190113 23:13:58.534"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:58.536" starttime="20190113 23:13:58.532"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:58.536" starttime="20190113 23:13:58.528"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:58.536" starttime="20190113 23:13:56.702"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>check_running_config_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>igmp multicast-profile=${mcast_profile}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:58.538" starttime="20190113 23:13:58.538"></status>
</kw>
<msg timestamp="20190113 23:13:58.539" level="INFO">&amp;{dict_prf} = { classmap=auto_ClassMap_v4008 | policymap=auto_PolicyMap_v4009 }</msg>
<status status="PASS" endtime="20190113 23:13:58.539" starttime="20190113 23:13:46.475"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:58.541" starttime="20190113 23:13:46.452"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:58.542" starttime="20190113 23:13:46.439"></status>
</kw>
<kw name="template_bidirection_raw_traffic_and_check" library="template_bidirection_raw_traffic_and_check">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>create bidirection raw traffic, send traffic and check packet loss, analyze packet with filter</doc>
<arguments>
<arg>${tg_us_param}</arg>
<arg>${tg_ds_param}</arg>
<arg>${us_traffic_filter}</arg>
<arg>${ds_traffic_filter}</arg>
<arg>${traffic_loss_rate}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create upstream traffic</arg>
</arguments>
<msg timestamp="20190113 23:13:58.592" level="INFO">create upstream traffic</msg>
<status status="PASS" endtime="20190113 23:13:58.592" starttime="20190113 23:13:58.591"></status>
</kw>
<kw name="create_raw_traffic_udp" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create bound traffic with udp head on traffic generater</doc>
<arguments>
<arg>tg1</arg>
<arg>upstream</arg>
<arg>service_p1</arg>
<arg>subscriber_p1</arg>
<arg>&amp;{tg_us_param}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${tg} port ${src_port} to ${dst_port}] create raw traffic with mac_dst:${mac_dst} mac_src:${mac_src} ip_dst:${ip_dst} ip_src:${ip_src} ovlan:${ovlan} ivlan:${ivlan}******</arg>
</arguments>
<msg timestamp="20190113 23:13:58.610" level="INFO">****** [tg1 port subscriber_p1 to service_p1] create raw traffic with mac_dst:00:00:00:67:00:01 mac_src:00:00:00:11:11:11 ip_dst:10.1.67.100 ip_src:10.1.67.10 ovlan:4008 ivlan:******</msg>
<status status="PASS" endtime="20190113 23:13:58.610" starttime="20190113 23:13:58.609"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>mac_dst=${mac_dst}</arg>
<arg>mac_src=${mac_src}</arg>
<arg>l3_protocol=ipv4</arg>
<arg>ip_dst_addr=${ip_dst}</arg>
<arg>ip_src_addr=${ip_src}</arg>
<arg>l4_protocol=udp</arg>
<arg>udp_dst_port=${udp_dst_port}</arg>
<arg>udp_src_port=${udp_src_port}</arg>
<arg>length_mode=fixed</arg>
<arg>frame_size=${frame_size}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:58.612" starttime="20190113 23:13:58.611"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>evaluate</arg>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<assign>
<var>${rate_bps}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:58.615" starttime="20190113 23:13:58.614"></status>
</kw>
<msg timestamp="20190113 23:13:58.615" level="INFO">${rate_bps} = 10000000</msg>
<status status="PASS" endtime="20190113 23:13:58.615" starttime="20190113 23:13:58.613"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'!='${rate_pps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_pps=${rate_pps}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:58.618" starttime="20190113 23:13:58.617"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:58.618" starttime="20190113 23:13:58.616"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'=='${ovlan}'</arg>
<arg>TG Create Untagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'=='${ivlan}'</arg>
<arg>TG Create Single Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE</arg>
<arg>TG Create Double Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ivlan}</arg>
<arg>${ivlan_pbit}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<kw name="Tg Create Single Tagged Stream On Port" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Create single tagged stream by name on traffic generator port.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<msg timestamp="20190113 23:13:59.649" level="INFO">CsHLT::traffic_conf create 11/8 { -vlan_user_priority 0 -mac_src 00:00:00:11:11:11 -l4_protocol udp -name upstream -ip_dst_addr 10.1.67.100 -mac_dst 00:00:00:67:00:01 -frame_size 512 -udp_src_port 6000 -ip_src_addr 10.1.67.10 -rate_bps 10000000 -length_mode fixed -l2_encap ethernet_ii_vlan -l3_protocol ipv4 -udp_dst_port 6000 -vlan_id 4008}
create traffic is in process...
create traffic is done!
SUCCESS
streamblock5</msg>
<status status="PASS" endtime="20190113 23:13:59.649" starttime="20190113 23:13:58.620"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:59.650" starttime="20190113 23:13:58.619"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:59.651" starttime="20190113 23:13:58.607"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>create downstream traffic</arg>
</arguments>
<msg timestamp="20190113 23:13:59.653" level="INFO">create downstream traffic</msg>
<status status="PASS" endtime="20190113 23:13:59.653" starttime="20190113 23:13:59.653"></status>
</kw>
<kw name="create_raw_traffic_udp" library="keyword_tg">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: create bound traffic with udp head on traffic generater</doc>
<arguments>
<arg>tg1</arg>
<arg>downstream</arg>
<arg>subscriber_p1</arg>
<arg>service_p1</arg>
<arg>&amp;{tg_ds_param}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${tg} port ${src_port} to ${dst_port}] create raw traffic with mac_dst:${mac_dst} mac_src:${mac_src} ip_dst:${ip_dst} ip_src:${ip_src} ovlan:${ovlan} ivlan:${ivlan}******</arg>
</arguments>
<msg timestamp="20190113 23:13:59.671" level="INFO">****** [tg1 port service_p1 to subscriber_p1] create raw traffic with mac_dst:00:00:00:11:11:11 mac_src:00:00:00:67:00:01 ip_dst:10.1.67.10 ip_src:10.1.67.100 ovlan:4002 ivlan:4009******</msg>
<status status="PASS" endtime="20190113 23:13:59.672" starttime="20190113 23:13:59.670"></status>
</kw>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>mac_dst=${mac_dst}</arg>
<arg>mac_src=${mac_src}</arg>
<arg>l3_protocol=ipv4</arg>
<arg>ip_dst_addr=${ip_dst}</arg>
<arg>ip_src_addr=${ip_src}</arg>
<arg>l4_protocol=udp</arg>
<arg>udp_dst_port=${udp_dst_port}</arg>
<arg>udp_src_port=${udp_src_port}</arg>
<arg>length_mode=fixed</arg>
<arg>frame_size=${frame_size}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:59.673" starttime="20190113 23:13:59.672"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>evaluate</arg>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<assign>
<var>${rate_bps}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${rate_mbps}*1000000</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:59.676" starttime="20190113 23:13:59.675"></status>
</kw>
<msg timestamp="20190113 23:13:59.676" level="INFO">${rate_bps} = 10000000</msg>
<status status="PASS" endtime="20190113 23:13:59.676" starttime="20190113 23:13:59.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${rate_mbps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'!='${rate_pps}'</arg>
<arg>Set To Dictionary</arg>
<arg>${dict_option}</arg>
<arg>rate_pps=${rate_pps}</arg>
</arguments>
<kw name="Set To Dictionary" library="Collections">
<doc>Adds the given ``key_value_pairs`` and ``items`` to the ``dictionary``.</doc>
<arguments>
<arg>${dict_option}</arg>
<arg>rate_bps=${rate_bps}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:13:59.680" starttime="20190113 23:13:59.679"></status>
</kw>
<status status="PASS" endtime="20190113 23:13:59.680" starttime="20190113 23:13:59.677"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'=='${ovlan}'</arg>
<arg>TG Create Untagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE IF</arg>
<arg>'${EMPTY}'=='${ivlan}'</arg>
<arg>TG Create Single Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
<arg>ELSE</arg>
<arg>TG Create Double Tagged Stream On Port</arg>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ivlan}</arg>
<arg>${ivlan_pbit}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<kw name="Tg Create Double Tagged Stream On Port" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Create double tag stream by name on traffic generator port.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${traffic_name}</arg>
<arg>${dst_port}</arg>
<arg>${src_port}</arg>
<arg>${ivlan}</arg>
<arg>${ivlan_pbit}</arg>
<arg>${ovlan}</arg>
<arg>${ovlan_pbit}</arg>
<arg>&amp;{dict_option}</arg>
</arguments>
<msg timestamp="20190113 23:14:00.670" level="INFO">CsHLT::traffic_conf create 11/9 { -vlan_user_priority 0 -vlan_id_outer 4002 -mac_dst 00:00:00:11:11:11 -ip_dst_addr 10.1.67.10 -ip_src_addr 10.1.67.100 -frame_size 512 -l2_encap ethernet_ii_vlan -l3_protocol ipv4 -vlan_outer_user_priority 0 -udp_dst_port 6000 -vlan_id 4009 -mac_src 00:00:00:67:00:01 -l4_protocol udp -name downstream -length_mode fixed -udp_src_port 6000 -rate_bps 10000000}
create traffic is in process...
create traffic is done!
SUCCESS
streamblock6</msg>
<status status="PASS" endtime="20190113 23:14:00.671" starttime="20190113 23:13:59.683"></status>
</kw>
<status status="PASS" endtime="20190113 23:14:00.672" starttime="20190113 23:13:59.681"></status>
</kw>
<status status="PASS" endtime="20190113 23:14:00.674" starttime="20190113 23:13:59.668"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>send traffic and capture</arg>
</arguments>
<msg timestamp="20190113 23:14:00.676" level="INFO">send traffic and capture</msg>
<status status="PASS" endtime="20190113 23:14:00.676" starttime="20190113 23:14:00.675"></status>
</kw>
<kw name="Tg Clear Traffic Stats" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Clear Traffic statistics.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:14:07.734" starttime="20190113 23:14:00.676"></status>
</kw>
<kw name="start_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:start capture before start traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Config Packet Buffers" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Define how the buffers will be managed for packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<msg timestamp="20190113 23:14:07.772" level="INFO">[CsHLT::packetConfigBuffers port1 stop {}
stop capture buffer is in process...
response info: ====&gt; {status 1}
stop capture buffer is done!
SUCCESS
]</msg>
<status status="PASS" endtime="20190113 23:14:07.772" starttime="20190113 23:14:07.736"></status>
</kw>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>start</arg>
</arguments>
<status status="PASS" endtime="20190113 23:14:09.213" starttime="20190113 23:14:07.774"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after start_capture</arg>
</arguments>
<msg timestamp="20190113 23:14:09.217" level="INFO">wait 1s after start_capture</msg>
<status status="PASS" endtime="20190113 23:14:09.217" starttime="20190113 23:14:09.215"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:14:10.219" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:14:10.219" starttime="20190113 23:14:09.217"></status>
</kw>
<status status="PASS" endtime="20190113 23:14:10.221" starttime="20190113 23:14:07.735"></status>
</kw>
<kw name="start_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:start capture before start traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Config Packet Buffers" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Define how the buffers will be managed for packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<msg timestamp="20190113 23:14:10.262" level="INFO">[CsHLT::packetConfigBuffers port2 stop {}
stop capture buffer is in process...
response info: ====&gt; {status 1}
stop capture buffer is done!
SUCCESS
]</msg>
<status status="PASS" endtime="20190113 23:14:10.262" starttime="20190113 23:14:10.227"></status>
</kw>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>start</arg>
</arguments>
<status status="PASS" endtime="20190113 23:14:12.380" starttime="20190113 23:14:10.264"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after start_capture</arg>
</arguments>
<msg timestamp="20190113 23:14:12.383" level="INFO">wait 1s after start_capture</msg>
<status status="PASS" endtime="20190113 23:14:12.383" starttime="20190113 23:14:12.382"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:14:13.385" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:14:13.386" starttime="20190113 23:14:12.384"></status>
</kw>
<status status="PASS" endtime="20190113 23:14:13.386" starttime="20190113 23:14:10.224"></status>
</kw>
<kw name="Tg Start All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Start All the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:14:23.889" starttime="20190113 23:14:13.389"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${traffic_run_time}</arg>
<arg>Wait for traffic run</arg>
</arguments>
<msg timestamp="20190113 23:14:33.901" level="INFO">Slept 10 seconds</msg>
<msg timestamp="20190113 23:14:33.901" level="INFO">Wait for traffic run</msg>
<status status="PASS" endtime="20190113 23:14:33.901" starttime="20190113 23:14:23.898"></status>
</kw>
<kw name="Tg Stop All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Stop all the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:14:42.527" starttime="20190113 23:14:33.903"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>${stc_wait_time}</arg>
<arg>wait for stc stop</arg>
</arguments>
<msg timestamp="20190113 23:14:47.530" level="INFO">Slept 5 seconds</msg>
<msg timestamp="20190113 23:14:47.530" level="INFO">wait for stc stop</msg>
<status status="PASS" endtime="20190113 23:14:47.530" starttime="20190113 23:14:42.528"></status>
</kw>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:14:49.044" starttime="20190113 23:14:47.534"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:14:49.047" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:14:49.047" starttime="20190113 23:14:49.046"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:14:50.049" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:14:50.049" starttime="20190113 23:14:49.048"></status>
</kw>
<status status="PASS" endtime="20190113 23:14:50.050" starttime="20190113 23:14:47.532"></status>
</kw>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:14:52.609" starttime="20190113 23:14:50.053"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:14:52.612" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:14:52.612" starttime="20190113 23:14:52.611"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:14:53.613" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:14:53.614" starttime="20190113 23:14:52.613"></status>
</kw>
<status status="PASS" endtime="20190113 23:14:53.615" starttime="20190113 23:14:50.052"></status>
</kw>
<kw name="Tg Verify Traffic Loss Rate For All Streams Is Within" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Verify the packages loss rate of all the created stream in traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>${traffic_loss_rate}</arg>
</arguments>
<msg timestamp="20190113 23:14:54.389" level="INFO">[CsHLT::print_stats 
printing stats...
#############################################
port1:
    stream:
        streamblock6:
            rx:
                misinserted_pkts: 0
                total_pkt_bytes: 15887700
                prbs_bit_errors: 0
                ipv4_outer_present: 0
                min_delay: 5.325
                ipv6_outer_present: 0
                rx_sig_count: 31275
                max_delay: 6.1875
                avg_delay: 5.829913908872902
                duplicate_pkts: 0
                out_of_sequence_pkts: 0
                total_pkts: 31275
                rx_sig_rate: 0
                dropped_pkts: 83
                first_tstamp: 0.0
                udp_present: 1
                total_pkt_bit_rate: 0
                ipv4_present: 1
                min_pkt_length: 0
                last_tstamp: 0.0
                total_pkt_rate: 0
                max_pkt_length: 0
                ipv6_present: 0
                rx_port: 10.245.252.60-11-8 //11/8  10.245.252.60-11-8 //11/8 
                tcp_present: 0
                dropped_pkts_percent: 0.26468524778365965
            tx:
                total_pkt_bytes: 16055296
                total_pkt_rate: 0
                total_pkts: 31358
                ipv4_outer_present: 0
                udp_present: 1
                ipv6_present: 0
                total_pkt_bit_rate: 0
                ipv6_outer_present: 0
                tcp_present: 0
                ipv4_present: 1
status: 1
#############################################
SUCCESS
]
[CsHLT::print_stats 
printing stats...
#############################################
port2:
    stream:
        streamblock5:
            rx:
                misinserted_pkts: 0
                total_pkt_bytes: 16150800
                prbs_bit_errors: 0
                ipv4_outer_present: 0
                min_delay: 5.38
                ipv6_outer_present: 0
                rx_sig_count: 31300
                max_delay: 6.025
                avg_delay: 5.740634984025559
                duplicate_pkts: 0
                out_of_sequence_pkts: 0
                total_pkts: 31300
                rx_sig_rate: 0
                dropped_pkts: 0
                first_tstamp: 0.0
                udp_present: 1
                total_pkt_bit_rate: 0
                ipv4_present: 1
                min_pkt_length: 0
                last_tstamp: 0.0
                total_pkt_rate: 0
                max_pkt_length: 0
                ipv6_present: 0
                rx_port: 10.245.252.60-11-9 //11/9  10.245.252.60-11-9 //11/9 
                tcp_present: 0
                dropped_pkts_percent: 0.0
            tx:
                total_pkt_bytes: 16025600
                total_pkt_rate: 0
                total_pkts: 31300
                ipv4_outer_present: 0
                udp_present: 1
                ipv6_present: 0
                total_pkt_bit_rate: 0
                ipv6_outer_present: 0
                tcp_present: 0
                ipv4_present: 1
status: 1
#############################################
SUCCESS
]</msg>
<msg timestamp="20190113 23:14:54.389" level="FAIL">ValueError: session(tg1): verify traffic loss within. failed (loss_rate: 0.00132465128156 percent: 0.001)</msg>
<msg timestamp="20190113 23:14:54.389" level="DEBUG">Traceback (most recent call last):
  File "/etc/barista/packages/caferobot/trafficgen/trafficgen.py", line 1458, in tg_verify_traffic_loss_rate_for_all_streams_is_Within
    result = _gen.verify_traffic_loss_within(rate)
  File "/etc/barista/packages/cafe/runner/decorators.py", line 80, in wrapper
    r = func(*args, **kwargs)
  File "/etc/barista/packages/cafe/app/driver/stc.py", line 809, in verify_traffic_loss_within
    raise ValueError("session(%s): verify traffic loss within. failed (loss_rate: %s percent: %s)" % (self.name, loss_rate, allowed_loss))</msg>
<status status="FAIL" endtime="20190113 23:14:54.389" starttime="20190113 23:14:53.616"></status>
</kw>
<kw type="teardown" name="traffic_teardown" library="template_bidirection_raw_traffic_and_check">
<doc>teardown</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>stop_capture</arg>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>service_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:14:55.657" starttime="20190113 23:14:54.395"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:14:55.659" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:14:55.659" starttime="20190113 23:14:55.658"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:14:56.660" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:14:56.661" starttime="20190113 23:14:55.659"></status>
</kw>
<status status="PASS" endtime="20190113 23:14:56.662" starttime="20190113 23:14:54.393"></status>
</kw>
<status status="PASS" endtime="20190113 23:14:56.664" starttime="20190113 23:14:54.392"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>stop_capture</arg>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="stop_capture" library="keyword_tg">
<tags>
<tag>@author=AnneLi</tag>
</tags>
<doc>Description:stop capure after stop traffic</doc>
<arguments>
<arg>tg1</arg>
<arg>subscriber_p1</arg>
</arguments>
<kw name="Tg Packet Control" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Starts or stops packet capturing.</doc>
<arguments>
<arg>${tg}</arg>
<arg>${port}</arg>
<arg>stop</arg>
</arguments>
<status status="PASS" endtime="20190113 23:14:57.271" starttime="20190113 23:14:56.670"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>wait 1s after stop_capture</arg>
</arguments>
<msg timestamp="20190113 23:14:57.273" level="INFO">wait 1s after stop_capture</msg>
<status status="PASS" endtime="20190113 23:14:57.273" starttime="20190113 23:14:57.272"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>1</arg>
</arguments>
<msg timestamp="20190113 23:14:58.274" level="INFO">Slept 1 second</msg>
<status status="PASS" endtime="20190113 23:14:58.275" starttime="20190113 23:14:57.273"></status>
</kw>
<status status="PASS" endtime="20190113 23:14:58.275" starttime="20190113 23:14:56.669"></status>
</kw>
<status status="PASS" endtime="20190113 23:14:58.286" starttime="20190113 23:14:56.667"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Tg Stop All Traffic</arg>
<arg>tg1</arg>
</arguments>
<kw name="Tg Stop All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Stop all the traffic in traffic generator devices.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:06.001" starttime="20190113 23:14:58.289"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:06.002" starttime="20190113 23:14:58.288"></status>
</kw>
<kw name="Tg Delete All Traffic" library="caferobot.trafficgen.trafficgen.TrafficGenerator">
<doc>Delete all the traffic in given traffic generator.</doc>
<arguments>
<arg>tg1</arg>
</arguments>
<msg timestamp="20190113 23:15:20.891" level="INFO">###############################
res is: CsHLT::traffic_conf reset None {}
reset traffic is in process...
reset traffic is done!
SUCCESS

###############################</msg>
<status status="PASS" endtime="20190113 23:15:20.891" starttime="20190113 23:15:06.004"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:20.892" starttime="20190113 23:14:54.391"></status>
</kw>
<status status="FAIL" endtime="20190113 23:15:20.893" starttime="20190113 23:13:58.589"></status>
</kw>
<kw type="teardown" name="case teardown">
<doc>teardown</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>svc teardown</arg>
</arguments>
<msg timestamp="20190113 23:15:20.916" level="INFO">svc teardown</msg>
<status status="PASS" endtime="20190113 23:15:20.916" starttime="20190113 23:15:20.915"></status>
</kw>
<kw name="subscriber_point_remove_svc" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: delete l2 basic class-map and policy-map, remove service from subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
<arg>${match_vlan}</arg>
<arg>${service_vlan}</arg>
<arg>${translate_cvlan}</arg>
</arguments>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:15:20.920" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:15:20.920" starttime="20190113 23:15:20.919"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove and delete l2 basic service from ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:15:20.921" level="INFO">****** [eutA] remove and delete l2 basic service from subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:15:20.922" starttime="20190113 23:15:20.920"></status>
</kw>
<kw name="subscriber_point_get_port_type" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: get subscriber port type</doc>
<arguments>
<arg>${subscriber_point}</arg>
</arguments>
<assign>
<var>${port_type}</var>
</assign>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Dictionary Should Contain Key</arg>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<assign>
<var>${contain}</var>
</assign>
<kw name="Dictionary Should Contain Key" library="Collections">
<doc>Fails if ``key`` is not found from ``dictionary``.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.attribute}</arg>
<arg>interface_type</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:20.926" starttime="20190113 23:15:20.925"></status>
</kw>
<msg timestamp="20190113 23:15:20.927" level="INFO">${contain} = True</msg>
<status status="PASS" endtime="20190113 23:15:20.927" starttime="20190113 23:15:20.924"></status>
</kw>
<kw name="Return From Keyword If" library="BuiltIn">
<doc>Returns from the enclosing user keyword if ``condition`` is true.</doc>
<arguments>
<arg>${contain}</arg>
<arg>${service_model.${subscriber_point}.attribute.interface_type}</arg>
</arguments>
<msg timestamp="20190113 23:15:20.928" level="INFO">Returning from the enclosing user keyword.</msg>
<status status="PASS" endtime="20190113 23:15:20.928" starttime="20190113 23:15:20.927"></status>
</kw>
<msg timestamp="20190113 23:15:20.929" level="INFO">${port_type} = ethernet</msg>
<status status="PASS" endtime="20190113 23:15:20.929" starttime="20190113 23:15:20.923"></status>
</kw>
<kw name="l2_setting_dprov_vlan_policy" library="keyword_svc">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description:</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${service_model.${subscriber_point}.name}</arg>
<arg>${match_vlan}</arg>
<arg>${svlan}</arg>
<arg>${cvlan}</arg>
<arg>${cevlan}</arg>
<arg>${mcast_profile}</arg>
<arg>${cfg_prefix}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] remove l2 basic service from ${port_type} ${port_name} ******</arg>
</arguments>
<msg timestamp="20190113 23:15:20.933" level="INFO">****** [eutA] remove l2 basic service from ethernet 1/2/x3 ******</msg>
<status status="PASS" endtime="20190113 23:15:20.933" starttime="20190113 23:15:20.932"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_ClassMap_v${match_vlan}</arg>
</arguments>
<assign>
<var>${class_map}</var>
</assign>
<msg timestamp="20190113 23:15:20.934" level="INFO">${class_map} = auto_ClassMap_v4008</msg>
<status status="PASS" endtime="20190113 23:15:20.935" starttime="20190113 23:15:20.934"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${EMPTY}'=='${cevlan}'</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}</arg>
<arg>${cfg_prefix}_PolicyMap_v${cvlan}_${cevlan}</arg>
</arguments>
<assign>
<var>${policy_map}</var>
</assign>
<msg timestamp="20190113 23:15:20.936" level="INFO">${policy_map} = auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 23:15:20.936" starttime="20190113 23:15:20.935"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:15:20.938" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:15:20.938" starttime="20190113 23:15:20.937"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:20.941" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:22.815" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v4009
   class-map-ethernet auto_ClassMap_v4008
    flow 1
    !
   !
  !
  no shutdown
 !
!
NGPON2X4</msg>
<msg timestamp="20190113 23:15:22.815" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
 vlan 4002
  policy-map auto_PolicyMap_v4009
   class-map-ethernet auto_ClassMap_v4008
    flo...</msg>
<status status="PASS" endtime="20190113 23:15:22.815" starttime="20190113 23:15:20.938"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove multicast-profile from interface</arg>
</arguments>
<msg timestamp="20190113 23:15:22.818" level="INFO">remove multicast-profile from interface</msg>
<status status="PASS" endtime="20190113 23:15:22.818" starttime="20190113 23:15:22.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"${mcast_profile}"!="${EMPTY}"</arg>
<arg>Run Keyword And Continue On Failure</arg>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>igmp multicast-profile=${EMPTY}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:22.821" starttime="20190113 23:15:22.819"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove policy-map from interface</arg>
</arguments>
<msg timestamp="20190113 23:15:22.822" level="INFO">remove policy-map from interface</msg>
<status status="PASS" endtime="20190113 23:15:22.823" starttime="20190113 23:15:22.821"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>${svlan}</arg>
<arg>policy-map=${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:15:22.830" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:23.115" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:15:23.115" starttime="20190113 23:15:22.828"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:23.122" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:23.448" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:15:23.448" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:15:23.448" starttime="20190113 23:15:23.119"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:23.452" starttime="20190113 23:15:23.451"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:23.453" starttime="20190113 23:15:23.117"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:23.459" level="INFO">send session_command, cmd=vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:23.771" level="INFO">session_command result=vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:15:23.771" level="INFO">${res} = vlan 4002
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:15:23.771" starttime="20190113 23:15:23.457"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:23.775" starttime="20190113 23:15:23.774"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:23.775" starttime="20190113 23:15:23.455"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:23.780" starttime="20190113 23:15:23.454"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:23.784" starttime="20190113 23:15:23.782"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:23.787" starttime="20190113 23:15:23.785"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:23.789" starttime="20190113 23:15:23.788"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:15:23.800" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:15:23.801" starttime="20190113 23:15:23.799"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = policy-map">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:15:23.806" level="INFO">${value} = auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 23:15:23.806" starttime="20190113 23:15:23.805"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:15:23.810" level="INFO">${result_string} =  policy-map auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 23:15:23.810" starttime="20190113 23:15:23.808"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:23.811" starttime="20190113 23:15:23.803"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:23.811" starttime="20190113 23:15:23.801"></status>
</kw>
<msg timestamp="20190113 23:15:23.812" level="INFO">${cmd_string} =  policy-map auto_PolicyMap_v4009</msg>
<status status="PASS" endtime="20190113 23:15:23.813" starttime="20190113 23:15:23.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:23.820" level="INFO">send session_command, cmd=no  policy-map auto_PolicyMap_v4009, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:24.278" level="INFO">session_command result=no  policy-map auto_PolicyMap_v4009
NGPON2X4(config-vlan-4002)</msg>
<msg timestamp="20190113 23:15:24.279" level="INFO">${res} = no  policy-map auto_PolicyMap_v4009
NGPON2X4(config-vlan-4002)</msg>
<status status="PASS" endtime="20190113 23:15:24.279" starttime="20190113 23:15:23.818"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:24.286" starttime="20190113 23:15:24.285"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:24.286" starttime="20190113 23:15:23.816"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:24.288" starttime="20190113 23:15:23.814"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:15:24.291" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:24.593" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:15:24.593" starttime="20190113 23:15:24.289"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:24.595" starttime="20190113 23:15:22.825"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:24.597" starttime="20190113 23:15:22.823"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove svlan from interface</arg>
</arguments>
<msg timestamp="20190113 23:15:24.599" level="INFO">remove svlan from interface</msg>
<status status="PASS" endtime="20190113 23:15:24.600" starttime="20190113 23:15:24.599"></status>
</kw>
<kw name="Run Keyword And Continue On Failure" library="BuiltIn">
<doc>Runs the keyword and continues execution even if a failure occurs.</doc>
<arguments>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="dprov_interface" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: interface deprovision, especially for remove svc</doc>
<arguments>
<arg>${device}</arg>
<arg>${port_type}</arg>
<arg>${port_name}</arg>
<arg>vlan=${svlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:15:24.607" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:24.894" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:15:24.895" starttime="20190113 23:15:24.604"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port_type} ${port_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:24.903" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:25.188" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:15:25.189" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:15:25.189" starttime="20190113 23:15:24.899"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:25.192" starttime="20190113 23:15:25.191"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:25.193" starttime="20190113 23:15:24.897"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${svc_vlan}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>vlan ${svc_vlan}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:25.198" starttime="20190113 23:15:25.197"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${policy_map_name}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>policy-map ${policy_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:25.199" starttime="20190113 23:15:25.198"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${class_map_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${class_map_type} ${class_map_name}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:25.201" starttime="20190113 23:15:25.200"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${sub_view_type}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>${sub_view_type} ${sub_view_value}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:25.203" starttime="20190113 23:15:25.202"></status>
</kw>
<kw name="convert_dictionary_to_string" library="keyword_command">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: convert dictionary to string with all key and value</doc>
<arguments>
<arg>&amp;{dict_cmd}</arg>
</arguments>
<assign>
<var>${cmd_string}</var>
</assign>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:15:25.211" level="INFO">${result_string} = </msg>
<status status="PASS" endtime="20190113 23:15:25.212" starttime="20190113 23:15:25.210"></status>
</kw>
<kw type="for" name="${key} IN [ @{dict.keys()} ]">
<kw type="foritem" name="${key} = vlan">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${dict}</arg>
<arg>${key}</arg>
</arguments>
<assign>
<var>${value}</var>
</assign>
<msg timestamp="20190113 23:15:25.215" level="INFO">${value} = 4002</msg>
<status status="PASS" endtime="20190113 23:15:25.215" starttime="20190113 23:15:25.214"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${result_string} ${key} ${value}</arg>
</arguments>
<assign>
<var>${result_string}</var>
</assign>
<msg timestamp="20190113 23:15:25.216" level="INFO">${result_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 23:15:25.217" starttime="20190113 23:15:25.215"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:25.217" starttime="20190113 23:15:25.213"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:25.217" starttime="20190113 23:15:25.212"></status>
</kw>
<msg timestamp="20190113 23:15:25.218" level="INFO">${cmd_string} =  vlan 4002</msg>
<status status="PASS" endtime="20190113 23:15:25.218" starttime="20190113 23:15:25.206"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${EMPTY}'!='${cmd_string}'</arg>
<arg>Axos Cli With Error Check</arg>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${cmd_string}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:25.224" level="INFO">send session_command, cmd=no  vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:25.760" level="INFO">session_command result=no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:15:25.760" level="INFO">${res} = no  vlan 4002
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:15:25.760" starttime="20190113 23:15:25.222"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:25.763" starttime="20190113 23:15:25.762"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:25.763" starttime="20190113 23:15:25.220"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:25.764" starttime="20190113 23:15:25.219"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:15:25.768" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:26.058" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:15:26.059" starttime="20190113 23:15:25.766"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:26.060" starttime="20190113 23:15:24.602"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:26.061" starttime="20190113 23:15:24.600"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>check eth-svc</arg>
</arguments>
<msg timestamp="20190113 23:15:26.063" level="INFO">check eth-svc</msg>
<status status="PASS" endtime="20190113 23:15:26.064" starttime="20190113 23:15:26.063"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ${port_type} ${port_name}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:26.066" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x3, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:27.657" level="INFO">session_command result=show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<msg timestamp="20190113 23:15:27.657" level="INFO">${res} = show running-config interface ethernet 1/2/x3
interface ethernet 1/2/x3
 no shutdown
 role     uni
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:15:27.657" starttime="20190113 23:15:26.064"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete policy-map</arg>
</arguments>
<msg timestamp="20190113 23:15:27.660" level="INFO">delete policy-map</msg>
<status status="PASS" endtime="20190113 23:15:27.660" starttime="20190113 23:15:27.659"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>policy-map</arg>
<arg>${policy_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:15:27.664" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:27.930" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:15:27.930" starttime="20190113 23:15:27.662"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:27.935" level="INFO">send session_command, cmd=no policy-map auto_PolicyMap_v4009, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:28.921" level="INFO">session_command result=no policy-map auto_PolicyMap_v4009
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:15:28.922" level="INFO">${res} = no policy-map auto_PolicyMap_v4009
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:15:28.922" starttime="20190113 23:15:27.933"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:28.925" starttime="20190113 23:15:28.924"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:28.926" starttime="20190113 23:15:27.932"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:15:28.930" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:29.262" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:15:29.263" starttime="20190113 23:15:28.928"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:29.264" starttime="20190113 23:15:27.661"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete class-map</arg>
</arguments>
<msg timestamp="20190113 23:15:29.266" level="INFO">delete class-map</msg>
<status status="PASS" endtime="20190113 23:15:29.266" starttime="20190113 23:15:29.265"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>class-map ethernet</arg>
<arg>${class_map}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:15:29.271" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:29.539" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:15:29.540" starttime="20190113 23:15:29.269"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:29.545" level="INFO">send session_command, cmd=no class-map ethernet auto_ClassMap_v4008, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:29.914" level="INFO">session_command result=no class-map ethernet auto_ClassMap_v4008
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:15:29.915" level="INFO">${res} = no class-map ethernet auto_ClassMap_v4008
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:15:29.915" starttime="20190113 23:15:29.543"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:29.918" starttime="20190113 23:15:29.916"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:29.918" starttime="20190113 23:15:29.541"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:15:29.922" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:30.329" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:15:30.329" starttime="20190113 23:15:29.920"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:30.331" starttime="20190113 23:15:29.267"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:30.334" starttime="20190113 23:15:20.930"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:30.335" starttime="20190113 23:15:20.917"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:30.337" starttime="20190113 23:15:20.914"></status>
</kw>
<doc>1 create a class-map to match VLAN x in flow 1 succesfully
2 create a policy-map to bind the class-map with the action of translate-cevlan-tag succesfully
3 add eth-port1 to s-tag with transport-service-profile succesfully
4 apply the s-tag and policy-map to ethernet uni succesfully
5 send upstream traffic with VLAN x to ethernet uni and downstream with s-tag and cetag to eth-port1 eth-port1 can pass the upstream traffic with the right double tag; the client can receive the downstream traffic with tag x</doc>
<tags>
<tag>@author=MinGu</tag>
<tag>@eut=10GE-12</tag>
<tag>@feature=Policy Map</tag>
<tag>@globalid=2532599</tag>
<tag>@priority=P1</tag>
<tag>@subFeature=10GE-12: Policy Map support</tag>
<tag>@tcid=AXOS_E72_PARENT-TC-4352</tag>
<tag>@user_interface=CLI</tag>
</tags>
<status status="FAIL" endtime="20190113 23:15:30.425" critical="yes" starttime="20190113 23:13:46.302">ValueError: session(tg1): verify traffic loss within. failed (loss_rate: 0.00132465128156 percent: 0.001)</status>
</test>
<status status="FAIL" endtime="20190113 23:15:30.641" starttime="20190113 23:13:46.080"></status>
</suite>
<kw type="teardown" name="eth_policy_map_suite_deprovision">
<doc>suite deprovision for sub_feature</doc>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>suite deprovision for sub_feature</arg>
</arguments>
<msg timestamp="20190113 23:15:30.750" level="INFO">suite deprovision for sub_feature</msg>
<status status="PASS" endtime="20190113 23:15:30.750" starttime="20190113 23:15:30.749"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>subscriber_point deprovision</arg>
</arguments>
<msg timestamp="20190113 23:15:30.752" level="INFO">subscriber_point deprovision</msg>
<status status="PASS" endtime="20190113 23:15:30.752" starttime="20190113 23:15:30.751"></status>
</kw>
<kw name="subscriber_point_dprov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: deprovision for subscriber_point</doc>
<arguments>
<arg>subscriber_point1</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** subscriber service deprovision for ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:15:30.755" level="INFO">****** subscriber service deprovision for subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:15:30.755" starttime="20190113 23:15:30.754"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:15:30.757" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:15:30.757" starttime="20190113 23:15:30.756"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>subscriber_point_${service_model.${subscriber_point}.type}_dprov</arg>
<arg>${device}</arg>
<arg>${subscriber_point}</arg>
</arguments>
<kw name="subscriber_point_eth_dprov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: ethernet port subscriber deprovision (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${subscriber_point}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] ethernet port subscriber deprovision for ${subscriber_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:15:30.762" level="INFO">****** [eutA] ethernet port subscriber deprovision for subscriber_point1 ******</msg>
<status status="PASS" endtime="20190113 23:15:30.762" starttime="20190113 23:15:30.761"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${subscriber_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${subscriber_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 23:15:30.766" level="INFO">${port} = 1/2/x3</msg>
<status status="PASS" endtime="20190113 23:15:30.767" starttime="20190113 23:15:30.765"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** provision port ${port} role and parameter ******</arg>
</arguments>
<msg timestamp="20190113 23:15:30.768" level="INFO">****** provision port 1/2/x3 role and parameter ******</msg>
<status status="PASS" endtime="20190113 23:15:30.768" starttime="20190113 23:15:30.767"></status>
</kw>
<kw name="dprov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>role</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:30.777" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:31.014" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:15:31.015" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:15:31.015" starttime="20190113 23:15:30.774"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:31.017" starttime="20190113 23:15:31.016"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:31.018" starttime="20190113 23:15:30.772"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:31.023" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:31.335" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:15:31.335" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:15:31.335" starttime="20190113 23:15:31.021"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:31.339" starttime="20190113 23:15:31.337"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:31.340" starttime="20190113 23:15:31.019"></status>
</kw>
<kw type="for" name="${element} IN [ @{list_cmd} ]">
<kw type="foritem" name="${element} = role">
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${element}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:31.346" level="INFO">send session_command, cmd=no role, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:32.156" level="INFO">session_command result=no role
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:15:32.157" level="INFO">${res} = no role
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:15:32.157" starttime="20190113 23:15:31.344"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:32.160" starttime="20190113 23:15:32.158"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:32.160" starttime="20190113 23:15:31.343"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:32.161" starttime="20190113 23:15:31.342"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:32.162" starttime="20190113 23:15:31.342"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:32.166" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:32.378" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:15:32.378" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:15:32.378" starttime="20190113 23:15:32.164"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:32.381" starttime="20190113 23:15:32.380"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:32.381" starttime="20190113 23:15:32.163"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:32.383" starttime="20190113 23:15:30.769"></status>
</kw>
<kw name="shutdown_port" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Puts an interface in shutdown mode</doc>
<arguments>
<arg>${device}</arg>
<arg>ethernet</arg>
<arg>${port}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:32.398" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:32.610" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:15:32.611" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:15:32.611" starttime="20190113 23:15:32.390"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:32.613" starttime="20190113 23:15:32.612"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:32.614" starttime="20190113 23:15:32.389"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port-type} ${port}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:32.619" level="INFO">send session_command, cmd=interface ethernet 1/2/x3, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:32.825" level="INFO">session_command result=interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:15:32.826" level="INFO">${res} = interface ethernet 1/2/x3
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:15:32.826" starttime="20190113 23:15:32.617"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:32.828" starttime="20190113 23:15:32.827"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:32.829" starttime="20190113 23:15:32.615"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>shutdown</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:32.836" level="INFO">send session_command, cmd=shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:33.454" level="INFO">session_command result=shutdown
NGPON2X4(config-ethernet-1/2/x3)</msg>
<msg timestamp="20190113 23:15:33.455" level="INFO">${res} = shutdown
NGPON2X4(config-ethernet-1/2/x3)</msg>
<status status="PASS" endtime="20190113 23:15:33.455" starttime="20190113 23:15:32.832"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:33.458" starttime="20190113 23:15:33.457"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:33.459" starttime="20190113 23:15:32.830"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:33.464" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:33.664" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:15:33.665" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:15:33.665" starttime="20190113 23:15:33.462"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:33.667" starttime="20190113 23:15:33.666"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:33.668" starttime="20190113 23:15:33.460"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:33.669" starttime="20190113 23:15:32.388"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:33.670" starttime="20190113 23:15:30.764"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:33.671" starttime="20190113 23:15:30.763"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:33.672" starttime="20190113 23:15:30.760"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:33.673" starttime="20190113 23:15:30.758"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:33.674" starttime="20190113 23:15:30.753"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>service_point remove_svc and deprovision</arg>
</arguments>
<msg timestamp="20190113 23:15:33.676" level="INFO">service_point remove_svc and deprovision</msg>
<status status="PASS" endtime="20190113 23:15:33.676" starttime="20190113 23:15:33.675"></status>
</kw>
<kw name="service_point_remove_vlan" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: remove vlan for service_point</doc>
<arguments>
<arg>service_point_list1</arg>
<arg>${service_vlan}</arg>
</arguments>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${vlan_list}</arg>
</arguments>
<assign>
<var>${vlan_list_str}</var>
</assign>
<msg timestamp="20190113 23:15:33.678" level="DEBUG">Argument types are:
&lt;type 'int'&gt;</msg>
<msg timestamp="20190113 23:15:33.679" level="INFO">${vlan_list_str} = 4002</msg>
<status status="PASS" endtime="20190113 23:15:33.679" starttime="20190113 23:15:33.678"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${vlan_list_str}</arg>
<arg>,</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${vlan_list_str}</var>
</assign>
<msg timestamp="20190113 23:15:33.680" level="INFO">${vlan_list_str} = 4002</msg>
<status status="PASS" endtime="20190113 23:15:33.680" starttime="20190113 23:15:33.679"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${cfg_prefix}_TransVlan_${vlan_list_str}</arg>
</arguments>
<assign>
<var>${transport_prf}</var>
</assign>
<msg timestamp="20190113 23:15:33.682" level="INFO">${transport_prf} = auto_TransVlan_4002</msg>
<status status="PASS" endtime="20190113 23:15:33.682" starttime="20190113 23:15:33.681"></status>
</kw>
<kw type="for" name="${service_point} IN [ @{service_model.${service_point_list}} ]">
<kw type="foritem" name="${service_point} = service_point1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:15:33.685" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:15:33.686" starttime="20190113 23:15:33.684"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** uplink service remove vlan ${vlan_list} for ${device} ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:15:33.687" level="INFO">****** uplink service remove vlan 4002 for eutA service_point1 ******</msg>
<status status="PASS" endtime="20190113 23:15:33.687" starttime="20190113 23:15:33.686"></status>
</kw>
<kw name="service_point_remove_transport_profile" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: remove transport_profile for service_point interface (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${service_point}</arg>
<arg>${transport_prf}</arg>
</arguments>
<kw name="Run Keyword And Return If" library="BuiltIn">
<doc>Runs the specified keyword and returns from the enclosing user keyword.</doc>
<arguments>
<arg>'lag'=='${service_model.${service_point}.type}'</arg>
<arg>dprov_interface</arg>
<arg>${device}</arg>
<arg>lag</arg>
<arg>${service_model.${service_point}.name}</arg>
<arg>transport-service-profile=${transport_prf}</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:33.691" starttime="20190113 23:15:33.689"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>remove transport-service-profile from interface</arg>
</arguments>
<msg timestamp="20190113 23:15:33.692" level="INFO">remove transport-service-profile from interface</msg>
<status status="PASS" endtime="20190113 23:15:33.692" starttime="20190113 23:15:33.691"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${service_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 23:15:33.695" level="INFO">${port} = 1/2/x2</msg>
<status status="PASS" endtime="20190113 23:15:33.695" starttime="20190113 23:15:33.694"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** deprovision port ${port} transport-service-profile******</arg>
</arguments>
<msg timestamp="20190113 23:15:33.697" level="INFO">****** deprovision port 1/2/x2 transport-service-profile******</msg>
<status status="PASS" endtime="20190113 23:15:33.697" starttime="20190113 23:15:33.696"></status>
</kw>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>show running-config interface ethernet ${port}</arg>
</arguments>
<msg timestamp="20190113 23:15:33.699" level="INFO">send session_command, cmd=show running-config interface ethernet 1/2/x2, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:35.306" level="INFO">session_command result=show running-config interface ethernet 1/2/x2
interface ethernet 1/2/x2
 no shutdown
 role                      inni
 transport-service-profile auto_TransVlan_4002
!
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:15:35.306" starttime="20190113 23:15:33.698"></status>
</kw>
<kw name="dprov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>transport-service-profile</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:35.314" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:35.516" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:15:35.516" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:15:35.516" starttime="20190113 23:15:35.311"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:35.528" starttime="20190113 23:15:35.527"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:35.529" starttime="20190113 23:15:35.310"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:35.537" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:35.766" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:15:35.766" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:15:35.766" starttime="20190113 23:15:35.533"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:35.770" starttime="20190113 23:15:35.768"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:35.771" starttime="20190113 23:15:35.532"></status>
</kw>
<kw type="for" name="${element} IN [ @{list_cmd} ]">
<kw type="foritem" name="${element} = transport-service-profile">
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${element}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:35.780" level="INFO">send session_command, cmd=no transport-service-profile, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:36.170" level="INFO">session_command result=no transport-service-profile
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:15:36.171" level="INFO">${res} = no transport-service-profile
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:15:36.171" starttime="20190113 23:15:35.777"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:36.175" starttime="20190113 23:15:36.174"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:36.177" starttime="20190113 23:15:35.775"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:36.178" starttime="20190113 23:15:35.773"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:36.179" starttime="20190113 23:15:35.772"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:36.184" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:36.383" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:15:36.383" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:15:36.383" starttime="20190113 23:15:36.182"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:36.386" starttime="20190113 23:15:36.385"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:36.387" starttime="20190113 23:15:36.181"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:36.387" starttime="20190113 23:15:35.308"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:36.388" starttime="20190113 23:15:33.693"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:36.389" starttime="20190113 23:15:33.692"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:36.390" starttime="20190113 23:15:33.688"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>delete_config_object</arg>
<arg>${device}</arg>
<arg>transport-service-profile</arg>
<arg>${transport_prf}</arg>
</arguments>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>${device}</arg>
<arg>transport-service-profile</arg>
<arg>${transport_prf}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:15:36.396" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:36.582" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:15:36.582" starttime="20190113 23:15:36.394"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:36.589" level="INFO">send session_command, cmd=no transport-service-profile auto_TransVlan_4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:37.807" level="INFO">session_command result=no transport-service-profile auto_TransVlan_4002
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:15:37.807" level="INFO">${res} = no transport-service-profile auto_TransVlan_4002
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:15:37.807" starttime="20190113 23:15:36.586"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:37.811" starttime="20190113 23:15:37.809"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:37.811" starttime="20190113 23:15:36.584"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:15:37.818" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:38.020" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:15:38.020" starttime="20190113 23:15:37.816"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:38.022" starttime="20190113 23:15:36.393"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:38.023" starttime="20190113 23:15:36.392"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:38.025" starttime="20190113 23:15:33.683"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:38.026" starttime="20190113 23:15:33.682"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:38.044" starttime="20190113 23:15:33.676"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>delete vlan</arg>
</arguments>
<msg timestamp="20190113 23:15:38.049" level="INFO">delete vlan</msg>
<status status="PASS" endtime="20190113 23:15:38.049" starttime="20190113 23:15:38.048"></status>
</kw>
<kw name="delete_config_object" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Delete service profile in config view</doc>
<arguments>
<arg>eutA</arg>
<arg>vlan</arg>
<arg>${service_vlan}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<msg timestamp="20190113 23:15:38.053" level="INFO">send session_command, cmd=configure, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:38.250" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:15:38.250" starttime="20190113 23:15:38.051"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${obj_type} ${obj_name}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:38.262" level="INFO">send session_command, cmd=no vlan 4002, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:39.878" level="INFO">session_command result=no vlan 4002
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:15:39.879" level="INFO">${res} = no vlan 4002
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:15:39.879" starttime="20190113 23:15:38.260"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:39.884" starttime="20190113 23:15:39.882"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:39.885" starttime="20190113 23:15:38.258"></status>
</kw>
<kw type="teardown" name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<msg timestamp="20190113 23:15:39.899" level="INFO">send session_command, cmd=end, prompt=None, timeout=None, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:40.128" level="INFO">session_command result=end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:15:40.129" starttime="20190113 23:15:39.889"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:40.130" starttime="20190113 23:15:38.050"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>service_point deprovision</arg>
</arguments>
<msg timestamp="20190113 23:15:40.132" level="INFO">service_point deprovision</msg>
<status status="PASS" endtime="20190113 23:15:40.132" starttime="20190113 23:15:40.131"></status>
</kw>
<kw name="service_point_dprov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: deprovision for service_point</doc>
<arguments>
<arg>service_point_list1</arg>
</arguments>
<kw type="for" name="${service_point} IN [ @{service_model.${service_point_list}} ]">
<kw type="foritem" name="${service_point} = service_point1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.device}</arg>
</arguments>
<assign>
<var>${device}</var>
</assign>
<msg timestamp="20190113 23:15:40.139" level="INFO">${device} = eutA</msg>
<status status="PASS" endtime="20190113 23:15:40.139" starttime="20190113 23:15:40.137"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** uplink service deprovision for ${device} ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:15:40.140" level="INFO">****** uplink service deprovision for eutA service_point1 ******</msg>
<status status="PASS" endtime="20190113 23:15:40.141" starttime="20190113 23:15:40.139"></status>
</kw>
<kw name="Run Keyword" library="BuiltIn">
<doc>Executes the given keyword with the given arguments.</doc>
<arguments>
<arg>service_point_${service_model.${service_point}.type}_dprov</arg>
<arg>${device}</arg>
<arg>${service_point}</arg>
</arguments>
<kw name="service_point_eth_dprov" library="keyword_service_model">
<tags>
<tag>@author=CindyGao</tag>
</tags>
<doc>Description: deprovision for eth type service point (This keyword is only internal use, CANNOT be used in TCs)</doc>
<arguments>
<arg>${device}</arg>
<arg>${service_point}</arg>
</arguments>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** [${device}] ethernet port basic deprovision for ${service_point} ******</arg>
</arguments>
<msg timestamp="20190113 23:15:40.145" level="INFO">****** [eutA] ethernet port basic deprovision for service_point1 ******</msg>
<status status="PASS" endtime="20190113 23:15:40.146" starttime="20190113 23:15:40.145"></status>
</kw>
<kw type="for" name="${port_key} IN [ @{service_model.${service_point}.member} ]">
<kw type="foritem" name="${port_key} = interface1">
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${service_model.${service_point}.member.${port_key}}</arg>
</arguments>
<assign>
<var>${port}</var>
</assign>
<msg timestamp="20190113 23:15:40.149" level="INFO">${port} = 1/2/x2</msg>
<status status="PASS" endtime="20190113 23:15:40.149" starttime="20190113 23:15:40.148"></status>
</kw>
<kw name="Log" library="BuiltIn">
<arguments>
<arg>****** provision port ${port} role and parameter ******</arg>
</arguments>
<msg timestamp="20190113 23:15:40.150" level="INFO">****** provision port 1/2/x2 role and parameter ******</msg>
<status status="PASS" endtime="20190113 23:15:40.150" starttime="20190113 23:15:40.149"></status>
</kw>
<kw name="dprov_interface_ethernet" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>configure on interface</doc>
<arguments>
<arg>${device}</arg>
<arg>${port}</arg>
<arg>role</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:40.157" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:40.350" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:15:40.351" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:15:40.351" starttime="20190113 23:15:40.154"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:40.354" starttime="20190113 23:15:40.353"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:40.355" starttime="20190113 23:15:40.152"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ethernet ${interface}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:40.376" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:40.581" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:15:40.582" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:15:40.582" starttime="20190113 23:15:40.370"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:40.585" starttime="20190113 23:15:40.584"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:40.585" starttime="20190113 23:15:40.368"></status>
</kw>
<kw type="for" name="${element} IN [ @{list_cmd} ]">
<kw type="foritem" name="${element} = role">
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>no ${element}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:40.593" level="INFO">send session_command, cmd=no role, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:41.435" level="INFO">session_command result=no role
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:15:41.435" level="INFO">${res} = no role
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:15:41.435" starttime="20190113 23:15:40.590"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:41.438" starttime="20190113 23:15:41.437"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:41.439" starttime="20190113 23:15:40.588"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:41.440" starttime="20190113 23:15:40.587"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:41.441" starttime="20190113 23:15:40.586"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:41.446" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:41.645" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:15:41.646" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:15:41.646" starttime="20190113 23:15:41.444"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:41.648" starttime="20190113 23:15:41.647"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:41.649" starttime="20190113 23:15:41.442"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:41.650" starttime="20190113 23:15:40.151"></status>
</kw>
<kw name="shutdown_port" library="keyword_command">
<tags>
<tag>@author=BlairWang</tag>
</tags>
<doc>Puts an interface in shutdown mode</doc>
<arguments>
<arg>${device}</arg>
<arg>ethernet</arg>
<arg>${port}</arg>
</arguments>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>configure</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:41.662" level="INFO">send session_command, cmd=configure, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:41.870" level="INFO">session_command result=configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<msg timestamp="20190113 23:15:41.870" level="INFO">${res} = configure
Enter configuration commands, one per line. End with CNTL/Z.
NGPON2X4(config)</msg>
<status status="PASS" endtime="20190113 23:15:41.870" starttime="20190113 23:15:41.655"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:41.873" starttime="20190113 23:15:41.872"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:41.874" starttime="20190113 23:15:41.653"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>interface ${port-type} ${port}</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:41.882" level="INFO">send session_command, cmd=interface ethernet 1/2/x2, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:42.078" level="INFO">session_command result=interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:15:42.078" level="INFO">${res} = interface ethernet 1/2/x2
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:15:42.078" starttime="20190113 23:15:41.877"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:42.082" starttime="20190113 23:15:42.080"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:42.082" starttime="20190113 23:15:41.875"></status>
</kw>
<kw name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>shutdown</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:42.088" level="INFO">send session_command, cmd=shutdown, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:42.689" level="INFO">session_command result=shutdown
NGPON2X4(config-ethernet-1/2/x2)</msg>
<msg timestamp="20190113 23:15:42.689" level="INFO">${res} = shutdown
NGPON2X4(config-ethernet-1/2/x2)</msg>
<status status="PASS" endtime="20190113 23:15:42.689" starttime="20190113 23:15:42.085"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:42.692" starttime="20190113 23:15:42.691"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:42.693" starttime="20190113 23:15:42.084"></status>
</kw>
<kw type="teardown" name="Axos Cli With Error Check" library="keyword_common">
<tags>
<tag>@author=dfarwell</tag>
</tags>
<doc>Sends a CLI command to DUT and confirms response has no errors, if there is no prompt in your topo file this may need to be adjusted</doc>
<arguments>
<arg>${device}</arg>
<arg>end</arg>
</arguments>
<kw name="Cli" library="caferobot.command.adapter.CliAdapter">
<doc>Execute command on the specific connection and get the output of it</doc>
<arguments>
<arg>${DUT}</arg>
<arg>${CMD}</arg>
<arg>prompt=${devices.${DUT}.prompt}</arg>
<arg>timeout=${TIMEOUT}</arg>
</arguments>
<assign>
<var>${res}</var>
</assign>
<msg timestamp="20190113 23:15:42.698" level="INFO">send session_command, cmd=end, prompt={'#': None}, timeout=30, newline=None, retry=1, timeout_exception=1, exclude_prompt=None</msg>
<msg timestamp="20190113 23:15:42.903" level="INFO">session_command result=end
NGPON2X4</msg>
<msg timestamp="20190113 23:15:42.903" level="INFO">${res} = end
NGPON2X4</msg>
<status status="PASS" endtime="20190113 23:15:42.903" starttime="20190113 23:15:42.696"></status>
</kw>
<kw name="Should Not Contain Any" library="BuiltIn">
<doc>Fails if ``container`` contains one or more of the ``*items``.</doc>
<arguments>
<arg>${res}</arg>
<arg>Invalid</arg>
<arg>syntax error</arg>
<arg>Aborted:</arg>
<arg>Error:</arg>
</arguments>
<status status="PASS" endtime="20190113 23:15:42.906" starttime="20190113 23:15:42.905"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:42.907" starttime="20190113 23:15:42.694"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:42.908" starttime="20190113 23:15:41.652"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:42.909" starttime="20190113 23:15:40.147"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:42.910" starttime="20190113 23:15:40.146"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:42.912" starttime="20190113 23:15:40.143"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:42.913" starttime="20190113 23:15:40.141"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:42.925" starttime="20190113 23:15:40.136"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:42.934" starttime="20190113 23:15:40.135"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:42.936" starttime="20190113 23:15:40.133"></status>
</kw>
<status status="PASS" endtime="20190113 23:15:42.938" starttime="20190113 23:15:30.748"></status>
</kw>
<doc>Initialization file test suites
It is for putting suite level setup and teardown procedures
And setting the forced tags for all the test cases in folder and subfolder</doc>
<status status="FAIL" endtime="20190113 23:15:42.939" starttime="20190113 23:09:26.509"></status>
</suite>
<status status="FAIL" endtime="20190113 23:15:42.949" starttime="20190113 23:09:26.504"></status>
</suite>
<status status="FAIL" endtime="20190113 23:15:42.956" starttime="20190113 23:09:26.499"></status>
</suite>
<status status="FAIL" endtime="20190113 23:15:42.963" starttime="20190113 23:09:26.497"></status>
</suite>
<status status="FAIL" endtime="20190113 23:15:42.972" starttime="20190113 23:09:26.494"></status>
</suite>
<status status="FAIL" endtime="20190113 23:15:42.980" starttime="20190113 23:09:26.487"></status>
</suite>
<status status="FAIL" endtime="20190113 23:15:42.987" starttime="20190113 23:09:26.326"></status>
</suite>
<statistics>
<total>
<stat fail="3" pass="0">Critical Tests</stat>
<stat fail="3" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="3" pass="0">@author=MinGu</stat>
<stat fail="3" pass="0">@eut=10GE-12</stat>
<stat fail="3" pass="0">@feature=Policy Map</stat>
<stat fail="2" pass="0">@globalid=2532599</stat>
<stat fail="1" pass="0">@globalid=2532600</stat>
<stat fail="3" pass="0">@priority=P1</stat>
<stat fail="3" pass="0">@subFeature=10GE-12: Policy Map support</stat>
<stat fail="1" pass="0">@tcid=AXOS_E72_PARENT-TC-4350</stat>
<stat fail="1" pass="0">@tcid=AXOS_E72_PARENT-TC-4351</stat>
<stat fail="1" pass="0">@tcid=AXOS_E72_PARENT-TC-4352</stat>
<stat fail="3" pass="0">@user_interface=CLI</stat>
</tag>
<suite>
<stat fail="3" id="s1" name="AXOS" pass="0">AXOS</stat>
<stat fail="3" id="s1-s1" name="AXOS-automation" pass="0">AXOS.AXOS-automation</stat>
<stat fail="3" id="s1-s1-s1" name="Milan" pass="0">AXOS.AXOS-automation.Milan</stat>
<stat fail="3" id="s1-s1-s1-s1" name="ST Test Cases" pass="0">AXOS.AXOS-automation.Milan.ST Test Cases</stat>
<stat fail="3" id="s1-s1-s1-s1-s1" name="Data" pass="0">AXOS.AXOS-automation.Milan.ST Test Cases.Data</stat>
<stat fail="3" id="s1-s1-s1-s1-s1-s1" name="Policy Map" pass="0">AXOS.AXOS-automation.Milan.ST Test Cases.Data.Policy Map</stat>
<stat fail="3" id="s1-s1-s1-s1-s1-s1-s1" name="Testcase" pass="0">AXOS.AXOS-automation.Milan.ST Test Cases.Data.Policy Map.Testcase</stat>
<stat fail="1" id="s1-s1-s1-s1-s1-s1-s1-s1" name="Tc Add Cevlan Tag" pass="0">AXOS.AXOS-automation.Milan.ST Test Cases.Data.Policy Map.Testcase.Tc Add Cevlan Tag</stat>
<stat fail="1" id="s1-s1-s1-s1-s1-s1-s1-s2" name="Tc Remove Cevlan" pass="0">AXOS.AXOS-automation.Milan.ST Test Cases.Data.Policy Map.Testcase.Tc Remove Cevlan</stat>
<stat fail="1" id="s1-s1-s1-s1-s1-s1-s1-s3" name="Tc Translate Cevlan Tag" pass="0">AXOS.AXOS-automation.Milan.ST Test Cases.Data.Policy Map.Testcase.Tc Translate Cevlan Tag</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
